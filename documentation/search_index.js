var search_data = {
    'index': {
        'searchIndex': ["elixir","elixir\\cache","elixir\\cache\\encoder","elixir\\classloader","elixir\\config","elixir\\config\\loader","elixir\\config\\processor","elixir\\config\\writer","elixir\\db","elixir\\db\\orm","elixir\\db\\orm\\relation","elixir\\db\\result","elixir\\db\\sql","elixir\\db\\sql\\mysql","elixir\\db\\sql\\sqlite","elixir\\di","elixir\\dispatcher","elixir\\facade","elixir\\filter","elixir\\form","elixir\\form\\extension","elixir\\form\\field","elixir\\http","elixir\\http\\session","elixir\\http\\session\\handler","elixir\\helper","elixir\\i18n","elixir\\i18n\\loader","elixir\\i18n\\writer","elixir\\logging","elixir\\logging\\writer","elixir\\mvc","elixir\\mvc\\controller","elixir\\mvc\\controller\\helper","elixir\\mvc\\exception","elixir\\mvc\\module","elixir\\pagination","elixir\\pagination\\style","elixir\\routing","elixir\\routing\\generator","elixir\\routing\\loader","elixir\\routing\\matcher","elixir\\routing\\writer","elixir\\security","elixir\\security\\authentification","elixir\\security\\authentification\\storage","elixir\\security\\firewall","elixir\\security\\firewall\\behavior","elixir\\security\\firewall\\identity","elixir\\security\\firewall\\loader","elixir\\security\\firewall\\rbac","elixir\\security\\firewall\\writer","elixir\\security\\rbac","elixir\\tree","elixir\\util","elixir\\validator","elixir\\view","elixir\\view\\helper","elixir\\view\\php","elixir\\view\\storage","elixir\\cache\\apc","elixir\\cache\\cacheabstract","elixir\\cache\\cacheinterface","elixir\\cache\\encoder\\encoderinterface","elixir\\cache\\encoder\\json","elixir\\cache\\encoder\\serialize","elixir\\cache\\file","elixir\\cache\\memcached","elixir\\classloader\\loader","elixir\\classloader\\loaderinterface","elixir\\config\\config","elixir\\config\\configinterface","elixir\\config\\loader\\arr","elixir\\config\\loader\\ini","elixir\\config\\loader\\json","elixir\\config\\loader\\loaderabstract","elixir\\config\\loader\\loaderfactory","elixir\\config\\loader\\loaderinterface","elixir\\config\\loader\\xml","elixir\\config\\processor\\filter","elixir\\config\\processor\\processorabstract","elixir\\config\\processor\\processorinterface","elixir\\config\\writer\\arr","elixir\\config\\writer\\writerabstract","elixir\\config\\writer\\writerinterface","elixir\\db\\dbabstract","elixir\\db\\dbevent","elixir\\db\\dbfactory","elixir\\db\\dbinterface","elixir\\db\\orm\\collection","elixir\\db\\orm\\entityinterface","elixir\\db\\orm\\modelabstract","elixir\\db\\orm\\modelevent","elixir\\db\\orm\\modelfactory","elixir\\db\\orm\\relation\\belongsto","elixir\\db\\orm\\relation\\hasmany","elixir\\db\\orm\\relation\\hasone","elixir\\db\\orm\\relation\\hasoneormany","elixir\\db\\orm\\relation\\pivot","elixir\\db\\orm\\relation\\relation","elixir\\db\\orm\\relation\\relationinterface","elixir\\db\\orm\\repositoryinterface","elixir\\db\\orm\\select","elixir\\db\\pdo","elixir\\db\\result\\pdo","elixir\\db\\result\\setabstract","elixir\\db\\sql\\altertable","elixir\\db\\sql\\column","elixir\\db\\sql\\columnfactory","elixir\\db\\sql\\constraint","elixir\\db\\sql\\constraintfactory","elixir\\db\\sql\\createtable","elixir\\db\\sql\\delete","elixir\\db\\sql\\droptable","elixir\\db\\sql\\expr","elixir\\db\\sql\\insert","elixir\\db\\sql\\joinclause","elixir\\db\\sql\\mysql\\altertable","elixir\\db\\sql\\mysql\\createtable","elixir\\db\\sql\\mysql\\delete","elixir\\db\\sql\\mysql\\droptable","elixir\\db\\sql\\mysql\\insert","elixir\\db\\sql\\mysql\\update","elixir\\db\\sql\\sqlabstract","elixir\\db\\sql\\sqlfactory","elixir\\db\\sql\\sqlite\\altertable","elixir\\db\\sql\\sqlite\\createtable","elixir\\db\\sql\\sqlite\\delete","elixir\\db\\sql\\sqlite\\droptable","elixir\\db\\sql\\sqlite\\insert","elixir\\db\\sql\\sqlite\\select","elixir\\db\\sql\\sqlite\\update","elixir\\db\\sql\\select","elixir\\db\\sql\\update","elixir\\db\\sql\\whereclause","elixir\\di\\container","elixir\\di\\containerevent","elixir\\di\\containerinterface","elixir\\di\\providerinterface","elixir\\dispatcher\\dispatcher","elixir\\dispatcher\\dispatcherinterface","elixir\\dispatcher\\event","elixir\\dispatcher\\subscriberinterface","elixir\\facade\\app","elixir\\facade\\cache","elixir\\facade\\config","elixir\\facade\\db","elixir\\facade\\di","elixir\\facade\\facadeabstract","elixir\\facade\\filter","elixir\\facade\\helper","elixir\\facade\\loader","elixir\\facade\\log","elixir\\facade\\request","elixir\\facade\\session","elixir\\facade\\validator","elixir\\facade\\view","elixir\\filter\\boolean","elixir\\filter\\callback","elixir\\filter\\chain","elixir\\filter\\crop","elixir\\filter\\date","elixir\\filter\\duplicate","elixir\\filter\\email","elixir\\filter\\enlarge","elixir\\filter\\escaper","elixir\\filter\\filterabstract","elixir\\filter\\filterinterface","elixir\\filter\\float","elixir\\filter\\int","elixir\\filter\\nbrformat","elixir\\filter\\protect","elixir\\filter\\rename","elixir\\filter\\replace","elixir\\filter\\resize","elixir\\filter\\trim","elixir\\form\\extension\\csrf","elixir\\form\\extension\\extensioninterface","elixir\\form\\extension\\reference","elixir\\form\\field\\button","elixir\\form\\field\\csrf","elixir\\form\\field\\checkbox","elixir\\form\\field\\fieldabstract","elixir\\form\\field\\fieldevent","elixir\\form\\field\\fieldinterface","elixir\\form\\field\\file","elixir\\form\\field\\fileinterface","elixir\\form\\field\\input","elixir\\form\\field\\multipleabstract","elixir\\form\\field\\multipleinterface","elixir\\form\\field\\radio","elixir\\form\\field\\select","elixir\\form\\field\\textarea","elixir\\form\\form","elixir\\form\\formevent","elixir\\form\\formfactory","elixir\\form\\forminterface","elixir\\form\\utils","elixir\\http\\cookie","elixir\\http\\fileparameters","elixir\\http\\headers","elixir\\http\\parameters","elixir\\http\\parametersinterface","elixir\\http\\request","elixir\\http\\requestfactory","elixir\\http\\response","elixir\\http\\responsefactory","elixir\\http\\sanitizer","elixir\\http\\sessionparameters","elixir\\http\\session\\handler\\db","elixir\\http\\session\\session","elixir\\http\\session\\sessionevent","elixir\\http\\session\\sessioninterface","elixir\\http\\uploader","elixir\\helper\\action","elixir\\helper\\form","elixir\\helper\\forward","elixir\\helper\\helperinterface","elixir\\helper\\i18n","elixir\\helper\\locator","elixir\\helper\\pagination","elixir\\helper\\partial","elixir\\helper\\renderer","elixir\\helper\\security","elixir\\helper\\url","elixir\\i18n\\i18n","elixir\\i18n\\i18nevent","elixir\\i18n\\i18ninterface","elixir\\i18n\\loader\\arr","elixir\\i18n\\loader\\csv","elixir\\i18n\\loader\\gettext","elixir\\i18n\\loader\\json","elixir\\i18n\\loader\\loaderfactory","elixir\\i18n\\loader\\loaderinterface","elixir\\i18n\\locale","elixir\\i18n\\plural","elixir\\i18n\\textdomain","elixir\\i18n\\writer\\arr","elixir\\i18n\\writer\\writerabstract","elixir\\i18n\\writer\\writerinterface","elixir\\logging\\logger","elixir\\logging\\loggerevent","elixir\\logging\\loggerinterface","elixir\\logging\\writer\\file","elixir\\logging\\writer\\firephp","elixir\\logging\\writer\\writerabstract","elixir\\logging\\writer\\writerinterface","elixir\\mvc\\application","elixir\\mvc\\applicationevent","elixir\\mvc\\applicationinterface","elixir\\mvc\\controller\\controllerabstract","elixir\\mvc\\controller\\controllerinterface","elixir\\mvc\\controller\\controllerresolver","elixir\\mvc\\controller\\controllerresolverinterface","elixir\\mvc\\controller\\helper\\container","elixir\\mvc\\controller\\helper\\contextinterface","elixir\\mvc\\controller\\restfulcontrollerabstract","elixir\\mvc\\exception\\errorexception","elixir\\mvc\\exception\\forbiddenexception","elixir\\mvc\\exception\\notfoundexception","elixir\\mvc\\module\\moduleabstract","elixir\\mvc\\module\\moduleinterface","elixir\\mvc\\module\\selectedinterface","elixir\\pagination\\item","elixir\\pagination\\pagination","elixir\\pagination\\paginationinterface","elixir\\pagination\\style\\elastic","elixir\\pagination\\style\\jumping","elixir\\pagination\\style\\styleinterface","elixir\\routing\\collection","elixir\\routing\\generator\\generatorinterface","elixir\\routing\\generator\\querygenerator","elixir\\routing\\generator\\urlgenerator","elixir\\routing\\loader\\arr","elixir\\routing\\loader\\json","elixir\\routing\\loader\\loaderfactory","elixir\\routing\\loader\\loaderinterface","elixir\\routing\\loader\\xml","elixir\\routing\\matcher\\matcherinterface","elixir\\routing\\matcher\\querymatcher","elixir\\routing\\matcher\\routematch","elixir\\routing\\matcher\\urlmatcher","elixir\\routing\\route","elixir\\routing\\router","elixir\\routing\\routerevent","elixir\\routing\\routerinterface","elixir\\routing\\writer\\arr","elixir\\routing\\writer\\writerabstract","elixir\\routing\\writer\\writerinterface","elixir\\security\\authentification\\authevent","elixir\\security\\authentification\\authinterface","elixir\\security\\authentification\\identity","elixir\\security\\authentification\\manager","elixir\\security\\authentification\\maskbuilder","elixir\\security\\authentification\\result","elixir\\security\\authentification\\storage\\session","elixir\\security\\authentification\\storage\\storageinterface","elixir\\security\\csrf","elixir\\security\\crypt","elixir\\security\\firewall\\accesscontrolabstract","elixir\\security\\firewall\\accesscontrolinterface","elixir\\security\\firewall\\behavior\\accessforbidden","elixir\\security\\firewall\\behavior\\identitynotfound","elixir\\security\\firewall\\firewallabstract","elixir\\security\\firewall\\firewallevent","elixir\\security\\firewall\\firewallinterface","elixir\\security\\firewall\\identity\\accesscontrol","elixir\\security\\firewall\\identity\\firewall","elixir\\security\\firewall\\loader\\arr","elixir\\security\\firewall\\loader\\json","elixir\\security\\firewall\\loader\\loaderfactory","elixir\\security\\firewall\\loader\\loaderinterface","elixir\\security\\firewall\\loader\\xml","elixir\\security\\firewall\\rbac\\accesscontrol","elixir\\security\\firewall\\rbac\\firewall","elixir\\security\\firewall\\utils","elixir\\security\\firewall\\writer\\arr","elixir\\security\\firewall\\writer\\writerabstract","elixir\\security\\firewall\\writer\\writerinterface","elixir\\security\\hash","elixir\\security\\rbac\\rbac","elixir\\security\\rbac\\rbacinterface","elixir\\security\\rbac\\role","elixir\\tree\\tree","elixir\\tree\\treeinterface","elixir\\util\\arr","elixir\\util\\csv","elixir\\util\\file","elixir\\util\\image","elixir\\util\\str","elixir\\validator\\boolean","elixir\\validator\\csrf","elixir\\validator\\callback","elixir\\validator\\chain","elixir\\validator\\date","elixir\\validator\\email","elixir\\validator\\equal","elixir\\validator\\extension","elixir\\validator\\filesize","elixir\\validator\\float","elixir\\validator\\format","elixir\\validator\\ip","elixir\\validator\\int","elixir\\validator\\length","elixir\\validator\\mimetype","elixir\\validator\\notempty","elixir\\validator\\range","elixir\\validator\\regex","elixir\\validator\\url","elixir\\validator\\validatorabstract","elixir\\validator\\validatorinterface","elixir\\version","elixir\\view\\dataabstract","elixir\\view\\escaperinterface","elixir\\view\\globalinterface","elixir\\view\\helperinterface","elixir\\view\\helper\\container","elixir\\view\\helper\\contextinterface","elixir\\view\\manager","elixir\\view\\php\\blockevent","elixir\\view\\php\\blocks","elixir\\view\\php\\php","elixir\\view\\php\\parser","elixir\\view\\storage\\file","elixir\\view\\storage\\storageinterface","elixir\\view\\storage\\str","elixir\\view\\viewinterface","elixir\\cache\\apc::__construct","elixir\\cache\\apc::has","elixir\\cache\\apc::get","elixir\\cache\\apc::set","elixir\\cache\\apc::incremente","elixir\\cache\\apc::decremente","elixir\\cache\\apc::remove","elixir\\cache\\apc::clear","elixir\\cache\\cacheabstract::__construct","elixir\\cache\\cacheabstract::getidentifier","elixir\\cache\\cacheabstract::setencoder","elixir\\cache\\cacheabstract::getencoder","elixir\\cache\\cacheabstract::convertttl","elixir\\cache\\cacheinterface::has","elixir\\cache\\cacheinterface::get","elixir\\cache\\cacheinterface::set","elixir\\cache\\cacheinterface::remove","elixir\\cache\\cacheinterface::clear","elixir\\cache\\encoder\\encoderinterface::encode","elixir\\cache\\encoder\\encoderinterface::decode","elixir\\cache\\encoder\\json::encode","elixir\\cache\\encoder\\json::decode","elixir\\cache\\encoder\\serialize::encode","elixir\\cache\\encoder\\serialize::decode","elixir\\cache\\file::__construct","elixir\\cache\\file::getencoder","elixir\\cache\\file::has","elixir\\cache\\file::get","elixir\\cache\\file::set","elixir\\cache\\file::remove","elixir\\cache\\file::clear","elixir\\cache\\memcached::__construct","elixir\\cache\\memcached::__destruct","elixir\\cache\\memcached::has","elixir\\cache\\memcached::get","elixir\\cache\\memcached::set","elixir\\cache\\memcached::incremente","elixir\\cache\\memcached::decremente","elixir\\cache\\memcached::remove","elixir\\cache\\memcached::clear","elixir\\cache\\memcached::__call","elixir\\classloader\\loader::__construct","elixir\\classloader\\loader::register","elixir\\classloader\\loader::unregister","elixir\\classloader\\loader::setcacheversion","elixir\\classloader\\loader::getcacheversion","elixir\\classloader\\loader::loadfromcache","elixir\\classloader\\loader::exporttocache","elixir\\classloader\\loader::addincludepath","elixir\\classloader\\loader::getincludepaths","elixir\\classloader\\loader::map","elixir\\classloader\\loader::getclassmap","elixir\\classloader\\loader::setclassmap","elixir\\classloader\\loader::addprefix","elixir\\classloader\\loader::getprefixs","elixir\\classloader\\loader::setprefixs","elixir\\classloader\\loader::addnamespace","elixir\\classloader\\loader::getnamespaces","elixir\\classloader\\loader::setnamespaces","elixir\\classloader\\loader::hasalias","elixir\\classloader\\loader::addalias","elixir\\classloader\\loader::getclassalias","elixir\\classloader\\loader::loadclass","elixir\\classloader\\loader::classexist","elixir\\classloader\\loaderinterface::register","elixir\\classloader\\loaderinterface::unregister","elixir\\classloader\\loaderinterface::classexist","elixir\\classloader\\loaderinterface::loadclass","elixir\\config\\config::__construct","elixir\\config\\config::load","elixir\\config\\config::export","elixir\\config\\config::addprocessor","elixir\\config\\config::getprocessors","elixir\\config\\config::setprocessors","elixir\\config\\config::has","elixir\\config\\config::get","elixir\\config\\config::set","elixir\\config\\config::remove","elixir\\config\\config::gets","elixir\\config\\config::sets","elixir\\config\\config::offsetexists","elixir\\config\\config::offsetset","elixir\\config\\config::offsetget","elixir\\config\\config::offsetunset","elixir\\config\\config::rewind","elixir\\config\\config::current","elixir\\config\\config::key","elixir\\config\\config::next","elixir\\config\\config::valid","elixir\\config\\config::count","elixir\\config\\config::__issset","elixir\\config\\config::__get","elixir\\config\\config::__set","elixir\\config\\config::__unset","elixir\\config\\config::merge","elixir\\config\\configinterface::has","elixir\\config\\configinterface::get","elixir\\config\\configinterface::set","elixir\\config\\configinterface::remove","elixir\\config\\configinterface::gets","elixir\\config\\configinterface::sets","elixir\\config\\configinterface::merge","elixir\\config\\loader\\arr::load","elixir\\config\\loader\\ini::load","elixir\\config\\loader\\json::load","elixir\\config\\loader\\loaderabstract::__construct","elixir\\config\\loader\\loaderabstract::getenvironment","elixir\\config\\loader\\loaderabstract::isstrict","elixir\\config\\loader\\loaderfactory::create","elixir\\config\\loader\\loaderinterface::load","elixir\\config\\loader\\xml::load","elixir\\config\\processor\\filter::__construct","elixir\\config\\processor\\filter::process","elixir\\config\\processor\\processorabstract::processconfig","elixir\\config\\processor\\processorinterface::processconfig","elixir\\config\\processor\\processorinterface::process","elixir\\config\\writer\\arr::write","elixir\\config\\writer\\arr::export","elixir\\config\\writer\\writerabstract::__construct","elixir\\config\\writer\\writerabstract::setconfig","elixir\\config\\writer\\writerabstract::getconfig","elixir\\config\\writer\\writerinterface::setconfig","elixir\\config\\writer\\writerinterface::write","elixir\\config\\writer\\writerinterface::export","elixir\\db\\dbabstract::getdriver","elixir\\db\\dbabstract::createselect","elixir\\db\\dbabstract::createinsert","elixir\\db\\dbabstract::createdelete","elixir\\db\\dbabstract::createupdate","elixir\\db\\dbabstract::createtable","elixir\\db\\dbabstract::createaltertable","elixir\\db\\dbabstract::createdroptable","elixir\\db\\dbevent::__construct","elixir\\db\\dbevent::getsql","elixir\\db\\dbevent::getvalues","elixir\\db\\dbevent::gettime","elixir\\db\\dbfactory::create","elixir\\db\\dbinterface::lastinsertid","elixir\\db\\dbinterface::begin","elixir\\db\\dbinterface::rollback","elixir\\db\\dbinterface::commit","elixir\\db\\dbinterface::intransaction","elixir\\db\\dbinterface::createselect","elixir\\db\\dbinterface::createinsert","elixir\\db\\dbinterface::createdelete","elixir\\db\\dbinterface::createupdate","elixir\\db\\dbinterface::createtable","elixir\\db\\dbinterface::createaltertable","elixir\\db\\dbinterface::createdroptable","elixir\\db\\dbinterface::quote","elixir\\db\\dbinterface::query","elixir\\db\\orm\\collection::iscollection","elixir\\db\\orm\\collection::create","elixir\\db\\orm\\collection::__construct","elixir\\db\\orm\\collection::isautocreated","elixir\\db\\orm\\collection::prepend","elixir\\db\\orm\\collection::remove","elixir\\db\\orm\\collection::in","elixir\\db\\orm\\collection::search","elixir\\db\\orm\\collection::splice","elixir\\db\\orm\\collection::shuffle","elixir\\db\\orm\\collection::reverse","elixir\\db\\orm\\collection::shift","elixir\\db\\orm\\collection::pop","elixir\\db\\orm\\collection::export","elixir\\db\\orm\\collection::merge","elixir\\db\\orm\\entityinterface::hydrate","elixir\\db\\orm\\entityinterface::export","elixir\\db\\orm\\entityinterface::has","elixir\\db\\orm\\entityinterface::set","elixir\\db\\orm\\entityinterface::get","elixir\\db\\orm\\modelabstract::create","elixir\\db\\orm\\modelabstract::columns","elixir\\db\\orm\\modelabstract::iscollection","elixir\\db\\orm\\modelabstract::convertifcollection","elixir\\db\\orm\\modelabstract::__construct","elixir\\db\\orm\\modelabstract::setconnectionmanager","elixir\\db\\orm\\modelabstract::getconnectionmanager","elixir\\db\\orm\\modelabstract::getconnection","elixir\\db\\orm\\modelabstract::getclassname","elixir\\db\\orm\\modelabstract::gettable","elixir\\db\\orm\\modelabstract::getprimarykey","elixir\\db\\orm\\modelabstract::getprimaryvalue","elixir\\db\\orm\\modelabstract::getignorevalue","elixir\\db\\orm\\modelabstract::isautoincrement","elixir\\db\\orm\\modelabstract::getcolumnkeys","elixir\\db\\orm\\modelabstract::getguardedkeys","elixir\\db\\orm\\modelabstract::getrelatedkeys","elixir\\db\\orm\\modelabstract::getrelatedtype","elixir\\db\\orm\\modelabstract::setstate","elixir\\db\\orm\\modelabstract::getstate","elixir\\db\\orm\\modelabstract::isreadonly","elixir\\db\\orm\\modelabstract::isfillable","elixir\\db\\orm\\modelabstract::isguarded","elixir\\db\\orm\\modelabstract::exist","elixir\\db\\orm\\modelabstract::isfilled","elixir\\db\\orm\\modelabstract::unfilledifisignorevalue","elixir\\db\\orm\\modelabstract::has","elixir\\db\\orm\\modelabstract::set","elixir\\db\\orm\\modelabstract::get","elixir\\db\\orm\\modelabstract::sync","elixir\\db\\orm\\modelabstract::save","elixir\\db\\orm\\modelabstract::insert","elixir\\db\\orm\\modelabstract::update","elixir\\db\\orm\\modelabstract::delete","elixir\\db\\orm\\modelabstract::select","elixir\\db\\orm\\modelabstract::hydrate","elixir\\db\\orm\\modelabstract::export","elixir\\db\\orm\\modelabstract::__isset","elixir\\db\\orm\\modelabstract::__get","elixir\\db\\orm\\modelabstract::__set","elixir\\db\\orm\\modelabstract::__unset","elixir\\db\\orm\\modelabstract::__tostring","elixir\\db\\orm\\modelfactory::create","elixir\\db\\orm\\relation\\belongsto::__construct","elixir\\db\\orm\\relation\\belongsto::gettype","elixir\\db\\orm\\relation\\belongsto::getrepository","elixir\\db\\orm\\relation\\belongsto::gettarget","elixir\\db\\orm\\relation\\belongsto::getforeignkey","elixir\\db\\orm\\relation\\belongsto::getotherkey","elixir\\db\\orm\\relation\\belongsto::withpivot","elixir\\db\\orm\\relation\\belongsto::getpivot","elixir\\db\\orm\\relation\\belongsto::addcriterion","elixir\\db\\orm\\relation\\belongsto::getcriterions","elixir\\db\\orm\\relation\\belongsto::setrelated","elixir\\db\\orm\\relation\\belongsto::getrelated","elixir\\db\\orm\\relation\\belongsto::setfilled","elixir\\db\\orm\\relation\\belongsto::isfilled","elixir\\db\\orm\\relation\\belongsto::load","elixir\\db\\orm\\relation\\hasmany::__construct","elixir\\db\\orm\\relation\\hasone::__construct","elixir\\db\\orm\\relation\\hasoneormany::__construct","elixir\\db\\orm\\relation\\hasoneormany::gettype","elixir\\db\\orm\\relation\\hasoneormany::getrepository","elixir\\db\\orm\\relation\\hasoneormany::gettarget","elixir\\db\\orm\\relation\\hasoneormany::getforeignkey","elixir\\db\\orm\\relation\\hasoneormany::getotherkey","elixir\\db\\orm\\relation\\hasoneormany::withpivot","elixir\\db\\orm\\relation\\hasoneormany::getpivot","elixir\\db\\orm\\relation\\hasoneormany::addcriterion","elixir\\db\\orm\\relation\\hasoneormany::getcriterions","elixir\\db\\orm\\relation\\hasoneormany::setrelated","elixir\\db\\orm\\relation\\hasoneormany::getrelated","elixir\\db\\orm\\relation\\hasoneormany::setfilled","elixir\\db\\orm\\relation\\hasoneormany::isfilled","elixir\\db\\orm\\relation\\hasoneormany::load","elixir\\db\\orm\\relation\\pivot::__construct","elixir\\db\\orm\\relation\\pivot::getpivot","elixir\\db\\orm\\relation\\pivot::getforeignkey","elixir\\db\\orm\\relation\\pivot::getotherkey","elixir\\db\\orm\\relation\\pivot::addcriterion","elixir\\db\\orm\\relation\\pivot::getcriterions","elixir\\db\\orm\\relation\\pivot::join","elixir\\db\\orm\\relation\\relation::__construct","elixir\\db\\orm\\relation\\relation::gettype","elixir\\db\\orm\\relation\\relation::setrelated","elixir\\db\\orm\\relation\\relation::getrelated","elixir\\db\\orm\\relation\\relation::setfilled","elixir\\db\\orm\\relation\\relation::isfilled","elixir\\db\\orm\\relation\\relation::load","elixir\\db\\orm\\relation\\relationinterface::gettype","elixir\\db\\orm\\relation\\relationinterface::setrelated","elixir\\db\\orm\\relation\\relationinterface::getrelated","elixir\\db\\orm\\relation\\relationinterface::setfilled","elixir\\db\\orm\\relation\\relationinterface::isfilled","elixir\\db\\orm\\relation\\relationinterface::load","elixir\\db\\orm\\repositoryinterface::setconnectionmanager","elixir\\db\\orm\\repositoryinterface::getconnectionmanager","elixir\\db\\orm\\repositoryinterface::getconnection","elixir\\db\\orm\\repositoryinterface::gettable","elixir\\db\\orm\\repositoryinterface::getprimarykey","elixir\\db\\orm\\repositoryinterface::getprimaryvalue","elixir\\db\\orm\\repositoryinterface::select","elixir\\db\\orm\\repositoryinterface::save","elixir\\db\\orm\\repositoryinterface::insert","elixir\\db\\orm\\repositoryinterface::update","elixir\\db\\orm\\repositoryinterface::delete","elixir\\db\\orm\\select::__construct","elixir\\db\\orm\\select::combine","elixir\\db\\orm\\select::current","elixir\\db\\orm\\select::primary","elixir\\db\\orm\\select::scope","elixir\\db\\orm\\select::load","elixir\\db\\orm\\select::reset","elixir\\db\\orm\\select::has","elixir\\db\\orm\\select::count","elixir\\db\\orm\\select::raw","elixir\\db\\orm\\select::one","elixir\\db\\orm\\select::all","elixir\\db\\orm\\select::__call","elixir\\db\\orm\\select::__tostring","elixir\\db\\orm\\select::__clone","elixir\\db\\pdo::__construct","elixir\\db\\pdo::__destruct","elixir\\db\\pdo::useauthorizemultipletransactions","elixir\\db\\pdo::isauthorizemultipletransactions","elixir\\db\\pdo::getdriver","elixir\\db\\pdo::begin","elixir\\db\\pdo::rollback","elixir\\db\\pdo::commit","elixir\\db\\pdo::intransaction","elixir\\db\\pdo::quote","elixir\\db\\pdo::exec","elixir\\db\\pdo::query","elixir\\db\\pdo::lastinsertid","elixir\\db\\pdo::__call","elixir\\db\\result\\pdo::fetch","elixir\\db\\result\\pdo::fetchall","elixir\\db\\result\\pdo::fetchcolumn","elixir\\db\\result\\pdo::fetchobject","elixir\\db\\result\\pdo::fetchassoc","elixir\\db\\result\\pdo::rowcount","elixir\\db\\result\\pdo::__call","elixir\\db\\result\\setabstract::__construct","elixir\\db\\result\\setabstract::getresource","elixir\\db\\result\\setabstract::fetch","elixir\\db\\result\\setabstract::fetchall","elixir\\db\\result\\setabstract::fetchcolumn","elixir\\db\\result\\setabstract::fetchobject","elixir\\db\\result\\setabstract::fetchassoc","elixir\\db\\result\\setabstract::rowcount","elixir\\db\\sql\\altertable::__construct","elixir\\db\\sql\\altertable::table","elixir\\db\\sql\\altertable::rename","elixir\\db\\sql\\altertable::addcolumn","elixir\\db\\sql\\altertable::modifycolumn","elixir\\db\\sql\\altertable::renamecolumn","elixir\\db\\sql\\altertable::dropcolumn","elixir\\db\\sql\\altertable::addconstraint","elixir\\db\\sql\\altertable::dropconstraint","elixir\\db\\sql\\altertable::reset","elixir\\db\\sql\\altertable::render","elixir\\db\\sql\\column::__construct","elixir\\db\\sql\\column::setname","elixir\\db\\sql\\column::getname","elixir\\db\\sql\\column::settype","elixir\\db\\sql\\column::gettype","elixir\\db\\sql\\column::setvalue","elixir\\db\\sql\\column::getvalue","elixir\\db\\sql\\column::setdefault","elixir\\db\\sql\\column::getdefault","elixir\\db\\sql\\column::setcollating","elixir\\db\\sql\\column::getcollating","elixir\\db\\sql\\column::setattribute","elixir\\db\\sql\\column::getattribute","elixir\\db\\sql\\column::setnullable","elixir\\db\\sql\\column::isnullable","elixir\\db\\sql\\column::setautoincrement","elixir\\db\\sql\\column::isautoincrement","elixir\\db\\sql\\column::setcomment","elixir\\db\\sql\\column::getcomment","elixir\\db\\sql\\columnfactory::boolean","elixir\\db\\sql\\columnfactory::tinyint","elixir\\db\\sql\\columnfactory::smallint","elixir\\db\\sql\\columnfactory::mediumint","elixir\\db\\sql\\columnfactory::int","elixir\\db\\sql\\columnfactory::bigint","elixir\\db\\sql\\columnfactory::float","elixir\\db\\sql\\columnfactory::double","elixir\\db\\sql\\columnfactory::date","elixir\\db\\sql\\columnfactory::datetime","elixir\\db\\sql\\columnfactory::timestamp","elixir\\db\\sql\\columnfactory::char","elixir\\db\\sql\\columnfactory::varchar","elixir\\db\\sql\\columnfactory::text","elixir\\db\\sql\\columnfactory::binary","elixir\\db\\sql\\columnfactory::blob","elixir\\db\\sql\\columnfactory::set","elixir\\db\\sql\\columnfactory::enum","elixir\\db\\sql\\columnfactory::create","elixir\\db\\sql\\constraint::__construct","elixir\\db\\sql\\constraint::settype","elixir\\db\\sql\\constraint::gettype","elixir\\db\\sql\\constraint::setname","elixir\\db\\sql\\constraint::getname","elixir\\db\\sql\\constraint::setcolumns","elixir\\db\\sql\\constraint::addcolumn","elixir\\db\\sql\\constraint::getcolumns","elixir\\db\\sql\\constraint::setreferencetable","elixir\\db\\sql\\constraint::getreferencetable","elixir\\db\\sql\\constraint::setreferencecolumn","elixir\\db\\sql\\constraint::getreferencecolumn","elixir\\db\\sql\\constraint::setondeleterule","elixir\\db\\sql\\constraint::getondeleterule","elixir\\db\\sql\\constraint::setonupdaterule","elixir\\db\\sql\\constraint::getonupdaterule","elixir\\db\\sql\\constraintfactory::index","elixir\\db\\sql\\constraintfactory::primary","elixir\\db\\sql\\constraintfactory::unique","elixir\\db\\sql\\constraintfactory::fulltext","elixir\\db\\sql\\constraintfactory::foreign","elixir\\db\\sql\\constraintfactory::create","elixir\\db\\sql\\createtable::__construct","elixir\\db\\sql\\createtable::table","elixir\\db\\sql\\createtable::temporary","elixir\\db\\sql\\createtable::column","elixir\\db\\sql\\createtable::constraint","elixir\\db\\sql\\createtable::option","elixir\\db\\sql\\createtable::reset","elixir\\db\\sql\\createtable::render","elixir\\db\\sql\\delete::__construct","elixir\\db\\sql\\delete::table","elixir\\db\\sql\\delete::where","elixir\\db\\sql\\delete::orwhere","elixir\\db\\sql\\delete::reset","elixir\\db\\sql\\delete::render","elixir\\db\\sql\\droptable::__construct","elixir\\db\\sql\\droptable::table","elixir\\db\\sql\\droptable::render","elixir\\db\\sql\\expr::protect","elixir\\db\\sql\\expr::__construct","elixir\\db\\sql\\expr::getexpr","elixir\\db\\sql\\expr::__tostring","elixir\\db\\sql\\insert::__construct","elixir\\db\\sql\\insert::raw","elixir\\db\\sql\\insert::table","elixir\\db\\sql\\insert::columns","elixir\\db\\sql\\insert::values","elixir\\db\\sql\\insert::reset","elixir\\db\\sql\\insert::render","elixir\\db\\sql\\joinclause::__construct","elixir\\db\\sql\\joinclause::on","elixir\\db\\sql\\joinclause::oron","elixir\\db\\sql\\joinclause::using","elixir\\db\\sql\\joinclause::columns","elixir\\db\\sql\\joinclause::reset","elixir\\db\\sql\\joinclause::render","elixir\\db\\sql\\joinclause::__tostring","elixir\\db\\sql\\mysql\\altertable::renamecolumn","elixir\\db\\sql\\mysql\\altertable::addcolumnafter","elixir\\db\\sql\\mysql\\altertable::addcolumnfirst","elixir\\db\\sql\\mysql\\altertable::collating","elixir\\db\\sql\\mysql\\altertable::reset","elixir\\db\\sql\\mysql\\altertable::render","elixir\\db\\sql\\mysql\\createtable::ifnotexists","elixir\\db\\sql\\mysql\\createtable::render","elixir\\db\\sql\\mysql\\delete::orderby","elixir\\db\\sql\\mysql\\delete::limit","elixir\\db\\sql\\mysql\\delete::offset","elixir\\db\\sql\\mysql\\delete::render","elixir\\db\\sql\\mysql\\droptable::temporary","elixir\\db\\sql\\mysql\\droptable::ifexists","elixir\\db\\sql\\mysql\\droptable::render","elixir\\db\\sql\\mysql\\insert::ignore","elixir\\db\\sql\\mysql\\insert::duplicatekeyupdate","elixir\\db\\sql\\mysql\\insert::render","elixir\\db\\sql\\mysql\\update::orderby","elixir\\db\\sql\\mysql\\update::limit","elixir\\db\\sql\\mysql\\update::offset","elixir\\db\\sql\\mysql\\update::render","elixir\\db\\sql\\sqlabstract::protect","elixir\\db\\sql\\sqlabstract::setquotemethod","elixir\\db\\sql\\sqlabstract::getquotemethod","elixir\\db\\sql\\sqlabstract::quote","elixir\\db\\sql\\sqlabstract::bindvalue","elixir\\db\\sql\\sqlabstract::getbindvalues","elixir\\db\\sql\\sqlabstract::assemble","elixir\\db\\sql\\sqlabstract::getquery","elixir\\db\\sql\\sqlabstract::render","elixir\\db\\sql\\sqlabstract::__tostring","elixir\\db\\sql\\sqlfactory::select","elixir\\db\\sql\\sqlfactory::insert","elixir\\db\\sql\\sqlfactory::update","elixir\\db\\sql\\sqlfactory::delete","elixir\\db\\sql\\sqlfactory::createtable","elixir\\db\\sql\\sqlfactory::createaltertable","elixir\\db\\sql\\sqlfactory::droptable","elixir\\db\\sql\\sqlite\\altertable::modifycolumn","elixir\\db\\sql\\sqlite\\altertable::renamecolumn","elixir\\db\\sql\\sqlite\\altertable::dropcolumn","elixir\\db\\sql\\sqlite\\altertable::addconstraint","elixir\\db\\sql\\sqlite\\altertable::dropconstraint","elixir\\db\\sql\\sqlite\\createtable::ifnotexists","elixir\\db\\sql\\sqlite\\createtable::render","elixir\\db\\sql\\sqlite\\delete::orderby","elixir\\db\\sql\\sqlite\\delete::limit","elixir\\db\\sql\\sqlite\\delete::offset","elixir\\db\\sql\\sqlite\\delete::render","elixir\\db\\sql\\sqlite\\droptable::ifexists","elixir\\db\\sql\\sqlite\\droptable::render","elixir\\db\\sql\\sqlite\\insert::ignore","elixir\\db\\sql\\sqlite\\insert::render","elixir\\db\\sql\\sqlite\\update::orderby","elixir\\db\\sql\\sqlite\\update::limit","elixir\\db\\sql\\sqlite\\update::offset","elixir\\db\\sql\\sqlite\\update::render","elixir\\db\\sql\\select::__construct","elixir\\db\\sql\\select::quantifier","elixir\\db\\sql\\select::columns","elixir\\db\\sql\\select::table","elixir\\db\\sql\\select::join","elixir\\db\\sql\\select::where","elixir\\db\\sql\\select::orwhere","elixir\\db\\sql\\select::groupby","elixir\\db\\sql\\select::having","elixir\\db\\sql\\select::orhaving","elixir\\db\\sql\\select::orderby","elixir\\db\\sql\\select::limit","elixir\\db\\sql\\select::offset","elixir\\db\\sql\\select::combine","elixir\\db\\sql\\select::reset","elixir\\db\\sql\\select::render","elixir\\db\\sql\\update::__construct","elixir\\db\\sql\\update::raw","elixir\\db\\sql\\update::table","elixir\\db\\sql\\update::set","elixir\\db\\sql\\update::where","elixir\\db\\sql\\update::orwhere","elixir\\db\\sql\\update::reset","elixir\\db\\sql\\update::render","elixir\\db\\sql\\whereclause::__construct","elixir\\db\\sql\\whereclause::where","elixir\\db\\sql\\whereclause::orwhere","elixir\\db\\sql\\whereclause::reset","elixir\\db\\sql\\whereclause::render","elixir\\db\\sql\\whereclause::__tostring","elixir\\di\\container::setlockmode","elixir\\di\\container::getlockmode","elixir\\di\\container::has","elixir\\di\\container::get","elixir\\di\\container::set","elixir\\di\\container::remove","elixir\\di\\container::gets","elixir\\di\\container::sets","elixir\\di\\container::hasalias","elixir\\di\\container::addalias","elixir\\di\\container::hastag","elixir\\di\\container::addtag","elixir\\di\\container::findbytag","elixir\\di\\container::raw","elixir\\di\\container::singleton","elixir\\di\\container::protect","elixir\\di\\container::extend","elixir\\di\\container::getstoragetype","elixir\\di\\container::load","elixir\\di\\container::merge","elixir\\di\\containerevent::__construct","elixir\\di\\containerevent::getname","elixir\\di\\containerevent::getalias","elixir\\di\\containerevent::getservicetype","elixir\\di\\containerinterface::setlockmode","elixir\\di\\containerinterface::getlockmode","elixir\\di\\containerinterface::has","elixir\\di\\containerinterface::get","elixir\\di\\containerinterface::set","elixir\\di\\containerinterface::remove","elixir\\di\\containerinterface::gets","elixir\\di\\containerinterface::sets","elixir\\di\\containerinterface::hasalias","elixir\\di\\containerinterface::addalias","elixir\\di\\containerinterface::hastag","elixir\\di\\containerinterface::addtag","elixir\\di\\containerinterface::findbytag","elixir\\di\\containerinterface::extend","elixir\\di\\containerinterface::raw","elixir\\di\\containerinterface::getstoragetype","elixir\\di\\containerinterface::load","elixir\\di\\containerinterface::merge","elixir\\di\\providerinterface::load","elixir\\dispatcher\\dispatcher::__construct","elixir\\dispatcher\\dispatcher::gettarget","elixir\\dispatcher\\dispatcher::settarget","elixir\\dispatcher\\dispatcher::haslistener","elixir\\dispatcher\\dispatcher::addlistener","elixir\\dispatcher\\dispatcher::removelistener","elixir\\dispatcher\\dispatcher::getlisteners","elixir\\dispatcher\\dispatcher::removelisteners","elixir\\dispatcher\\dispatcher::addsubscriber","elixir\\dispatcher\\dispatcher::removesubscriber","elixir\\dispatcher\\dispatcher::dispatch","elixir\\dispatcher\\dispatcherinterface::haslistener","elixir\\dispatcher\\dispatcherinterface::addlistener","elixir\\dispatcher\\dispatcherinterface::getlisteners","elixir\\dispatcher\\dispatcherinterface::removelistener","elixir\\dispatcher\\dispatcherinterface::removelisteners","elixir\\dispatcher\\dispatcherinterface::addsubscriber","elixir\\dispatcher\\dispatcherinterface::removesubscriber","elixir\\dispatcher\\dispatcherinterface::dispatch","elixir\\dispatcher\\event::__construct","elixir\\dispatcher\\event::gettype","elixir\\dispatcher\\event::gettarget","elixir\\dispatcher\\event::settarget","elixir\\dispatcher\\event::isstopped","elixir\\dispatcher\\event::stoppropagation","elixir\\dispatcher\\subscriberinterface::subscribe","elixir\\dispatcher\\subscriberinterface::unsubscribe","elixir\\facade\\db::with","elixir\\facade\\di::getcontainer","elixir\\facade\\di::setcontainer","elixir\\facade\\di::__callstatic","elixir\\facade\\facadeabstract::getcontainer","elixir\\facade\\facadeabstract::setcontainer","elixir\\facade\\facadeabstract::resolveinstance","elixir\\facade\\facadeabstract::__callstatic","elixir\\facade\\filter::macro","elixir\\facade\\filter::resolveinstance","elixir\\facade\\filter::filter","elixir\\facade\\filter::__callstatic","elixir\\facade\\helper::macro","elixir\\facade\\helper::resolveinstance","elixir\\facade\\helper::helper","elixir\\facade\\helper::__callstatic","elixir\\facade\\validator::macro","elixir\\facade\\validator::resolveinstance","elixir\\facade\\validator::valid","elixir\\facade\\validator::__callstatic","elixir\\filter\\boolean::filter","elixir\\filter\\callback::filter","elixir\\filter\\chain::getsteps","elixir\\filter\\chain::addfilter","elixir\\filter\\chain::getfilters","elixir\\filter\\chain::setfilters","elixir\\filter\\chain::filter","elixir\\filter\\crop::filter","elixir\\filter\\date::filter","elixir\\filter\\duplicate::filter","elixir\\filter\\email::filter","elixir\\filter\\enlarge::filter","elixir\\filter\\escaper::__construct","elixir\\filter\\escaper::getencoding","elixir\\filter\\escaper::filter","elixir\\filter\\escaper::escapejs","elixir\\filter\\escaper::escapecss","elixir\\filter\\escaper::escapeurl","elixir\\filter\\escaper::unescapeurl","elixir\\filter\\escaper::escapehtml","elixir\\filter\\escaper::unescapehtml","elixir\\filter\\escaper::escapehtmlattr","elixir\\filter\\escaper::escapexml","elixir\\filter\\escaper::escapexmlattr","elixir\\filter\\escaper::convertencoding","elixir\\filter\\filterabstract::setdefaultoptions","elixir\\filter\\filterabstract::getdefaultoptions","elixir\\filter\\filterinterface::filter","elixir\\filter\\float::filter","elixir\\filter\\int::filter","elixir\\filter\\nbrformat::filter","elixir\\filter\\nbrformat::format","elixir\\filter\\nbrformat::formatcurrency","elixir\\filter\\protect::filter","elixir\\filter\\rename::filter","elixir\\filter\\replace::filter","elixir\\filter\\resize::filter","elixir\\filter\\trim::filter","elixir\\form\\extension\\csrf::__construct","elixir\\form\\extension\\csrf::getname","elixir\\form\\extension\\csrf::getoptions","elixir\\form\\extension\\csrf::load","elixir\\form\\extension\\csrf::unload","elixir\\form\\extension\\extensioninterface::load","elixir\\form\\extension\\extensioninterface::unload","elixir\\form\\extension\\reference::__construct","elixir\\form\\extension\\reference::getinputreference","elixir\\form\\extension\\reference::getformat","elixir\\form\\extension\\reference::load","elixir\\form\\extension\\reference::onprebind","elixir\\form\\extension\\reference::protect","elixir\\form\\extension\\reference::onpresubmit","elixir\\form\\extension\\reference::onprevalues","elixir\\form\\extension\\reference::unload","elixir\\form\\field\\button::__construct","elixir\\form\\field\\button::settype","elixir\\form\\field\\button::gettype","elixir\\form\\field\\button::setvalue","elixir\\form\\field\\csrf::__construct","elixir\\form\\field\\csrf::setrequired","elixir\\form\\field\\csrf::setcsrfvalidator","elixir\\form\\field\\csrf::getcsrfvalidator","elixir\\form\\field\\csrf::setcsrfvalidatoroptions","elixir\\form\\field\\csrf::getcsrfvalidatoroptions","elixir\\form\\field\\csrf::setattribute","elixir\\form\\field\\csrf::removeattribute","elixir\\form\\field\\csrf::setattributes","elixir\\form\\field\\csrf::addvalidator","elixir\\form\\field\\csrf::addfilter","elixir\\form\\field\\csrf::prepare","elixir\\form\\field\\csrf::isvalid","elixir\\form\\field\\checkbox::__construct","elixir\\form\\field\\checkbox::setattribute","elixir\\form\\field\\checkbox::removeattribute","elixir\\form\\field\\checkbox::setattributes","elixir\\form\\field\\fieldabstract::__construct","elixir\\form\\field\\fieldabstract::setname","elixir\\form\\field\\fieldabstract::getname","elixir\\form\\field\\fieldabstract::sethelper","elixir\\form\\field\\fieldabstract::gethelper","elixir\\form\\field\\fieldabstract::setparent","elixir\\form\\field\\fieldabstract::getparent","elixir\\form\\field\\fieldabstract::setlabel","elixir\\form\\field\\fieldabstract::getlabel","elixir\\form\\field\\fieldabstract::seterrormessage","elixir\\form\\field\\fieldabstract::geterrormessage","elixir\\form\\field\\fieldabstract::setrequired","elixir\\form\\field\\fieldabstract::isrequired","elixir\\form\\field\\fieldabstract::hasattribute","elixir\\form\\field\\fieldabstract::getattribute","elixir\\form\\field\\fieldabstract::setattribute","elixir\\form\\field\\fieldabstract::removeattribute","elixir\\form\\field\\fieldabstract::getattributes","elixir\\form\\field\\fieldabstract::setattributes","elixir\\form\\field\\fieldabstract::hasoption","elixir\\form\\field\\fieldabstract::getoption","elixir\\form\\field\\fieldabstract::setoption","elixir\\form\\field\\fieldabstract::removeoption","elixir\\form\\field\\fieldabstract::getoptions","elixir\\form\\field\\fieldabstract::setoptions","elixir\\form\\field\\fieldabstract::seterrorbreak","elixir\\form\\field\\fieldabstract::iserrorbreak","elixir\\form\\field\\fieldabstract::addvalidator","elixir\\form\\field\\fieldabstract::getvalidators","elixir\\form\\field\\fieldabstract::setvalidators","elixir\\form\\field\\fieldabstract::addfilter","elixir\\form\\field\\fieldabstract::getfilters","elixir\\form\\field\\fieldabstract::setfilters","elixir\\form\\field\\fieldabstract::setvalue","elixir\\form\\field\\fieldabstract::getvalue","elixir\\form\\field\\fieldabstract::iseligible","elixir\\form\\field\\fieldabstract::isempty","elixir\\form\\field\\fieldabstract::prepare","elixir\\form\\field\\fieldabstract::isprepared","elixir\\form\\field\\fieldabstract::isvalid","elixir\\form\\field\\fieldabstract::haserror","elixir\\form\\field\\fieldabstract::errors","elixir\\form\\field\\fieldabstract::reset","elixir\\form\\field\\fieldevent::__construct","elixir\\form\\field\\fieldevent::getvalue","elixir\\form\\field\\fieldevent::setvalue","elixir\\form\\field\\fieldinterface::setname","elixir\\form\\field\\fieldinterface::getname","elixir\\form\\field\\fieldinterface::sethelper","elixir\\form\\field\\fieldinterface::gethelper","elixir\\form\\field\\fieldinterface::setparent","elixir\\form\\field\\fieldinterface::getparent","elixir\\form\\field\\fieldinterface::setlabel","elixir\\form\\field\\fieldinterface::getlabel","elixir\\form\\field\\fieldinterface::seterrormessage","elixir\\form\\field\\fieldinterface::geterrormessage","elixir\\form\\field\\fieldinterface::setrequired","elixir\\form\\field\\fieldinterface::isrequired","elixir\\form\\field\\fieldinterface::prepare","elixir\\form\\field\\fieldinterface::getattributes","elixir\\form\\field\\fieldinterface::setattributes","elixir\\form\\field\\fieldinterface::getoptions","elixir\\form\\field\\fieldinterface::setoptions","elixir\\form\\field\\fieldinterface::seterrorbreak","elixir\\form\\field\\fieldinterface::iserrorbreak","elixir\\form\\field\\fieldinterface::getvalidators","elixir\\form\\field\\fieldinterface::setvalidators","elixir\\form\\field\\fieldinterface::getfilters","elixir\\form\\field\\fieldinterface::setfilters","elixir\\form\\field\\fieldinterface::setvalue","elixir\\form\\field\\fieldinterface::getvalue","elixir\\form\\field\\fieldinterface::iseligible","elixir\\form\\field\\fieldinterface::isempty","elixir\\form\\field\\fieldinterface::isvalid","elixir\\form\\field\\fieldinterface::haserror","elixir\\form\\field\\fieldinterface::errors","elixir\\form\\field\\fieldinterface::reset","elixir\\form\\field\\file::__construct","elixir\\form\\field\\file::setparent","elixir\\form\\field\\file::seterrorbreak","elixir\\form\\field\\file::getuploader","elixir\\form\\field\\file::setuploader","elixir\\form\\field\\file::setapcuploadprogressdata","elixir\\form\\field\\file::getapcuploadprogressdata","elixir\\form\\field\\file::setmaxfilesize","elixir\\form\\field\\file::getmaxfilesize","elixir\\form\\field\\file::setattribute","elixir\\form\\field\\file::removeattribute","elixir\\form\\field\\file::setattributes","elixir\\form\\field\\file::getfilename","elixir\\form\\field\\file::addfilter","elixir\\form\\field\\file::isuploaded","elixir\\form\\field\\file::isempty","elixir\\form\\field\\file::isvalid","elixir\\form\\field\\file::hasmultiplefiles","elixir\\form\\field\\file::receive","elixir\\form\\field\\file::reset","elixir\\form\\field\\fileinterface::hasmultiplefiles","elixir\\form\\field\\fileinterface::isuploaded","elixir\\form\\field\\fileinterface::receive","elixir\\form\\field\\fileinterface::getfilename","elixir\\form\\field\\input::__construct","elixir\\form\\field\\input::settype","elixir\\form\\field\\input::gettype","elixir\\form\\field\\input::setattribute","elixir\\form\\field\\input::setvalue","elixir\\form\\field\\multipleabstract::setvalue","elixir\\form\\field\\multipleabstract::setdata","elixir\\form\\field\\multipleabstract::getdata","elixir\\form\\field\\multipleabstract::removeoption","elixir\\form\\field\\multipleabstract::setoptions","elixir\\form\\field\\multipleinterface::setdata","elixir\\form\\field\\multipleinterface::getdata","elixir\\form\\field\\radio::__construct","elixir\\form\\field\\radio::setattribute","elixir\\form\\field\\radio::removeattribute","elixir\\form\\field\\radio::setattributes","elixir\\form\\field\\select::__construct","elixir\\form\\field\\textarea::__construct","elixir\\form\\form::__construct","elixir\\form\\form::setparent","elixir\\form\\form::getparent","elixir\\form\\form::setname","elixir\\form\\form::getname","elixir\\form\\form::setmethod","elixir\\form\\form::getmethod","elixir\\form\\form::setaction","elixir\\form\\form::getaction","elixir\\form\\form::sethelper","elixir\\form\\form::gethelper","elixir\\form\\form::isroot","elixir\\form\\form::seterrormessage","elixir\\form\\form::geterrormessage","elixir\\form\\form::prepare","elixir\\form\\form::isprepared","elixir\\form\\form::addextension","elixir\\form\\form::removeextension","elixir\\form\\form::hasattribute","elixir\\form\\form::getattribute","elixir\\form\\form::setattribute","elixir\\form\\form::removeattribute","elixir\\form\\form::getattributes","elixir\\form\\form::setattributes","elixir\\form\\form::hasoption","elixir\\form\\form::getoption","elixir\\form\\form::setoption","elixir\\form\\form::removeoption","elixir\\form\\form::getoptions","elixir\\form\\form::setoptions","elixir\\form\\form::has","elixir\\form\\form::add","elixir\\form\\form::onrenameitem","elixir\\form\\form::get","elixir\\form\\form::remove","elixir\\form\\form::gets","elixir\\form\\form::sets","elixir\\form\\form::bind","elixir\\form\\form::isempty","elixir\\form\\form::issubmited","elixir\\form\\form::submit","elixir\\form\\form::receive","elixir\\form\\form::required","elixir\\form\\form::values","elixir\\form\\form::haserror","elixir\\form\\form::errors","elixir\\form\\form::reset","elixir\\form\\form::dispatch","elixir\\form\\formevent::__construct","elixir\\form\\formevent::getdata","elixir\\form\\formevent::setdata","elixir\\form\\formfactory::createform","elixir\\form\\formfactory::createfield","elixir\\form\\forminterface::setparent","elixir\\form\\forminterface::getparent","elixir\\form\\forminterface::setname","elixir\\form\\forminterface::getname","elixir\\form\\forminterface::sethelper","elixir\\form\\forminterface::gethelper","elixir\\form\\forminterface::seterrormessage","elixir\\form\\forminterface::geterrormessage","elixir\\form\\forminterface::getattributes","elixir\\form\\forminterface::setattributes","elixir\\form\\forminterface::getoptions","elixir\\form\\forminterface::setoptions","elixir\\form\\forminterface::add","elixir\\form\\forminterface::remove","elixir\\form\\forminterface::gets","elixir\\form\\forminterface::sets","elixir\\form\\forminterface::prepare","elixir\\form\\forminterface::isprepared","elixir\\form\\forminterface::isempty","elixir\\form\\forminterface::bind","elixir\\form\\forminterface::submit","elixir\\form\\forminterface::values","elixir\\form\\forminterface::haserror","elixir\\form\\forminterface::errors","elixir\\form\\forminterface::reset","elixir\\form\\utils::prefix","elixir\\form\\utils::getdatabyprefix","elixir\\form\\utils::removeprefix","elixir\\form\\utils::prefixform","elixir\\form\\utils::createoptions","elixir\\http\\cookie::fromstring","elixir\\http\\cookie::__construct","elixir\\http\\cookie::getname","elixir\\http\\cookie::getvalue","elixir\\http\\cookie::setvalue","elixir\\http\\cookie::getexpires","elixir\\http\\cookie::setexpires","elixir\\http\\cookie::getpath","elixir\\http\\cookie::setpath","elixir\\http\\cookie::getdomain","elixir\\http\\cookie::setdomain","elixir\\http\\cookie::issecure","elixir\\http\\cookie::setsecure","elixir\\http\\cookie::ishttponly","elixir\\http\\cookie::sethttponly","elixir\\http\\cookie::send","elixir\\http\\cookie::tostring","elixir\\http\\cookie::__tostring","elixir\\http\\fileparameters::getuploaderfile","elixir\\http\\headers::fromapacherequestheaders","elixir\\http\\headers::has","elixir\\http\\headers::set","elixir\\http\\headers::get","elixir\\http\\headers::remove","elixir\\http\\headers::gets","elixir\\http\\headers::sets","elixir\\http\\headers::hascachecontroldirective","elixir\\http\\headers::getcachecontroldirective","elixir\\http\\headers::addcachecontroldirective","elixir\\http\\headers::removecachecontroldirective","elixir\\http\\headers::getcachecontroldirectives","elixir\\http\\headers::setcachecontroldirectives","elixir\\http\\headers::hascookie","elixir\\http\\headers::setcookie","elixir\\http\\headers::removecookie","elixir\\http\\headers::clearcookie","elixir\\http\\headers::getcookies","elixir\\http\\headers::setcookies","elixir\\http\\headers::send","elixir\\http\\headers::__tostring","elixir\\http\\parameters::__construct","elixir\\http\\parameters::setsanitizer","elixir\\http\\parameters::getsanitizer","elixir\\http\\parameters::setautosanitization","elixir\\http\\parameters::isautosanitization","elixir\\http\\parameters::has","elixir\\http\\parameters::get","elixir\\http\\parameters::set","elixir\\http\\parameters::remove","elixir\\http\\parameters::gets","elixir\\http\\parameters::sets","elixir\\http\\parameters::offsetexists","elixir\\http\\parameters::offsetset","elixir\\http\\parameters::offsetget","elixir\\http\\parameters::offsetunset","elixir\\http\\parameters::rewind","elixir\\http\\parameters::current","elixir\\http\\parameters::key","elixir\\http\\parameters::next","elixir\\http\\parameters::valid","elixir\\http\\parameters::count","elixir\\http\\parameters::__issset","elixir\\http\\parameters::__get","elixir\\http\\parameters::__set","elixir\\http\\parameters::__unset","elixir\\http\\parameters::merge","elixir\\http\\parameters::filter","elixir\\http\\parametersinterface::has","elixir\\http\\parametersinterface::get","elixir\\http\\parametersinterface::set","elixir\\http\\parametersinterface::remove","elixir\\http\\parametersinterface::gets","elixir\\http\\parametersinterface::sets","elixir\\http\\parametersinterface::merge","elixir\\http\\request::__construct","elixir\\http\\request::setheaders","elixir\\http\\request::getheaders","elixir\\http\\request::get","elixir\\http\\request::has","elixir\\http\\request::getattributes","elixir\\http\\request::getquery","elixir\\http\\request::getpost","elixir\\http\\request::getsession","elixir\\http\\request::getcookie","elixir\\http\\request::getfiles","elixir\\http\\request::getserver","elixir\\http\\request::getenv","elixir\\http\\request::setbaseurl","elixir\\http\\request::getbaseurl","elixir\\http\\request::seturl","elixir\\http\\request::geturl","elixir\\http\\request::getip","elixir\\http\\request::issecure","elixir\\http\\request::getscheme","elixir\\http\\request::getpathinfo","elixir\\http\\request::getrequestmethod","elixir\\http\\request::ispost","elixir\\http\\request::isquery","elixir\\http\\request::isput","elixir\\http\\request::isdelete","elixir\\http\\request::isajax","elixir\\http\\request::getuser","elixir\\http\\request::getpassword","elixir\\http\\request::getroute","elixir\\http\\request::setroute","elixir\\http\\request::getmodule","elixir\\http\\request::setmodule","elixir\\http\\request::getcontroller","elixir\\http\\request::setcontroller","elixir\\http\\request::getaction","elixir\\http\\request::setaction","elixir\\http\\request::__clone","elixir\\http\\requestfactory::create","elixir\\http\\response::fromstring","elixir\\http\\response::__construct","elixir\\http\\response::setrequest","elixir\\http\\response::getrequest","elixir\\http\\response::setstatuscode","elixir\\http\\response::getstatuscode","elixir\\http\\response::getreasonphrase","elixir\\http\\response::setprotocol","elixir\\http\\response::getprotocol","elixir\\http\\response::setcontent","elixir\\http\\response::getcontent","elixir\\http\\response::getheaders","elixir\\http\\response::isok","elixir\\http\\response::isnotfound","elixir\\http\\response::isforbidden","elixir\\http\\response::isinformational","elixir\\http\\response::issuccess","elixir\\http\\response::isredirection","elixir\\http\\response::isclienterror","elixir\\http\\response::isservererror","elixir\\http\\response::isnotmodified","elixir\\http\\response::optimizeheaders","elixir\\http\\response::issent","elixir\\http\\response::send","elixir\\http\\response::__tostring","elixir\\http\\responsefactory::create","elixir\\http\\responsefactory::redirect","elixir\\http\\responsefactory::json","elixir\\http\\responsefactory::stream","elixir\\http\\sanitizer::__construct","elixir\\http\\sanitizer::setcontainer","elixir\\http\\sanitizer::getcontainer","elixir\\http\\sanitizer::filter","elixir\\http\\sessionparameters::__construct","elixir\\http\\sessionparameters::getsession","elixir\\http\\sessionparameters::has","elixir\\http\\sessionparameters::get","elixir\\http\\sessionparameters::set","elixir\\http\\sessionparameters::remove","elixir\\http\\sessionparameters::gets","elixir\\http\\sessionparameters::sets","elixir\\http\\sessionparameters::merge","elixir\\http\\sessionparameters::__call","elixir\\http\\session\\handler\\db::__construct","elixir\\http\\session\\handler\\db::getdb","elixir\\http\\session\\handler\\db::getlifetime","elixir\\http\\session\\handler\\db::open","elixir\\http\\session\\handler\\db::close","elixir\\http\\session\\handler\\db::read","elixir\\http\\session\\handler\\db::write","elixir\\http\\session\\handler\\db::destroy","elixir\\http\\session\\handler\\db::gc","elixir\\http\\session\\session::__construct","elixir\\http\\session\\session::instance","elixir\\http\\session\\session::sethandler","elixir\\http\\session\\session::gehandler","elixir\\http\\session\\session::exist","elixir\\http\\session\\session::setid","elixir\\http\\session\\session::getid","elixir\\http\\session\\session::setname","elixir\\http\\session\\session::getname","elixir\\http\\session\\session::regenerate","elixir\\http\\session\\session::start","elixir\\http\\session\\session::has","elixir\\http\\session\\session::get","elixir\\http\\session\\session::set","elixir\\http\\session\\session::remove","elixir\\http\\session\\session::gets","elixir\\http\\session\\session::sets","elixir\\http\\session\\session::offsetexists","elixir\\http\\session\\session::offsetset","elixir\\http\\session\\session::offsetget","elixir\\http\\session\\session::offsetunset","elixir\\http\\session\\session::rewind","elixir\\http\\session\\session::current","elixir\\http\\session\\session::key","elixir\\http\\session\\session::next","elixir\\http\\session\\session::valid","elixir\\http\\session\\session::count","elixir\\http\\session\\session::__issset","elixir\\http\\session\\session::__get","elixir\\http\\session\\session::__set","elixir\\http\\session\\session::__unset","elixir\\http\\session\\session::flash","elixir\\http\\session\\session::clear","elixir\\http\\session\\session::destroy","elixir\\http\\session\\sessioninterface::sethandler","elixir\\http\\session\\sessioninterface::gehandler","elixir\\http\\session\\sessioninterface::exist","elixir\\http\\session\\sessioninterface::setid","elixir\\http\\session\\sessioninterface::getid","elixir\\http\\session\\sessioninterface::setname","elixir\\http\\session\\sessioninterface::getname","elixir\\http\\session\\sessioninterface::regenerate","elixir\\http\\session\\sessioninterface::start","elixir\\http\\session\\sessioninterface::has","elixir\\http\\session\\sessioninterface::get","elixir\\http\\session\\sessioninterface::set","elixir\\http\\session\\sessioninterface::remove","elixir\\http\\session\\sessioninterface::gets","elixir\\http\\session\\sessioninterface::sets","elixir\\http\\session\\sessioninterface::flash","elixir\\http\\session\\sessioninterface::clear","elixir\\http\\session\\sessioninterface::destroy","elixir\\http\\uploader::__construct","elixir\\http\\uploader::setname","elixir\\http\\uploader::getname","elixir\\http\\uploader::getfilename","elixir\\http\\uploader::gettempname","elixir\\http\\uploader::hasmultiplefiles","elixir\\http\\uploader::seterrormessage","elixir\\http\\uploader::geterrormessage","elixir\\http\\uploader::seterrormessagetemplate","elixir\\http\\uploader::geterrormessagetemplate","elixir\\http\\uploader::geterrormessagetemplates","elixir\\http\\uploader::seterrormessagetemplates","elixir\\http\\uploader::seterrorbreak","elixir\\http\\uploader::iserrorbreak","elixir\\http\\uploader::addvalidator","elixir\\http\\uploader::getvalidators","elixir\\http\\uploader::setvalidators","elixir\\http\\uploader::addfilter","elixir\\http\\uploader::getfilters","elixir\\http\\uploader::setfilters","elixir\\http\\uploader::getfileinfo","elixir\\http\\uploader::isuploaded","elixir\\http\\uploader::isvalid","elixir\\http\\uploader::receive","elixir\\http\\uploader::haserror","elixir\\http\\uploader::errors","elixir\\http\\uploader::reset","elixir\\helper\\action::__construct","elixir\\helper\\action::setcontroller","elixir\\helper\\action::get","elixir\\helper\\action::direct","elixir\\helper\\form::__construct","elixir\\helper\\form::setescaper","elixir\\helper\\form::getescaper","elixir\\helper\\form::setenabledprotection","elixir\\helper\\form::isenableprotection","elixir\\helper\\form::form","elixir\\helper\\form::formrest","elixir\\helper\\form::openformtag","elixir\\helper\\form::closeformtag","elixir\\helper\\form::openfieldsettag","elixir\\helper\\form::closefieldsettag","elixir\\helper\\form::openlabeltag","elixir\\helper\\form::closelabeltag","elixir\\helper\\form::field","elixir\\helper\\form::fielderrors","elixir\\helper\\form::input","elixir\\helper\\form::csrf","elixir\\helper\\form::button","elixir\\helper\\form::textarea","elixir\\helper\\form::select","elixir\\helper\\form::checkbox","elixir\\helper\\form::radio","elixir\\helper\\form::file","elixir\\helper\\form::direct","elixir\\helper\\forward::__construct","elixir\\helper\\forward::setcontroller","elixir\\helper\\forward::to","elixir\\helper\\forward::direct","elixir\\helper\\helperinterface::direct","elixir\\helper\\i18n::__construct","elixir\\helper\\i18n::geti18n","elixir\\helper\\i18n::translate","elixir\\helper\\i18n::_","elixir\\helper\\i18n::pluralize","elixir\\helper\\i18n::transplural","elixir\\helper\\i18n::__call","elixir\\helper\\i18n::direct","elixir\\helper\\locator::__construct","elixir\\helper\\locator::locateclass","elixir\\helper\\locator::locatefile","elixir\\helper\\locator::direct","elixir\\helper\\pagination::setview","elixir\\helper\\pagination::setlocator","elixir\\helper\\pagination::getlocator","elixir\\helper\\pagination::paginate","elixir\\helper\\pagination::direct","elixir\\helper\\partial::setview","elixir\\helper\\partial::setlocator","elixir\\helper\\partial::getlocator","elixir\\helper\\partial::renderloop","elixir\\helper\\partial::render","elixir\\helper\\partial::direct","elixir\\helper\\renderer::__construct","elixir\\helper\\renderer::setcontroller","elixir\\helper\\renderer::render","elixir\\helper\\renderer::renderresponse","elixir\\helper\\renderer::rendertextresponse","elixir\\helper\\renderer::direct","elixir\\helper\\security::setmanager","elixir\\helper\\security::getmanager","elixir\\helper\\security::setrequest","elixir\\helper\\security::getrequest","elixir\\helper\\security::setrbac","elixir\\helper\\security::getrbac","elixir\\helper\\security::setfirewall","elixir\\helper\\security::getfirewall","elixir\\helper\\security::hasidentity","elixir\\helper\\security::hasrole","elixir\\helper\\security::isgrantedrole","elixir\\helper\\security::isgrantedresource","elixir\\helper\\security::direct","elixir\\helper\\url::__construct","elixir\\helper\\url::setview","elixir\\helper\\url::setcontroller","elixir\\helper\\url::setlocator","elixir\\helper\\url::getlocator","elixir\\helper\\url::setrouter","elixir\\helper\\url::getrouter","elixir\\helper\\url::baseurl","elixir\\helper\\url::generate","elixir\\helper\\url::route","elixir\\helper\\url::direct","elixir\\i18n\\i18n::__construct","elixir\\i18n\\i18n::setlocale","elixir\\i18n\\i18n::getlocale","elixir\\i18n\\i18n::setplural","elixir\\i18n\\i18n::getplural","elixir\\i18n\\i18n::load","elixir\\i18n\\i18n::export","elixir\\i18n\\i18n::hastextdomain","elixir\\i18n\\i18n::addtextdomain","elixir\\i18n\\i18n::gettextdomain","elixir\\i18n\\i18n::removetextdomain","elixir\\i18n\\i18n::gettextdomains","elixir\\i18n\\i18n::settextdomains","elixir\\i18n\\i18n::translate","elixir\\i18n\\i18n::pluralize","elixir\\i18n\\i18n::transplural","elixir\\i18n\\i18n::__call","elixir\\i18n\\i18n::merge","elixir\\i18n\\i18nevent::__construct","elixir\\i18n\\i18nevent::setmessage","elixir\\i18n\\i18nevent::getmessage","elixir\\i18n\\i18nevent::getlocale","elixir\\i18n\\i18ninterface::setlocale","elixir\\i18n\\i18ninterface::getlocale","elixir\\i18n\\i18ninterface::gettextdomains","elixir\\i18n\\i18ninterface::translate","elixir\\i18n\\i18ninterface::pluralize","elixir\\i18n\\i18ninterface::transplural","elixir\\i18n\\loader\\arr::load","elixir\\i18n\\loader\\csv::load","elixir\\i18n\\loader\\gettext::load","elixir\\i18n\\loader\\json::load","elixir\\i18n\\loader\\loaderfactory::create","elixir\\i18n\\loader\\loaderinterface::load","elixir\\i18n\\locale::acceptfromhttp","elixir\\i18n\\locale::setdefault","elixir\\i18n\\locale::getdefault","elixir\\i18n\\locale::__callstatic","elixir\\i18n\\plural::__construct","elixir\\i18n\\plural::hasrule","elixir\\i18n\\plural::addrule","elixir\\i18n\\plural::removerule","elixir\\i18n\\plural::getrules","elixir\\i18n\\plural::setrules","elixir\\i18n\\plural::pluralize","elixir\\i18n\\textdomain::__construct","elixir\\i18n\\textdomain::addresource","elixir\\i18n\\textdomain::getresources","elixir\\i18n\\textdomain::setresources","elixir\\i18n\\textdomain::has","elixir\\i18n\\textdomain::set","elixir\\i18n\\textdomain::get","elixir\\i18n\\textdomain::remove","elixir\\i18n\\textdomain::gets","elixir\\i18n\\textdomain::sets","elixir\\i18n\\textdomain::isloaded","elixir\\i18n\\textdomain::load","elixir\\i18n\\textdomain::merge","elixir\\i18n\\writer\\arr::write","elixir\\i18n\\writer\\arr::export","elixir\\i18n\\writer\\writerabstract::__construct","elixir\\i18n\\writer\\writerabstract::seti18n","elixir\\i18n\\writer\\writerabstract::geti18n","elixir\\i18n\\writer\\writerinterface::seti18n","elixir\\i18n\\writer\\writerinterface::write","elixir\\i18n\\writer\\writerinterface::export","elixir\\logging\\logger::setdisabled","elixir\\logging\\logger::isdisabled","elixir\\logging\\logger::addwriter","elixir\\logging\\logger::getwriters","elixir\\logging\\logger::setwriters","elixir\\logging\\logger::emerg","elixir\\logging\\logger::alert","elixir\\logging\\logger::crit","elixir\\logging\\logger::error","elixir\\logging\\logger::warn","elixir\\logging\\logger::notice","elixir\\logging\\logger::info","elixir\\logging\\logger::debug","elixir\\logging\\logger::log","elixir\\logging\\logger::__call","elixir\\logging\\loggerevent::__construct","elixir\\logging\\loggerevent::getmessage","elixir\\logging\\loggerevent::getseverity","elixir\\logging\\loggerinterface::log","elixir\\logging\\writer\\file::__construct","elixir\\logging\\writer\\file::__destruct","elixir\\logging\\writer\\file::clear","elixir\\logging\\writer\\file::write","elixir\\logging\\writer\\firephp::__construct","elixir\\logging\\writer\\firephp::clear","elixir\\logging\\writer\\firephp::write","elixir\\logging\\writer\\writerabstract::settimeformat","elixir\\logging\\writer\\writerabstract::gettimeformat","elixir\\logging\\writer\\writerabstract::getmessagetemplate","elixir\\logging\\writer\\writerabstract::setmessagetemplate","elixir\\logging\\writer\\writerabstract::islocked","elixir\\logging\\writer\\writerabstract::lock","elixir\\logging\\writer\\writerabstract::unlock","elixir\\logging\\writer\\writerabstract::clear","elixir\\logging\\writer\\writerinterface::write","elixir\\mvc\\application::__construct","elixir\\mvc\\application::getcontainer","elixir\\mvc\\application::setcacheversion","elixir\\mvc\\application::getcacheversion","elixir\\mvc\\application::loadfromcache","elixir\\mvc\\application::exporttocache","elixir\\mvc\\application::setcontrollerresolver","elixir\\mvc\\application::getcontrollerresolver","elixir\\mvc\\application::hasmodule","elixir\\mvc\\application::getmodule","elixir\\mvc\\application::addmodule","elixir\\mvc\\application::getmodules","elixir\\mvc\\application::setmodules","elixir\\mvc\\application::isbooted","elixir\\mvc\\application::boot","elixir\\mvc\\application::getmodulehierarchy","elixir\\mvc\\application::locateclass","elixir\\mvc\\application::locatefile","elixir\\mvc\\application::handle","elixir\\mvc\\application::terminate","elixir\\mvc\\applicationevent::__construct","elixir\\mvc\\applicationevent::getrequest","elixir\\mvc\\applicationevent::getrequesttype","elixir\\mvc\\applicationevent::setresponse","elixir\\mvc\\applicationevent::getresponse","elixir\\mvc\\applicationevent::getexception","elixir\\mvc\\applicationinterface::getcontainer","elixir\\mvc\\applicationinterface::getmodule","elixir\\mvc\\applicationinterface::getmodules","elixir\\mvc\\applicationinterface::locateclass","elixir\\mvc\\applicationinterface::locatefile","elixir\\mvc\\applicationinterface::isbooted","elixir\\mvc\\applicationinterface::boot","elixir\\mvc\\applicationinterface::handle","elixir\\mvc\\controller\\controllerabstract::initialize","elixir\\mvc\\controller\\controllerabstract::getdispatcher","elixir\\mvc\\controller\\controllerabstract::getrequest","elixir\\mvc\\controller\\controllerabstract::getcontainer","elixir\\mvc\\controller\\controllerabstract::sethelpercontainer","elixir\\mvc\\controller\\controllerabstract::gethelpercontainer","elixir\\mvc\\controller\\controllerabstract::helper","elixir\\mvc\\controller\\controllerabstract::__call","elixir\\mvc\\controller\\controllerinterface::initialize","elixir\\mvc\\controller\\controllerinterface::getrequest","elixir\\mvc\\controller\\controllerinterface::getdispatcher","elixir\\mvc\\controller\\controllerinterface::getcontainer","elixir\\mvc\\controller\\controllerinterface::helper","elixir\\mvc\\controller\\controllerresolver::getcontroller","elixir\\mvc\\controller\\controllerresolver::getarguments","elixir\\mvc\\controller\\controllerresolverinterface::getcontroller","elixir\\mvc\\controller\\controllerresolverinterface::getarguments","elixir\\mvc\\controller\\helper\\container::__construct","elixir\\mvc\\controller\\helper\\container::getcontainer","elixir\\mvc\\controller\\helper\\container::setcontroller","elixir\\mvc\\controller\\helper\\container::getcontroller","elixir\\mvc\\controller\\helper\\container::setusetag","elixir\\mvc\\controller\\helper\\container::isusetag","elixir\\mvc\\controller\\helper\\container::load","elixir\\mvc\\controller\\helper\\container::get","elixir\\mvc\\controller\\helper\\container::has","elixir\\mvc\\controller\\helper\\contextinterface::setcontroller","elixir\\mvc\\controller\\restfulcontrollerabstract::__call","elixir\\mvc\\exception\\errorexception::__construct","elixir\\mvc\\exception\\forbiddenexception::__construct","elixir\\mvc\\exception\\notfoundexception::__construct","elixir\\mvc\\module\\moduleabstract::getname","elixir\\mvc\\module\\moduleabstract::getparent","elixir\\mvc\\module\\moduleabstract::getnamespace","elixir\\mvc\\module\\moduleabstract::getpath","elixir\\mvc\\module\\moduleabstract::getrequired","elixir\\mvc\\module\\moduleabstract::register","elixir\\mvc\\module\\moduleinterface::getname","elixir\\mvc\\module\\moduleinterface::getparent","elixir\\mvc\\module\\moduleinterface::getnamespace","elixir\\mvc\\module\\moduleinterface::getpath","elixir\\mvc\\module\\moduleinterface::getrequired","elixir\\mvc\\module\\moduleinterface::register","elixir\\mvc\\module\\moduleinterface::boot","elixir\\mvc\\module\\selectedinterface::isselected","elixir\\mvc\\module\\selectedinterface::selected","elixir\\pagination\\item::__construct","elixir\\pagination\\item::getindex","elixir\\pagination\\item::setselected","elixir\\pagination\\item::isselected","elixir\\pagination\\item::setfirst","elixir\\pagination\\item::isfirst","elixir\\pagination\\item::setlast","elixir\\pagination\\item::islast","elixir\\pagination\\item::__tostring","elixir\\pagination\\pagination::__construct","elixir\\pagination\\pagination::getstyle","elixir\\pagination\\pagination::setitemsperpage","elixir\\pagination\\pagination::getitemsperpage","elixir\\pagination\\pagination::settotalitems","elixir\\pagination\\pagination::gettotalitems","elixir\\pagination\\pagination::gettotalpages","elixir\\pagination\\pagination::setcurrentitem","elixir\\pagination\\pagination::getcurrentitem","elixir\\pagination\\pagination::hasnextitem","elixir\\pagination\\pagination::nextitem","elixir\\pagination\\pagination::haspreviousitem","elixir\\pagination\\pagination::previousitem","elixir\\pagination\\pagination::setcurrentpage","elixir\\pagination\\pagination::getcurrentpage","elixir\\pagination\\pagination::hasnextpage","elixir\\pagination\\pagination::nextpage","elixir\\pagination\\pagination::haspreviouspage","elixir\\pagination\\pagination::previouspage","elixir\\pagination\\pagination::hasparameter","elixir\\pagination\\pagination::getparameter","elixir\\pagination\\pagination::setparameter","elixir\\pagination\\pagination::removeparameter","elixir\\pagination\\pagination::getparameters","elixir\\pagination\\pagination::setparameters","elixir\\pagination\\pagination::getpagerange","elixir\\pagination\\paginationinterface::getstyle","elixir\\pagination\\paginationinterface::setitemsperpage","elixir\\pagination\\paginationinterface::getitemsperpage","elixir\\pagination\\paginationinterface::settotalitems","elixir\\pagination\\paginationinterface::gettotalitems","elixir\\pagination\\paginationinterface::gettotalpages","elixir\\pagination\\paginationinterface::setcurrentitem","elixir\\pagination\\paginationinterface::getcurrentitem","elixir\\pagination\\paginationinterface::hasnextitem","elixir\\pagination\\paginationinterface::nextitem","elixir\\pagination\\paginationinterface::haspreviousitem","elixir\\pagination\\paginationinterface::previousitem","elixir\\pagination\\paginationinterface::setcurrentpage","elixir\\pagination\\paginationinterface::getcurrentpage","elixir\\pagination\\paginationinterface::hasnextpage","elixir\\pagination\\paginationinterface::nextpage","elixir\\pagination\\paginationinterface::haspreviouspage","elixir\\pagination\\paginationinterface::previouspage","elixir\\pagination\\paginationinterface::getparameters","elixir\\pagination\\paginationinterface::getpagerange","elixir\\pagination\\style\\elastic::getrange","elixir\\pagination\\style\\jumping::getrange","elixir\\pagination\\style\\styleinterface::getrange","elixir\\routing\\collection::has","elixir\\routing\\collection::get","elixir\\routing\\collection::add","elixir\\routing\\collection::remove","elixir\\routing\\collection::gets","elixir\\routing\\collection::sets","elixir\\routing\\collection::sort","elixir\\routing\\collection::merge","elixir\\routing\\collection::__call","elixir\\routing\\generator\\generatorinterface::setrequest","elixir\\routing\\generator\\generatorinterface::generate","elixir\\routing\\generator\\querygenerator::getquerykey","elixir\\routing\\generator\\querygenerator::setquerykey","elixir\\routing\\generator\\querygenerator::generate","elixir\\routing\\generator\\urlgenerator::__construct","elixir\\routing\\generator\\urlgenerator::setrequest","elixir\\routing\\generator\\urlgenerator::getrequest","elixir\\routing\\generator\\urlgenerator::setstrict","elixir\\routing\\generator\\urlgenerator::isstrict","elixir\\routing\\generator\\urlgenerator::clean","elixir\\routing\\generator\\urlgenerator::generate","elixir\\routing\\loader\\arr::load","elixir\\routing\\loader\\json::load","elixir\\routing\\loader\\loaderfactory::create","elixir\\routing\\loader\\loaderinterface::load","elixir\\routing\\loader\\xml::load","elixir\\routing\\matcher\\matcherinterface::setrequest","elixir\\routing\\matcher\\matcherinterface::match","elixir\\routing\\matcher\\querymatcher::getquerykey","elixir\\routing\\matcher\\querymatcher::setquerykey","elixir\\routing\\matcher\\querymatcher::match","elixir\\routing\\matcher\\routematch::__construct","elixir\\routing\\matcher\\routematch::getroutename","elixir\\routing\\matcher\\routematch::has","elixir\\routing\\matcher\\routematch::get","elixir\\routing\\matcher\\routematch::set","elixir\\routing\\matcher\\routematch::remove","elixir\\routing\\matcher\\routematch::gets","elixir\\routing\\matcher\\routematch::sets","elixir\\routing\\matcher\\urlmatcher::__construct","elixir\\routing\\matcher\\urlmatcher::setrequest","elixir\\routing\\matcher\\urlmatcher::getrequest","elixir\\routing\\matcher\\urlmatcher::match","elixir\\routing\\route::__construct","elixir\\routing\\route::getpattern","elixir\\routing\\route::mvc","elixir\\routing\\route::setmodule","elixir\\routing\\route::getmodule","elixir\\routing\\route::setcontroller","elixir\\routing\\route::getcontroller","elixir\\routing\\route::setaction","elixir\\routing\\route::getaction","elixir\\routing\\route::hasparameter","elixir\\routing\\route::getparameter","elixir\\routing\\route::setparameter","elixir\\routing\\route::removeparameter","elixir\\routing\\route::getparameters","elixir\\routing\\route::setparameters","elixir\\routing\\route::prefix","elixir\\routing\\route::suffix","elixir\\routing\\route::setsecure","elixir\\routing\\route::issecure","elixir\\routing\\route::getmethods","elixir\\routing\\route::setmethods","elixir\\routing\\route::setuseattributes","elixir\\routing\\route::isuseattributes","elixir\\routing\\route::getreplacements","elixir\\routing\\route::setreplacements","elixir\\routing\\route::setassert","elixir\\routing\\route::getassert","elixir\\routing\\route::setgeneratefilter","elixir\\routing\\route::getgeneratefilter","elixir\\routing\\route::setmatchedfilter","elixir\\routing\\route::getmatchedfilter","elixir\\routing\\route::hasoption","elixir\\routing\\route::getoption","elixir\\routing\\route::setoption","elixir\\routing\\route::removeoption","elixir\\routing\\route::getoptions","elixir\\routing\\route::setoptions","elixir\\routing\\router::__construct","elixir\\routing\\router::setcollection","elixir\\routing\\router::getcollection","elixir\\routing\\router::setrequest","elixir\\routing\\router::getrequest","elixir\\routing\\router::seturlmatcher","elixir\\routing\\router::geturlmatcher","elixir\\routing\\router::seturlgenerator","elixir\\routing\\router::geturlgenerator","elixir\\routing\\router::load","elixir\\routing\\router::export","elixir\\routing\\router::match","elixir\\routing\\router::generate","elixir\\routing\\routerevent::__construct","elixir\\routing\\routerevent::getroutematch","elixir\\routing\\routerinterface::getcollection","elixir\\routing\\routerinterface::getrequest","elixir\\routing\\routerinterface::match","elixir\\routing\\routerinterface::generate","elixir\\routing\\writer\\arr::write","elixir\\routing\\writer\\arr::export","elixir\\routing\\writer\\writerabstract::__construct","elixir\\routing\\writer\\writerabstract::setrouter","elixir\\routing\\writer\\writerabstract::getrouter","elixir\\routing\\writer\\writerinterface::setrouter","elixir\\routing\\writer\\writerinterface::write","elixir\\routing\\writer\\writerinterface::export","elixir\\security\\authentification\\authinterface::authenticate","elixir\\security\\authentification\\identity::__construct","elixir\\security\\authentification\\identity::setsecuritycontext","elixir\\security\\authentification\\identity::getsecuritycontext","elixir\\security\\authentification\\identity::setdata","elixir\\security\\authentification\\identity::getdata","elixir\\security\\authentification\\identity::setdomain","elixir\\security\\authentification\\identity::getdomain","elixir\\security\\authentification\\identity::update","elixir\\security\\authentification\\identity::remove","elixir\\security\\authentification\\identity::__get","elixir\\security\\authentification\\identity::__set","elixir\\security\\authentification\\manager::__construct","elixir\\security\\authentification\\manager::getstorage","elixir\\security\\authentification\\manager::authenticate","elixir\\security\\authentification\\manager::isempty","elixir\\security\\authentification\\manager::has","elixir\\security\\authentification\\manager::get","elixir\\security\\authentification\\manager::set","elixir\\security\\authentification\\manager::onidentityremoved","elixir\\security\\authentification\\manager::onidentityupdated","elixir\\security\\authentification\\manager::remove","elixir\\security\\authentification\\manager::gets","elixir\\security\\authentification\\manager::sets","elixir\\security\\authentification\\manager::update","elixir\\security\\authentification\\maskbuilder::__construct","elixir\\security\\authentification\\maskbuilder::explode","elixir\\security\\authentification\\maskbuilder::has","elixir\\security\\authentification\\maskbuilder::add","elixir\\security\\authentification\\maskbuilder::remove","elixir\\security\\authentification\\maskbuilder::set","elixir\\security\\authentification\\maskbuilder::get","elixir\\security\\authentification\\maskbuilder::isempty","elixir\\security\\authentification\\result::__construct","elixir\\security\\authentification\\result::issuccess","elixir\\security\\authentification\\result::isfailure","elixir\\security\\authentification\\result::getcode","elixir\\security\\authentification\\result::hascode","elixir\\security\\authentification\\result::getidentity","elixir\\security\\authentification\\result::getmessages","elixir\\security\\authentification\\storage\\session::__construct","elixir\\security\\authentification\\storage\\session::isempty","elixir\\security\\authentification\\storage\\session::has","elixir\\security\\authentification\\storage\\session::get","elixir\\security\\authentification\\storage\\session::set","elixir\\security\\authentification\\storage\\session::remove","elixir\\security\\authentification\\storage\\session::gets","elixir\\security\\authentification\\storage\\session::sets","elixir\\security\\authentification\\storage\\storageinterface::isempty","elixir\\security\\authentification\\storage\\storageinterface::has","elixir\\security\\authentification\\storage\\storageinterface::get","elixir\\security\\authentification\\storage\\storageinterface::set","elixir\\security\\authentification\\storage\\storageinterface::remove","elixir\\security\\authentification\\storage\\storageinterface::gets","elixir\\security\\authentification\\storage\\storageinterface::sets","elixir\\security\\csrf::__construct","elixir\\security\\csrf::getrequest","elixir\\security\\csrf::create","elixir\\security\\csrf::invalidate","elixir\\security\\csrf::isvalid","elixir\\security\\crypt::__construct","elixir\\security\\crypt::getcipher","elixir\\security\\crypt::getsecret","elixir\\security\\crypt::getmode","elixir\\security\\crypt::encrypt","elixir\\security\\crypt::decrypt","elixir\\security\\firewall\\accesscontrolabstract::hasoption","elixir\\security\\firewall\\accesscontrolabstract::setoption","elixir\\security\\firewall\\accesscontrolabstract::getoption","elixir\\security\\firewall\\accesscontrolabstract::removeoption","elixir\\security\\firewall\\accesscontrolabstract::getoptions","elixir\\security\\firewall\\accesscontrolabstract::setoptions","elixir\\security\\firewall\\accesscontrolinterface::getpattern","elixir\\security\\firewall\\accesscontrolinterface::getoptions","elixir\\security\\firewall\\behavior\\accessforbidden::__construct","elixir\\security\\firewall\\behavior\\accessforbidden::getmessage","elixir\\security\\firewall\\behavior\\accessforbidden::__invoke","elixir\\security\\firewall\\behavior\\identitynotfound::__construct","elixir\\security\\firewall\\behavior\\identitynotfound::getredirecturl","elixir\\security\\firewall\\behavior\\identitynotfound::getmessage","elixir\\security\\firewall\\behavior\\identitynotfound::getrequest","elixir\\security\\firewall\\behavior\\identitynotfound::__invoke","elixir\\security\\firewall\\firewallabstract::__construct","elixir\\security\\firewall\\firewallabstract::getauthmanager","elixir\\security\\firewall\\firewallabstract::load","elixir\\security\\firewall\\firewallabstract::export","elixir\\security\\firewall\\firewallabstract::hasaccesscontrol","elixir\\security\\firewall\\firewallabstract::addaccesscontrol","elixir\\security\\firewall\\firewallabstract::removeaccesscontrol","elixir\\security\\firewall\\firewallabstract::getaccesscontrols","elixir\\security\\firewall\\firewallabstract::setaccesscontrols","elixir\\security\\firewall\\firewallabstract::sort","elixir\\security\\firewall\\firewallabstract::getrequiredaccesscontrol","elixir\\security\\firewall\\firewallabstract::merge","elixir\\security\\firewall\\firewallevent::__construct","elixir\\security\\firewall\\firewallevent::getresource","elixir\\security\\firewall\\firewallevent::getaccesscontrol","elixir\\security\\firewall\\firewallinterface::getaccesscontrols","elixir\\security\\firewall\\firewallinterface::analyze","elixir\\security\\firewall\\identity\\accesscontrol::__construct","elixir\\security\\firewall\\identity\\accesscontrol::getpattern","elixir\\security\\firewall\\identity\\accesscontrol::setoption","elixir\\security\\firewall\\identity\\accesscontrol::adddomain","elixir\\security\\firewall\\identity\\accesscontrol::getdomains","elixir\\security\\firewall\\identity\\accesscontrol::setdomains","elixir\\security\\firewall\\identity\\firewall::load","elixir\\security\\firewall\\identity\\firewall::analyze","elixir\\security\\firewall\\loader\\arr::load","elixir\\security\\firewall\\loader\\json::load","elixir\\security\\firewall\\loader\\loaderfactory::create","elixir\\security\\firewall\\loader\\loaderinterface::load","elixir\\security\\firewall\\loader\\xml::load","elixir\\security\\firewall\\rbac\\accesscontrol::__construct","elixir\\security\\firewall\\rbac\\accesscontrol::getpattern","elixir\\security\\firewall\\rbac\\accesscontrol::setoption","elixir\\security\\firewall\\rbac\\accesscontrol::addrole","elixir\\security\\firewall\\rbac\\accesscontrol::getroles","elixir\\security\\firewall\\rbac\\accesscontrol::setroles","elixir\\security\\firewall\\rbac\\accesscontrol::addpermission","elixir\\security\\firewall\\rbac\\accesscontrol::getpermissions","elixir\\security\\firewall\\rbac\\accesscontrol::setpermissions","elixir\\security\\firewall\\rbac\\accesscontrol::setassert","elixir\\security\\firewall\\rbac\\accesscontrol::getassert","elixir\\security\\firewall\\rbac\\accesscontrol::adddomain","elixir\\security\\firewall\\rbac\\accesscontrol::getdomains","elixir\\security\\firewall\\rbac\\accesscontrol::setdomains","elixir\\security\\firewall\\rbac\\firewall::load","elixir\\security\\firewall\\rbac\\firewall::analyze","elixir\\security\\firewall\\utils::createresource","elixir\\security\\firewall\\writer\\arr::write","elixir\\security\\firewall\\writer\\arr::export","elixir\\security\\firewall\\writer\\writerabstract::__construct","elixir\\security\\firewall\\writer\\writerabstract::setfirewall","elixir\\security\\firewall\\writer\\writerabstract::getfirewall","elixir\\security\\firewall\\writer\\writerinterface::setfirewall","elixir\\security\\firewall\\writer\\writerinterface::write","elixir\\security\\firewall\\writer\\writerinterface::export","elixir\\security\\hash::generatesalt","elixir\\security\\hash::hash","elixir\\security\\hash::crypt","elixir\\security\\hash::verify","elixir\\security\\rbac\\rbac::__construct","elixir\\security\\rbac\\rbac::hasrole","elixir\\security\\rbac\\rbac::addrole","elixir\\security\\rbac\\rbac::removerole","elixir\\security\\rbac\\rbac::getrole","elixir\\security\\rbac\\rbac::getroles","elixir\\security\\rbac\\rbac::setroles","elixir\\security\\rbac\\rbac::isgranted","elixir\\security\\rbac\\rbacinterface::hasrole","elixir\\security\\rbac\\rbacinterface::getroles","elixir\\security\\rbac\\rbacinterface::isgranted","elixir\\security\\rbac\\role::__construct","elixir\\security\\rbac\\role::getname","elixir\\security\\rbac\\role::setrbac","elixir\\security\\rbac\\role::getrbac","elixir\\security\\rbac\\role::haschild","elixir\\security\\rbac\\role::addchild","elixir\\security\\rbac\\role::removechild","elixir\\security\\rbac\\role::haspermission","elixir\\security\\rbac\\role::addpermission","elixir\\security\\rbac\\role::removepermission","elixir\\security\\rbac\\role::getpermissions","elixir\\security\\rbac\\role::setpermissions","elixir\\tree\\tree::__construct","elixir\\tree\\tree::getlevel","elixir\\tree\\tree::setlevel","elixir\\tree\\tree::isroot","elixir\\tree\\tree::addchild","elixir\\tree\\tree::getchildren","elixir\\tree\\tree::setchildren","elixir\\tree\\tree::haschildren","elixir\\tree\\tree::hasparameter","elixir\\tree\\tree::getparameter","elixir\\tree\\tree::setparameter","elixir\\tree\\tree::removeparameter","elixir\\tree\\tree::getparameters","elixir\\tree\\tree::setparameters","elixir\\tree\\tree::sort","elixir\\tree\\tree::find","elixir\\tree\\treeinterface::getlevel","elixir\\tree\\treeinterface::setlevel","elixir\\tree\\treeinterface::getparameters","elixir\\tree\\treeinterface::getchildren","elixir\\tree\\treeinterface::sort","elixir\\tree\\treeinterface::find","elixir\\util\\arr::has","elixir\\util\\arr::get","elixir\\util\\arr::set","elixir\\util\\arr::remove","elixir\\util\\arr::merge","elixir\\util\\csv::csvtoarray","elixir\\util\\csv::arraytocsv","elixir\\util\\file::extension","elixir\\util\\file::dirname","elixir\\util\\file::basename","elixir\\util\\file::filename","elixir\\util\\file::mimetype","elixir\\util\\file::copy","elixir\\util\\file::fileslist","elixir\\util\\file::remove","elixir\\util\\file::rename","elixir\\util\\image::getsizinginfo","elixir\\util\\image::isgd","elixir\\util\\image::createfromresource","elixir\\util\\image::createfromimage","elixir\\util\\image::createresource","elixir\\util\\image::__construct","elixir\\util\\image::__destruct","elixir\\util\\image::getoriginalimagepath","elixir\\util\\image::getmimetype","elixir\\util\\image::getwidth","elixir\\util\\image::getheight","elixir\\util\\image::getresource","elixir\\util\\image::resize","elixir\\util\\image::enlarge","elixir\\util\\image::crop","elixir\\util\\image::merge","elixir\\util\\image::filter","elixir\\util\\image::save","elixir\\util\\str::isjson","elixir\\util\\str::random","elixir\\util\\str::removeaccents","elixir\\util\\str::camelize","elixir\\util\\str::slug","elixir\\util\\str::snake","elixir\\util\\str::resume","elixir\\util\\str::keywords","elixir\\validator\\boolean::isvalid","elixir\\validator\\csrf::__construct","elixir\\validator\\csrf::setcsrf","elixir\\validator\\csrf::getcsrf","elixir\\validator\\csrf::createtoken","elixir\\validator\\csrf::isvalid","elixir\\validator\\callback::isvalid","elixir\\validator\\chain::addvalidator","elixir\\validator\\chain::getvalidators","elixir\\validator\\chain::setvalidators","elixir\\validator\\chain::isvalid","elixir\\validator\\date::isvalid","elixir\\validator\\email::isvalid","elixir\\validator\\equal::isvalid","elixir\\validator\\extension::isvalid","elixir\\validator\\filesize::isvalid","elixir\\validator\\float::isvalid","elixir\\validator\\format::isvalid","elixir\\validator\\ip::isvalid","elixir\\validator\\int::isvalid","elixir\\validator\\length::isvalid","elixir\\validator\\mimetype::isvalid","elixir\\validator\\notempty::isvalid","elixir\\validator\\range::isvalid","elixir\\validator\\regex::isvalid","elixir\\validator\\url::isvalid","elixir\\validator\\validatorabstract::setdefaultoptions","elixir\\validator\\validatorabstract::getdefaultoptions","elixir\\validator\\validatorabstract::seterrormessage","elixir\\validator\\validatorabstract::geterrormessage","elixir\\validator\\validatorabstract::seterrormessagetemplate","elixir\\validator\\validatorabstract::geterrormessagetemplate","elixir\\validator\\validatorabstract::haserror","elixir\\validator\\validatorabstract::errors","elixir\\validator\\validatorinterface::isvalid","elixir\\validator\\validatorinterface::haserror","elixir\\validator\\validatorinterface::errors","elixir\\version::getcode","elixir\\version::getlastmodification","elixir\\view\\dataabstract::has","elixir\\view\\dataabstract::get","elixir\\view\\dataabstract::set","elixir\\view\\dataabstract::setglobal","elixir\\view\\dataabstract::remove","elixir\\view\\dataabstract::gets","elixir\\view\\dataabstract::sets","elixir\\view\\dataabstract::globalize","elixir\\view\\dataabstract::isglobal","elixir\\view\\dataabstract::__isset","elixir\\view\\dataabstract::__get","elixir\\view\\dataabstract::__set","elixir\\view\\dataabstract::__unset","elixir\\view\\dataabstract::__clone","elixir\\view\\escaperinterface::setautoescape","elixir\\view\\escaperinterface::isautoescape","elixir\\view\\escaperinterface::setescaper","elixir\\view\\escaperinterface::getescaper","elixir\\view\\escaperinterface::escape","elixir\\view\\escaperinterface::raw","elixir\\view\\globalinterface::setglobal","elixir\\view\\globalinterface::globalize","elixir\\view\\globalinterface::isglobal","elixir\\view\\helperinterface::sethelpercontainer","elixir\\view\\helperinterface::gethelpercontainer","elixir\\view\\helperinterface::helper","elixir\\view\\helper\\container::__construct","elixir\\view\\helper\\container::getcontainer","elixir\\view\\helper\\container::setview","elixir\\view\\helper\\container::getview","elixir\\view\\helper\\container::setusetag","elixir\\view\\helper\\container::isusetag","elixir\\view\\helper\\container::load","elixir\\view\\helper\\container::get","elixir\\view\\helper\\container::has","elixir\\view\\helper\\contextinterface::setview","elixir\\view\\manager::getdefaultengine","elixir\\view\\manager::getdefaultextension","elixir\\view\\manager::registerengine","elixir\\view\\manager::getengine","elixir\\view\\manager::getenginebyextension","elixir\\view\\manager::getengines","elixir\\view\\manager::render","elixir\\view\\php\\blockevent::__construct","elixir\\view\\php\\blockevent::getblock","elixir\\view\\php\\blockevent::getcontent","elixir\\view\\php\\blockevent::setcontent","elixir\\view\\php\\blockevent::getoptions","elixir\\view\\php\\blocks::start","elixir\\view\\php\\blocks::parent","elixir\\view\\php\\blocks::end","elixir\\view\\php\\blocks::mask","elixir\\view\\php\\blocks::has","elixir\\view\\php\\blocks::get","elixir\\view\\php\\blocks::set","elixir\\view\\php\\blocks::remove","elixir\\view\\php\\blocks::gets","elixir\\view\\php\\blocks::sets","elixir\\view\\php\\blocks::reset","elixir\\view\\php\\blocks::parse","elixir\\view\\php\\php::__construct","elixir\\view\\php\\php::getblocks","elixir\\view\\php\\php::getparser","elixir\\view\\php\\php::getdefaultextension","elixir\\view\\php\\php::sethelpercontainer","elixir\\view\\php\\php::gethelpercontainer","elixir\\view\\php\\php::setescaper","elixir\\view\\php\\php::getescaper","elixir\\view\\php\\php::setautoescape","elixir\\view\\php\\php::isautoescape","elixir\\view\\php\\php::escape","elixir\\view\\php\\php::raw","elixir\\view\\php\\php::helper","elixir\\view\\php\\php::extend","elixir\\view\\php\\php::start","elixir\\view\\php\\php::parent","elixir\\view\\php\\php::end","elixir\\view\\php\\php::block","elixir\\view\\php\\php::get","elixir\\view\\php\\php::render","elixir\\view\\php\\php::__clone","elixir\\view\\php\\parser::__construct","elixir\\view\\php\\parser::parse","elixir\\view\\php\\parser::data","elixir\\view\\php\\parser::__isset","elixir\\view\\php\\parser::__get","elixir\\view\\php\\parser::__set","elixir\\view\\php\\parser::__unset","elixir\\view\\php\\parser::__call","elixir\\view\\storage\\file::__construct","elixir\\view\\storage\\file::getcontent","elixir\\view\\storage\\file::__tostring","elixir\\view\\storage\\storageinterface::getcontent","elixir\\view\\storage\\str::__construct","elixir\\view\\storage\\str::getcontent","elixir\\view\\storage\\str::__tostring","elixir\\view\\viewinterface::getdefaultextension","elixir\\view\\viewinterface::has","elixir\\view\\viewinterface::get","elixir\\view\\viewinterface::set","elixir\\view\\viewinterface::remove","elixir\\view\\viewinterface::gets","elixir\\view\\viewinterface::sets","elixir\\view\\viewinterface::render"],
        'info': [["Elixir","","Elixir.html","","",3],["Elixir\\Cache","","Elixir\/Cache.html","","",3],["Elixir\\Cache\\Encoder","","Elixir\/Cache\/Encoder.html","","",3],["Elixir\\ClassLoader","","Elixir\/ClassLoader.html","","",3],["Elixir\\Config","","Elixir\/Config.html","","",3],["Elixir\\Config\\Loader","","Elixir\/Config\/Loader.html","","",3],["Elixir\\Config\\Processor","","Elixir\/Config\/Processor.html","","",3],["Elixir\\Config\\Writer","","Elixir\/Config\/Writer.html","","",3],["Elixir\\DB","","Elixir\/DB.html","","",3],["Elixir\\DB\\ORM","","Elixir\/DB\/ORM.html","","",3],["Elixir\\DB\\ORM\\Relation","","Elixir\/DB\/ORM\/Relation.html","","",3],["Elixir\\DB\\Result","","Elixir\/DB\/Result.html","","",3],["Elixir\\DB\\SQL","","Elixir\/DB\/SQL.html","","",3],["Elixir\\DB\\SQL\\MySQL","","Elixir\/DB\/SQL\/MySQL.html","","",3],["Elixir\\DB\\SQL\\SQLite","","Elixir\/DB\/SQL\/SQLite.html","","",3],["Elixir\\DI","","Elixir\/DI.html","","",3],["Elixir\\Dispatcher","","Elixir\/Dispatcher.html","","",3],["Elixir\\Facade","","Elixir\/Facade.html","","",3],["Elixir\\Filter","","Elixir\/Filter.html","","",3],["Elixir\\Form","","Elixir\/Form.html","","",3],["Elixir\\Form\\Extension","","Elixir\/Form\/Extension.html","","",3],["Elixir\\Form\\Field","","Elixir\/Form\/Field.html","","",3],["Elixir\\HTTP","","Elixir\/HTTP.html","","",3],["Elixir\\HTTP\\Session","","Elixir\/HTTP\/Session.html","","",3],["Elixir\\HTTP\\Session\\Handler","","Elixir\/HTTP\/Session\/Handler.html","","",3],["Elixir\\Helper","","Elixir\/Helper.html","","",3],["Elixir\\I18N","","Elixir\/I18N.html","","",3],["Elixir\\I18N\\Loader","","Elixir\/I18N\/Loader.html","","",3],["Elixir\\I18N\\Writer","","Elixir\/I18N\/Writer.html","","",3],["Elixir\\Logging","","Elixir\/Logging.html","","",3],["Elixir\\Logging\\Writer","","Elixir\/Logging\/Writer.html","","",3],["Elixir\\MVC","","Elixir\/MVC.html","","",3],["Elixir\\MVC\\Controller","","Elixir\/MVC\/Controller.html","","",3],["Elixir\\MVC\\Controller\\Helper","","Elixir\/MVC\/Controller\/Helper.html","","",3],["Elixir\\MVC\\Exception","","Elixir\/MVC\/Exception.html","","",3],["Elixir\\MVC\\Module","","Elixir\/MVC\/Module.html","","",3],["Elixir\\Pagination","","Elixir\/Pagination.html","","",3],["Elixir\\Pagination\\Style","","Elixir\/Pagination\/Style.html","","",3],["Elixir\\Routing","","Elixir\/Routing.html","","",3],["Elixir\\Routing\\Generator","","Elixir\/Routing\/Generator.html","","",3],["Elixir\\Routing\\Loader","","Elixir\/Routing\/Loader.html","","",3],["Elixir\\Routing\\Matcher","","Elixir\/Routing\/Matcher.html","","",3],["Elixir\\Routing\\Writer","","Elixir\/Routing\/Writer.html","","",3],["Elixir\\Security","","Elixir\/Security.html","","",3],["Elixir\\Security\\Authentification","","Elixir\/Security\/Authentification.html","","",3],["Elixir\\Security\\Authentification\\Storage","","Elixir\/Security\/Authentification\/Storage.html","","",3],["Elixir\\Security\\Firewall","","Elixir\/Security\/Firewall.html","","",3],["Elixir\\Security\\Firewall\\Behavior","","Elixir\/Security\/Firewall\/Behavior.html","","",3],["Elixir\\Security\\Firewall\\Identity","","Elixir\/Security\/Firewall\/Identity.html","","",3],["Elixir\\Security\\Firewall\\Loader","","Elixir\/Security\/Firewall\/Loader.html","","",3],["Elixir\\Security\\Firewall\\RBAC","","Elixir\/Security\/Firewall\/RBAC.html","","",3],["Elixir\\Security\\Firewall\\Writer","","Elixir\/Security\/Firewall\/Writer.html","","",3],["Elixir\\Security\\RBAC","","Elixir\/Security\/RBAC.html","","",3],["Elixir\\Tree","","Elixir\/Tree.html","","",3],["Elixir\\Util","","Elixir\/Util.html","","",3],["Elixir\\Validator","","Elixir\/Validator.html","","",3],["Elixir\\View","","Elixir\/View.html","","",3],["Elixir\\View\\Helper","","Elixir\/View\/Helper.html","","",3],["Elixir\\View\\PHP","","Elixir\/View\/PHP.html","","",3],["Elixir\\View\\Storage","","Elixir\/View\/Storage.html","","",3],["APC","Elixir\\Cache","Elixir\/Cache\/APC.html"," < CacheAbstract","",1],["CacheAbstract","Elixir\\Cache","Elixir\/Cache\/CacheAbstract.html","","",1],["CacheInterface","Elixir\\Cache","Elixir\/Cache\/CacheInterface.html","","",1],["EncoderInterface","Elixir\\Cache\\Encoder","Elixir\/Cache\/Encoder\/EncoderInterface.html","","",1],["JSON","Elixir\\Cache\\Encoder","Elixir\/Cache\/Encoder\/JSON.html","","",1],["Serialize","Elixir\\Cache\\Encoder","Elixir\/Cache\/Encoder\/Serialize.html","","",1],["File","Elixir\\Cache","Elixir\/Cache\/File.html"," < CacheAbstract","",1],["Memcached","Elixir\\Cache","Elixir\/Cache\/Memcached.html"," < CacheAbstract","",1],["Loader","Elixir\\ClassLoader","Elixir\/ClassLoader\/Loader.html","","",1],["LoaderInterface","Elixir\\ClassLoader","Elixir\/ClassLoader\/LoaderInterface.html","","",1],["Config","Elixir\\Config","Elixir\/Config\/Config.html","","",1],["ConfigInterface","Elixir\\Config","Elixir\/Config\/ConfigInterface.html","","",1],["Arr","Elixir\\Config\\Loader","Elixir\/Config\/Loader\/Arr.html"," < LoaderAbstract","",1],["INI","Elixir\\Config\\Loader","Elixir\/Config\/Loader\/INI.html"," < LoaderAbstract","",1],["JSON","Elixir\\Config\\Loader","Elixir\/Config\/Loader\/JSON.html"," < LoaderAbstract","",1],["LoaderAbstract","Elixir\\Config\\Loader","Elixir\/Config\/Loader\/LoaderAbstract.html","","",1],["LoaderFactory","Elixir\\Config\\Loader","Elixir\/Config\/Loader\/LoaderFactory.html","","",1],["LoaderInterface","Elixir\\Config\\Loader","Elixir\/Config\/Loader\/LoaderInterface.html","","",1],["XML","Elixir\\Config\\Loader","Elixir\/Config\/Loader\/XML.html"," < LoaderAbstract","",1],["Filter","Elixir\\Config\\Processor","Elixir\/Config\/Processor\/Filter.html"," < ProcessorAbstract","",1],["ProcessorAbstract","Elixir\\Config\\Processor","Elixir\/Config\/Processor\/ProcessorAbstract.html","","",1],["ProcessorInterface","Elixir\\Config\\Processor","Elixir\/Config\/Processor\/ProcessorInterface.html","","",1],["Arr","Elixir\\Config\\Writer","Elixir\/Config\/Writer\/Arr.html"," < WriterAbstract","",1],["WriterAbstract","Elixir\\Config\\Writer","Elixir\/Config\/Writer\/WriterAbstract.html","","",1],["WriterInterface","Elixir\\Config\\Writer","Elixir\/Config\/Writer\/WriterInterface.html","","",1],["DBAbstract","Elixir\\DB","Elixir\/DB\/DBAbstract.html"," < Dispatcher","",1],["DBEvent","Elixir\\DB","Elixir\/DB\/DBEvent.html"," < Event","",1],["DBFactory","Elixir\\DB","Elixir\/DB\/DBFactory.html","","",1],["DBInterface","Elixir\\DB","Elixir\/DB\/DBInterface.html","","",1],["Collection","Elixir\\DB\\ORM","Elixir\/DB\/ORM\/Collection.html"," < ArrayObject","",1],["EntityInterface","Elixir\\DB\\ORM","Elixir\/DB\/ORM\/EntityInterface.html","","",1],["ModelAbstract","Elixir\\DB\\ORM","Elixir\/DB\/ORM\/ModelAbstract.html"," < Dispatcher","",1],["ModelEvent","Elixir\\DB\\ORM","Elixir\/DB\/ORM\/ModelEvent.html"," < Event","",1],["ModelFactory","Elixir\\DB\\ORM","Elixir\/DB\/ORM\/ModelFactory.html","","",1],["BelongsTo","Elixir\\DB\\ORM\\Relation","Elixir\/DB\/ORM\/Relation\/BelongsTo.html","","",1],["HasMany","Elixir\\DB\\ORM\\Relation","Elixir\/DB\/ORM\/Relation\/HasMany.html"," < HasOneOrMany","",1],["HasOne","Elixir\\DB\\ORM\\Relation","Elixir\/DB\/ORM\/Relation\/HasOne.html"," < HasOneOrMany","",1],["HasOneOrMany","Elixir\\DB\\ORM\\Relation","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html","","",1],["Pivot","Elixir\\DB\\ORM\\Relation","Elixir\/DB\/ORM\/Relation\/Pivot.html","","",1],["Relation","Elixir\\DB\\ORM\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html","","",1],["RelationInterface","Elixir\\DB\\ORM\\Relation","Elixir\/DB\/ORM\/Relation\/RelationInterface.html","","",1],["RepositoryInterface","Elixir\\DB\\ORM","Elixir\/DB\/ORM\/RepositoryInterface.html","","",1],["Select","Elixir\\DB\\ORM","Elixir\/DB\/ORM\/Select.html","","",1],["PDO","Elixir\\DB","Elixir\/DB\/PDO.html"," < DBAbstract","",1],["PDO","Elixir\\DB\\Result","Elixir\/DB\/Result\/PDO.html"," < SetAbstract","",1],["SetAbstract","Elixir\\DB\\Result","Elixir\/DB\/Result\/SetAbstract.html","","",1],["AlterTable","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/AlterTable.html"," < SQLAbstract","",1],["Column","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/Column.html","","",1],["ColumnFactory","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/ColumnFactory.html","","",1],["Constraint","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/Constraint.html","","",1],["ConstraintFactory","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/ConstraintFactory.html","","",1],["CreateTable","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/CreateTable.html"," < SQLAbstract","",1],["Delete","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/Delete.html"," < SQLAbstract","",1],["DropTable","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/DropTable.html"," < SQLAbstract","",1],["Expr","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/Expr.html","","",1],["Insert","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/Insert.html"," < SQLAbstract","",1],["JoinClause","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/JoinClause.html","","",1],["AlterTable","Elixir\\DB\\SQL\\MySQL","Elixir\/DB\/SQL\/MySQL\/AlterTable.html"," < AlterTable","",1],["CreateTable","Elixir\\DB\\SQL\\MySQL","Elixir\/DB\/SQL\/MySQL\/CreateTable.html"," < CreateTable","",1],["Delete","Elixir\\DB\\SQL\\MySQL","Elixir\/DB\/SQL\/MySQL\/Delete.html"," < Delete","",1],["DropTable","Elixir\\DB\\SQL\\MySQL","Elixir\/DB\/SQL\/MySQL\/DropTable.html"," < DropTable","",1],["Insert","Elixir\\DB\\SQL\\MySQL","Elixir\/DB\/SQL\/MySQL\/Insert.html"," < Insert","",1],["Update","Elixir\\DB\\SQL\\MySQL","Elixir\/DB\/SQL\/MySQL\/Update.html"," < Update","",1],["SQLAbstract","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/SQLAbstract.html","","",1],["SQLFactory","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/SQLFactory.html","","",1],["AlterTable","Elixir\\DB\\SQL\\SQLite","Elixir\/DB\/SQL\/SQLite\/AlterTable.html"," < AlterTable","",1],["CreateTable","Elixir\\DB\\SQL\\SQLite","Elixir\/DB\/SQL\/SQLite\/CreateTable.html"," < CreateTable","",1],["Delete","Elixir\\DB\\SQL\\SQLite","Elixir\/DB\/SQL\/SQLite\/Delete.html"," < Delete","",1],["DropTable","Elixir\\DB\\SQL\\SQLite","Elixir\/DB\/SQL\/SQLite\/DropTable.html"," < DropTable","",1],["Insert","Elixir\\DB\\SQL\\SQLite","Elixir\/DB\/SQL\/SQLite\/Insert.html"," < Insert","",1],["Select","Elixir\\DB\\SQL\\SQLite","Elixir\/DB\/SQL\/SQLite\/Select.html"," < Select","",1],["Update","Elixir\\DB\\SQL\\SQLite","Elixir\/DB\/SQL\/SQLite\/Update.html"," < Update","",1],["Select","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/Select.html"," < SQLAbstract","",1],["Update","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/Update.html"," < SQLAbstract","",1],["WhereClause","Elixir\\DB\\SQL","Elixir\/DB\/SQL\/WhereClause.html","","",1],["Container","Elixir\\DI","Elixir\/DI\/Container.html"," < Dispatcher","",1],["ContainerEvent","Elixir\\DI","Elixir\/DI\/ContainerEvent.html"," < Event","",1],["ContainerInterface","Elixir\\DI","Elixir\/DI\/ContainerInterface.html","","",1],["ProviderInterface","Elixir\\DI","Elixir\/DI\/ProviderInterface.html","","",1],["Dispatcher","Elixir\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html","","",1],["DispatcherInterface","Elixir\\Dispatcher","Elixir\/Dispatcher\/DispatcherInterface.html","","",1],["Event","Elixir\\Dispatcher","Elixir\/Dispatcher\/Event.html","","",1],["SubscriberInterface","Elixir\\Dispatcher","Elixir\/Dispatcher\/SubscriberInterface.html","","",1],["App","Elixir\\Facade","Elixir\/Facade\/App.html"," < FacadeAbstract","",1],["Cache","Elixir\\Facade","Elixir\/Facade\/Cache.html"," < FacadeAbstract","",1],["Config","Elixir\\Facade","Elixir\/Facade\/Config.html"," < FacadeAbstract","",1],["DB","Elixir\\Facade","Elixir\/Facade\/DB.html"," < FacadeAbstract","",1],["DI","Elixir\\Facade","Elixir\/Facade\/DI.html","","",1],["FacadeAbstract","Elixir\\Facade","Elixir\/Facade\/FacadeAbstract.html","","",1],["Filter","Elixir\\Facade","Elixir\/Facade\/Filter.html"," < FacadeAbstract","",1],["Helper","Elixir\\Facade","Elixir\/Facade\/Helper.html"," < FacadeAbstract","",1],["Loader","Elixir\\Facade","Elixir\/Facade\/Loader.html"," < FacadeAbstract","",1],["Log","Elixir\\Facade","Elixir\/Facade\/Log.html"," < FacadeAbstract","",1],["Request","Elixir\\Facade","Elixir\/Facade\/Request.html"," < FacadeAbstract","",1],["Session","Elixir\\Facade","Elixir\/Facade\/Session.html"," < FacadeAbstract","",1],["Validator","Elixir\\Facade","Elixir\/Facade\/Validator.html"," < FacadeAbstract","",1],["View","Elixir\\Facade","Elixir\/Facade\/View.html"," < FacadeAbstract","",1],["Boolean","Elixir\\Filter","Elixir\/Filter\/Boolean.html"," < FilterAbstract","",1],["Callback","Elixir\\Filter","Elixir\/Filter\/Callback.html"," < FilterAbstract","",1],["Chain","Elixir\\Filter","Elixir\/Filter\/Chain.html"," < FilterAbstract","",1],["Crop","Elixir\\Filter","Elixir\/Filter\/Crop.html"," < FilterAbstract","",1],["Date","Elixir\\Filter","Elixir\/Filter\/Date.html"," < FilterAbstract","",1],["Duplicate","Elixir\\Filter","Elixir\/Filter\/Duplicate.html"," < Chain","",1],["Email","Elixir\\Filter","Elixir\/Filter\/Email.html"," < FilterAbstract","",1],["Enlarge","Elixir\\Filter","Elixir\/Filter\/Enlarge.html"," < FilterAbstract","",1],["Escaper","Elixir\\Filter","Elixir\/Filter\/Escaper.html"," < FilterAbstract","",1],["FilterAbstract","Elixir\\Filter","Elixir\/Filter\/FilterAbstract.html","","",1],["FilterInterface","Elixir\\Filter","Elixir\/Filter\/FilterInterface.html","","",1],["Float","Elixir\\Filter","Elixir\/Filter\/Float.html"," < FilterAbstract","",1],["Int","Elixir\\Filter","Elixir\/Filter\/Int.html"," < FilterAbstract","",1],["NbrFormat","Elixir\\Filter","Elixir\/Filter\/NbrFormat.html"," < FilterAbstract","",1],["Protect","Elixir\\Filter","Elixir\/Filter\/Protect.html"," < FilterAbstract","",1],["Rename","Elixir\\Filter","Elixir\/Filter\/Rename.html"," < FilterAbstract","",1],["Replace","Elixir\\Filter","Elixir\/Filter\/Replace.html"," < FilterAbstract","",1],["Resize","Elixir\\Filter","Elixir\/Filter\/Resize.html"," < FilterAbstract","",1],["Trim","Elixir\\Filter","Elixir\/Filter\/Trim.html"," < FilterAbstract","",1],["CSRF","Elixir\\Form\\Extension","Elixir\/Form\/Extension\/CSRF.html","","",1],["ExtensionInterface","Elixir\\Form\\Extension","Elixir\/Form\/Extension\/ExtensionInterface.html","","",1],["Reference","Elixir\\Form\\Extension","Elixir\/Form\/Extension\/Reference.html","","",1],["Button","Elixir\\Form\\Field","Elixir\/Form\/Field\/Button.html"," < FieldAbstract","",1],["CSRF","Elixir\\Form\\Field","Elixir\/Form\/Field\/CSRF.html"," < FieldAbstract","",1],["Checkbox","Elixir\\Form\\Field","Elixir\/Form\/Field\/Checkbox.html"," < MultipleAbstract","",1],["FieldAbstract","Elixir\\Form\\Field","Elixir\/Form\/Field\/FieldAbstract.html"," < Dispatcher","",1],["FieldEvent","Elixir\\Form\\Field","Elixir\/Form\/Field\/FieldEvent.html"," < Event","",1],["FieldInterface","Elixir\\Form\\Field","Elixir\/Form\/Field\/FieldInterface.html","","",1],["File","Elixir\\Form\\Field","Elixir\/Form\/Field\/File.html"," < FieldAbstract","",1],["FileInterface","Elixir\\Form\\Field","Elixir\/Form\/Field\/FileInterface.html","","",1],["Input","Elixir\\Form\\Field","Elixir\/Form\/Field\/Input.html"," < FieldAbstract","",1],["MultipleAbstract","Elixir\\Form\\Field","Elixir\/Form\/Field\/MultipleAbstract.html"," < FieldAbstract","",1],["MultipleInterface","Elixir\\Form\\Field","Elixir\/Form\/Field\/MultipleInterface.html","","",1],["Radio","Elixir\\Form\\Field","Elixir\/Form\/Field\/Radio.html"," < MultipleAbstract","",1],["Select","Elixir\\Form\\Field","Elixir\/Form\/Field\/Select.html"," < MultipleAbstract","",1],["Textarea","Elixir\\Form\\Field","Elixir\/Form\/Field\/Textarea.html"," < FieldAbstract","",1],["Form","Elixir\\Form","Elixir\/Form\/Form.html"," < Dispatcher","",1],["FormEvent","Elixir\\Form","Elixir\/Form\/FormEvent.html"," < Event","",1],["FormFactory","Elixir\\Form","Elixir\/Form\/FormFactory.html","","",1],["FormInterface","Elixir\\Form","Elixir\/Form\/FormInterface.html","","",1],["Utils","Elixir\\Form","Elixir\/Form\/Utils.html","","",1],["Cookie","Elixir\\HTTP","Elixir\/HTTP\/Cookie.html","","",1],["FileParameters","Elixir\\HTTP","Elixir\/HTTP\/FileParameters.html"," < Parameters","",1],["Headers","Elixir\\HTTP","Elixir\/HTTP\/Headers.html","","",1],["Parameters","Elixir\\HTTP","Elixir\/HTTP\/Parameters.html","","",1],["ParametersInterface","Elixir\\HTTP","Elixir\/HTTP\/ParametersInterface.html","","",1],["Request","Elixir\\HTTP","Elixir\/HTTP\/Request.html","","",1],["RequestFactory","Elixir\\HTTP","Elixir\/HTTP\/RequestFactory.html","","",1],["Response","Elixir\\HTTP","Elixir\/HTTP\/Response.html","","",1],["ResponseFactory","Elixir\\HTTP","Elixir\/HTTP\/ResponseFactory.html","","",1],["Sanitizer","Elixir\\HTTP","Elixir\/HTTP\/Sanitizer.html","","",1],["SessionParameters","Elixir\\HTTP","Elixir\/HTTP\/SessionParameters.html","","",1],["DB","Elixir\\HTTP\\Session\\Handler","Elixir\/HTTP\/Session\/Handler\/DB.html","","",1],["Session","Elixir\\HTTP\\Session","Elixir\/HTTP\/Session\/Session.html"," < Dispatcher","",1],["SessionEvent","Elixir\\HTTP\\Session","Elixir\/HTTP\/Session\/SessionEvent.html"," < Event","",1],["SessionInterface","Elixir\\HTTP\\Session","Elixir\/HTTP\/Session\/SessionInterface.html","","",1],["Uploader","Elixir\\HTTP","Elixir\/HTTP\/Uploader.html","","",1],["Action","Elixir\\Helper","Elixir\/Helper\/Action.html","","",1],["Form","Elixir\\Helper","Elixir\/Helper\/Form.html","","",1],["Forward","Elixir\\Helper","Elixir\/Helper\/Forward.html","","",1],["HelperInterface","Elixir\\Helper","Elixir\/Helper\/HelperInterface.html","","",1],["I18N","Elixir\\Helper","Elixir\/Helper\/I18N.html","","",1],["Locator","Elixir\\Helper","Elixir\/Helper\/Locator.html","","",1],["Pagination","Elixir\\Helper","Elixir\/Helper\/Pagination.html","","",1],["Partial","Elixir\\Helper","Elixir\/Helper\/Partial.html","","",1],["Renderer","Elixir\\Helper","Elixir\/Helper\/Renderer.html","","",1],["Security","Elixir\\Helper","Elixir\/Helper\/Security.html","","",1],["URL","Elixir\\Helper","Elixir\/Helper\/URL.html","","",1],["I18N","Elixir\\I18N","Elixir\/I18N\/I18N.html"," < Dispatcher","",1],["I18NEvent","Elixir\\I18N","Elixir\/I18N\/I18NEvent.html"," < Event","",1],["I18NInterface","Elixir\\I18N","Elixir\/I18N\/I18NInterface.html","","",1],["Arr","Elixir\\I18N\\Loader","Elixir\/I18N\/Loader\/Arr.html","","",1],["CSV","Elixir\\I18N\\Loader","Elixir\/I18N\/Loader\/CSV.html","","",1],["Gettext","Elixir\\I18N\\Loader","Elixir\/I18N\/Loader\/Gettext.html","","",1],["JSON","Elixir\\I18N\\Loader","Elixir\/I18N\/Loader\/JSON.html","","",1],["LoaderFactory","Elixir\\I18N\\Loader","Elixir\/I18N\/Loader\/LoaderFactory.html","","",1],["LoaderInterface","Elixir\\I18N\\Loader","Elixir\/I18N\/Loader\/LoaderInterface.html","","",1],["Locale","Elixir\\I18N","Elixir\/I18N\/Locale.html","","",1],["Plural","Elixir\\I18N","Elixir\/I18N\/Plural.html","","",1],["TextDomain","Elixir\\I18N","Elixir\/I18N\/TextDomain.html","","",1],["Arr","Elixir\\I18N\\Writer","Elixir\/I18N\/Writer\/Arr.html"," < WriterAbstract","",1],["WriterAbstract","Elixir\\I18N\\Writer","Elixir\/I18N\/Writer\/WriterAbstract.html","","",1],["WriterInterface","Elixir\\I18N\\Writer","Elixir\/I18N\/Writer\/WriterInterface.html","","",1],["Logger","Elixir\\Logging","Elixir\/Logging\/Logger.html"," < Dispatcher","",1],["LoggerEvent","Elixir\\Logging","Elixir\/Logging\/LoggerEvent.html"," < Event","",1],["LoggerInterface","Elixir\\Logging","Elixir\/Logging\/LoggerInterface.html","","",1],["File","Elixir\\Logging\\Writer","Elixir\/Logging\/Writer\/File.html"," < WriterAbstract","",1],["FirePHP","Elixir\\Logging\\Writer","Elixir\/Logging\/Writer\/FirePHP.html"," < WriterAbstract","",1],["WriterAbstract","Elixir\\Logging\\Writer","Elixir\/Logging\/Writer\/WriterAbstract.html","","",1],["WriterInterface","Elixir\\Logging\\Writer","Elixir\/Logging\/Writer\/WriterInterface.html","","",1],["Application","Elixir\\MVC","Elixir\/MVC\/Application.html"," < Dispatcher","",1],["ApplicationEvent","Elixir\\MVC","Elixir\/MVC\/ApplicationEvent.html"," < Event","",1],["ApplicationInterface","Elixir\\MVC","Elixir\/MVC\/ApplicationInterface.html","","",1],["ControllerAbstract","Elixir\\MVC\\Controller","Elixir\/MVC\/Controller\/ControllerAbstract.html","","",1],["ControllerInterface","Elixir\\MVC\\Controller","Elixir\/MVC\/Controller\/ControllerInterface.html","","",1],["ControllerResolver","Elixir\\MVC\\Controller","Elixir\/MVC\/Controller\/ControllerResolver.html","","",1],["ControllerResolverInterface","Elixir\\MVC\\Controller","Elixir\/MVC\/Controller\/ControllerResolverInterface.html","","",1],["Container","Elixir\\MVC\\Controller\\Helper","Elixir\/MVC\/Controller\/Helper\/Container.html","","",1],["ContextInterface","Elixir\\MVC\\Controller\\Helper","Elixir\/MVC\/Controller\/Helper\/ContextInterface.html","","",1],["RESTFulControllerAbstract","Elixir\\MVC\\Controller","Elixir\/MVC\/Controller\/RESTFulControllerAbstract.html"," < ControllerAbstract","",1],["ErrorException","Elixir\\MVC\\Exception","Elixir\/MVC\/Exception\/ErrorException.html"," < Exception","",1],["ForbiddenException","Elixir\\MVC\\Exception","Elixir\/MVC\/Exception\/ForbiddenException.html"," < Exception","",1],["NotFoundException","Elixir\\MVC\\Exception","Elixir\/MVC\/Exception\/NotFoundException.html"," < Exception","",1],["ModuleAbstract","Elixir\\MVC\\Module","Elixir\/MVC\/Module\/ModuleAbstract.html","","",1],["ModuleInterface","Elixir\\MVC\\Module","Elixir\/MVC\/Module\/ModuleInterface.html","","",1],["SelectedInterface","Elixir\\MVC\\Module","Elixir\/MVC\/Module\/SelectedInterface.html","","",1],["Item","Elixir\\Pagination","Elixir\/Pagination\/Item.html","","",1],["Pagination","Elixir\\Pagination","Elixir\/Pagination\/Pagination.html","","",1],["PaginationInterface","Elixir\\Pagination","Elixir\/Pagination\/PaginationInterface.html","","",1],["Elastic","Elixir\\Pagination\\Style","Elixir\/Pagination\/Style\/Elastic.html","","",1],["Jumping","Elixir\\Pagination\\Style","Elixir\/Pagination\/Style\/Jumping.html","","",1],["StyleInterface","Elixir\\Pagination\\Style","Elixir\/Pagination\/Style\/StyleInterface.html","","",1],["Collection","Elixir\\Routing","Elixir\/Routing\/Collection.html","","",1],["GeneratorInterface","Elixir\\Routing\\Generator","Elixir\/Routing\/Generator\/GeneratorInterface.html","","",1],["QueryGenerator","Elixir\\Routing\\Generator","Elixir\/Routing\/Generator\/QueryGenerator.html"," < URLGenerator","",1],["URLGenerator","Elixir\\Routing\\Generator","Elixir\/Routing\/Generator\/URLGenerator.html","","",1],["Arr","Elixir\\Routing\\Loader","Elixir\/Routing\/Loader\/Arr.html","","",1],["JSON","Elixir\\Routing\\Loader","Elixir\/Routing\/Loader\/JSON.html","","",1],["LoaderFactory","Elixir\\Routing\\Loader","Elixir\/Routing\/Loader\/LoaderFactory.html","","",1],["LoaderInterface","Elixir\\Routing\\Loader","Elixir\/Routing\/Loader\/LoaderInterface.html","","",1],["XML","Elixir\\Routing\\Loader","Elixir\/Routing\/Loader\/XML.html","","",1],["MatcherInterface","Elixir\\Routing\\Matcher","Elixir\/Routing\/Matcher\/MatcherInterface.html","","",1],["QueryMatcher","Elixir\\Routing\\Matcher","Elixir\/Routing\/Matcher\/QueryMatcher.html"," < URLMatcher","",1],["RouteMatch","Elixir\\Routing\\Matcher","Elixir\/Routing\/Matcher\/RouteMatch.html","","",1],["URLMatcher","Elixir\\Routing\\Matcher","Elixir\/Routing\/Matcher\/URLMatcher.html","","",1],["Route","Elixir\\Routing","Elixir\/Routing\/Route.html","","",1],["Router","Elixir\\Routing","Elixir\/Routing\/Router.html"," < Dispatcher","",1],["RouterEvent","Elixir\\Routing","Elixir\/Routing\/RouterEvent.html"," < Event","",1],["RouterInterface","Elixir\\Routing","Elixir\/Routing\/RouterInterface.html","","",1],["Arr","Elixir\\Routing\\Writer","Elixir\/Routing\/Writer\/Arr.html"," < WriterAbstract","",1],["WriterAbstract","Elixir\\Routing\\Writer","Elixir\/Routing\/Writer\/WriterAbstract.html","","",1],["WriterInterface","Elixir\\Routing\\Writer","Elixir\/Routing\/Writer\/WriterInterface.html","","",1],["AuthEvent","Elixir\\Security\\Authentification","Elixir\/Security\/Authentification\/AuthEvent.html"," < Event","",1],["AuthInterface","Elixir\\Security\\Authentification","Elixir\/Security\/Authentification\/AuthInterface.html","","",1],["Identity","Elixir\\Security\\Authentification","Elixir\/Security\/Authentification\/Identity.html"," < Dispatcher","",1],["Manager","Elixir\\Security\\Authentification","Elixir\/Security\/Authentification\/Manager.html"," < Dispatcher","",1],["MaskBuilder","Elixir\\Security\\Authentification","Elixir\/Security\/Authentification\/MaskBuilder.html","","",1],["Result","Elixir\\Security\\Authentification","Elixir\/Security\/Authentification\/Result.html","","",1],["Session","Elixir\\Security\\Authentification\\Storage","Elixir\/Security\/Authentification\/Storage\/Session.html","","",1],["StorageInterface","Elixir\\Security\\Authentification\\Storage","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html","","",1],["CSRF","Elixir\\Security","Elixir\/Security\/CSRF.html","","",1],["Crypt","Elixir\\Security","Elixir\/Security\/Crypt.html","","",1],["AccessControlAbstract","Elixir\\Security\\Firewall","Elixir\/Security\/Firewall\/AccessControlAbstract.html","","",1],["AccessControlInterface","Elixir\\Security\\Firewall","Elixir\/Security\/Firewall\/AccessControlInterface.html","","",1],["AccessForbidden","Elixir\\Security\\Firewall\\Behavior","Elixir\/Security\/Firewall\/Behavior\/AccessForbidden.html","","",1],["IdentityNotFound","Elixir\\Security\\Firewall\\Behavior","Elixir\/Security\/Firewall\/Behavior\/IdentityNotFound.html","","",1],["FirewallAbstract","Elixir\\Security\\Firewall","Elixir\/Security\/Firewall\/FirewallAbstract.html"," < Dispatcher","",1],["FirewallEvent","Elixir\\Security\\Firewall","Elixir\/Security\/Firewall\/FirewallEvent.html"," < Event","",1],["FirewallInterface","Elixir\\Security\\Firewall","Elixir\/Security\/Firewall\/FirewallInterface.html","","",1],["AccessControl","Elixir\\Security\\Firewall\\Identity","Elixir\/Security\/Firewall\/Identity\/AccessControl.html"," < AccessControlAbstract","",1],["Firewall","Elixir\\Security\\Firewall\\Identity","Elixir\/Security\/Firewall\/Identity\/Firewall.html"," < FirewallAbstract","",1],["Arr","Elixir\\Security\\Firewall\\Loader","Elixir\/Security\/Firewall\/Loader\/Arr.html","","",1],["JSON","Elixir\\Security\\Firewall\\Loader","Elixir\/Security\/Firewall\/Loader\/JSON.html","","",1],["LoaderFactory","Elixir\\Security\\Firewall\\Loader","Elixir\/Security\/Firewall\/Loader\/LoaderFactory.html","","",1],["LoaderInterface","Elixir\\Security\\Firewall\\Loader","Elixir\/Security\/Firewall\/Loader\/LoaderInterface.html","","",1],["XML","Elixir\\Security\\Firewall\\Loader","Elixir\/Security\/Firewall\/Loader\/XML.html","","",1],["AccessControl","Elixir\\Security\\Firewall\\RBAC","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html"," < AccessControlAbstract","",1],["Firewall","Elixir\\Security\\Firewall\\RBAC","Elixir\/Security\/Firewall\/RBAC\/Firewall.html"," < FirewallAbstract","",1],["Utils","Elixir\\Security\\Firewall","Elixir\/Security\/Firewall\/Utils.html","","",1],["Arr","Elixir\\Security\\Firewall\\Writer","Elixir\/Security\/Firewall\/Writer\/Arr.html"," < WriterAbstract","",1],["WriterAbstract","Elixir\\Security\\Firewall\\Writer","Elixir\/Security\/Firewall\/Writer\/WriterAbstract.html","","",1],["WriterInterface","Elixir\\Security\\Firewall\\Writer","Elixir\/Security\/Firewall\/Writer\/WriterInterface.html","","",1],["Hash","Elixir\\Security","Elixir\/Security\/Hash.html","","",1],["RBAC","Elixir\\Security\\RBAC","Elixir\/Security\/RBAC\/RBAC.html","","",1],["RBACInterface","Elixir\\Security\\RBAC","Elixir\/Security\/RBAC\/RBACInterface.html","","",1],["Role","Elixir\\Security\\RBAC","Elixir\/Security\/RBAC\/Role.html","","",1],["Tree","Elixir\\Tree","Elixir\/Tree\/Tree.html","","",1],["TreeInterface","Elixir\\Tree","Elixir\/Tree\/TreeInterface.html","","",1],["Arr","Elixir\\Util","Elixir\/Util\/Arr.html","","",1],["CSV","Elixir\\Util","Elixir\/Util\/CSV.html","","",1],["File","Elixir\\Util","Elixir\/Util\/File.html","","",1],["Image","Elixir\\Util","Elixir\/Util\/Image.html","","",1],["Str","Elixir\\Util","Elixir\/Util\/Str.html","","",1],["Boolean","Elixir\\Validator","Elixir\/Validator\/Boolean.html"," < ValidatorAbstract","",1],["CSRF","Elixir\\Validator","Elixir\/Validator\/CSRF.html"," < ValidatorAbstract","",1],["Callback","Elixir\\Validator","Elixir\/Validator\/Callback.html"," < ValidatorAbstract","",1],["Chain","Elixir\\Validator","Elixir\/Validator\/Chain.html"," < ValidatorAbstract","",1],["Date","Elixir\\Validator","Elixir\/Validator\/Date.html"," < ValidatorAbstract","",1],["Email","Elixir\\Validator","Elixir\/Validator\/Email.html"," < ValidatorAbstract","",1],["Equal","Elixir\\Validator","Elixir\/Validator\/Equal.html"," < ValidatorAbstract","",1],["Extension","Elixir\\Validator","Elixir\/Validator\/Extension.html"," < ValidatorAbstract","",1],["FileSize","Elixir\\Validator","Elixir\/Validator\/FileSize.html"," < ValidatorAbstract","",1],["Float","Elixir\\Validator","Elixir\/Validator\/Float.html"," < ValidatorAbstract","",1],["Format","Elixir\\Validator","Elixir\/Validator\/Format.html"," < ValidatorAbstract","",1],["IP","Elixir\\Validator","Elixir\/Validator\/IP.html"," < ValidatorAbstract","",1],["Int","Elixir\\Validator","Elixir\/Validator\/Int.html"," < ValidatorAbstract","",1],["Length","Elixir\\Validator","Elixir\/Validator\/Length.html"," < ValidatorAbstract","",1],["MimeType","Elixir\\Validator","Elixir\/Validator\/MimeType.html"," < ValidatorAbstract","",1],["NotEmpty","Elixir\\Validator","Elixir\/Validator\/NotEmpty.html"," < Regex","",1],["Range","Elixir\\Validator","Elixir\/Validator\/Range.html"," < ValidatorAbstract","",1],["Regex","Elixir\\Validator","Elixir\/Validator\/Regex.html"," < ValidatorAbstract","",1],["URL","Elixir\\Validator","Elixir\/Validator\/URL.html"," < ValidatorAbstract","",1],["ValidatorAbstract","Elixir\\Validator","Elixir\/Validator\/ValidatorAbstract.html","","",1],["ValidatorInterface","Elixir\\Validator","Elixir\/Validator\/ValidatorInterface.html","","",1],["Version","Elixir","Elixir\/Version.html","","",1],["DataAbstract","Elixir\\View","Elixir\/View\/DataAbstract.html","","",1],["EscaperInterface","Elixir\\View","Elixir\/View\/EscaperInterface.html","","",1],["GlobalInterface","Elixir\\View","Elixir\/View\/GlobalInterface.html","","",1],["HelperInterface","Elixir\\View","Elixir\/View\/HelperInterface.html","","",1],["Container","Elixir\\View\\Helper","Elixir\/View\/Helper\/Container.html","","",1],["ContextInterface","Elixir\\View\\Helper","Elixir\/View\/Helper\/ContextInterface.html","","",1],["Manager","Elixir\\View","Elixir\/View\/Manager.html"," < DataAbstract","",1],["BlockEvent","Elixir\\View\\PHP","Elixir\/View\/PHP\/BlockEvent.html"," < Event","",1],["Blocks","Elixir\\View\\PHP","Elixir\/View\/PHP\/Blocks.html"," < Dispatcher","",1],["PHP","Elixir\\View\\PHP","Elixir\/View\/PHP\/PHP.html"," < DataAbstract","",1],["Parser","Elixir\\View\\PHP","Elixir\/View\/PHP\/Parser.html","","",1],["File","Elixir\\View\\Storage","Elixir\/View\/Storage\/File.html","","",1],["StorageInterface","Elixir\\View\\Storage","Elixir\/View\/Storage\/StorageInterface.html","","",1],["Str","Elixir\\View\\Storage","Elixir\/View\/Storage\/Str.html","","",1],["ViewInterface","Elixir\\View","Elixir\/View\/ViewInterface.html","","",1],["APC::__construct","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method___construct","(string $pIdentifier)","",2],["APC::has","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method_has","(string $pKey)","",2],["APC::get","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["APC::set","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method_set","(string $pKey, mixed $pValue, integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pTTL)","",2],["APC::incremente","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method_incremente","(string $pKey, integer $pStep = 1)","",2],["APC::decremente","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method_decremente","(string $pKey, integer $pStep = 1)","",2],["APC::remove","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method_remove","(string $pKey)","",2],["APC::clear","Elixir\\Cache\\APC","Elixir\/Cache\/APC.html#method_clear","()","",2],["CacheAbstract::__construct","Elixir\\Cache\\CacheAbstract","Elixir\/Cache\/CacheAbstract.html#method___construct","(string $pIdentifier)","",2],["CacheAbstract::getIdentifier","Elixir\\Cache\\CacheAbstract","Elixir\/Cache\/CacheAbstract.html#method_getIdentifier","()","",2],["CacheAbstract::setEncoder","Elixir\\Cache\\CacheAbstract","Elixir\/Cache\/CacheAbstract.html#method_setEncoder","(<a href=\"Elixir\/Cache\/Encoder\/EncoderInterface.html\"><abbr title=\"Elixir\\Cache\\Encoder\\EncoderInterface\">EncoderInterface<\/abbr><\/a> $pValue)","",2],["CacheAbstract::getEncoder","Elixir\\Cache\\CacheAbstract","Elixir\/Cache\/CacheAbstract.html#method_getEncoder","()","",2],["CacheAbstract::convertTTL","Elixir\\Cache\\CacheAbstract","Elixir\/Cache\/CacheAbstract.html#method_convertTTL","(integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pTTL, integer $pDefault = 31556926)","",2],["CacheInterface::has","Elixir\\Cache\\CacheInterface","Elixir\/Cache\/CacheInterface.html#method_has","(string $pKey)","",2],["CacheInterface::get","Elixir\\Cache\\CacheInterface","Elixir\/Cache\/CacheInterface.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["CacheInterface::set","Elixir\\Cache\\CacheInterface","Elixir\/Cache\/CacheInterface.html#method_set","(string $pKey, mixed $pValue, integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pTTL)","",2],["CacheInterface::remove","Elixir\\Cache\\CacheInterface","Elixir\/Cache\/CacheInterface.html#method_remove","(string $pKey)","",2],["CacheInterface::clear","Elixir\\Cache\\CacheInterface","Elixir\/Cache\/CacheInterface.html#method_clear","()","",2],["EncoderInterface::encode","Elixir\\Cache\\Encoder\\EncoderInterface","Elixir\/Cache\/Encoder\/EncoderInterface.html#method_encode","(mixed $pValue)","",2],["EncoderInterface::decode","Elixir\\Cache\\Encoder\\EncoderInterface","Elixir\/Cache\/Encoder\/EncoderInterface.html#method_decode","(mixed $pValue)","",2],["JSON::encode","Elixir\\Cache\\Encoder\\JSON","Elixir\/Cache\/Encoder\/JSON.html#method_encode","(mixed $pValue)","",2],["JSON::decode","Elixir\\Cache\\Encoder\\JSON","Elixir\/Cache\/Encoder\/JSON.html#method_decode","(mixed $pValue)","",2],["Serialize::encode","Elixir\\Cache\\Encoder\\Serialize","Elixir\/Cache\/Encoder\/Serialize.html#method_encode","(mixed $pValue)","",2],["Serialize::decode","Elixir\\Cache\\Encoder\\Serialize","Elixir\/Cache\/Encoder\/Serialize.html#method_decode","(mixed $pValue)","",2],["File::__construct","Elixir\\Cache\\File","Elixir\/Cache\/File.html#method___construct","(string $pIdentifier, $pPath = &#039;application\/cache\/&#039;)","",2],["File::getEncoder","Elixir\\Cache\\File","Elixir\/Cache\/File.html#method_getEncoder","()","",2],["File::has","Elixir\\Cache\\File","Elixir\/Cache\/File.html#method_has","(string $pKey)","",2],["File::get","Elixir\\Cache\\File","Elixir\/Cache\/File.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["File::set","Elixir\\Cache\\File","Elixir\/Cache\/File.html#method_set","(string $pKey, mixed $pValue, integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pTTL)","",2],["File::remove","Elixir\\Cache\\File","Elixir\/Cache\/File.html#method_remove","(string $pKey)","",2],["File::clear","Elixir\\Cache\\File","Elixir\/Cache\/File.html#method_clear","()","",2],["Memcached::__construct","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method___construct","(string $pIdentifier)","",2],["Memcached::__destruct","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method___destruct","()","",2],["Memcached::has","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method_has","(string $pKey)","",2],["Memcached::get","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["Memcached::set","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method_set","(string $pKey, mixed $pValue, integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pTTL)","",2],["Memcached::incremente","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method_incremente","(string $pKey, integer $pStep = 1)","",2],["Memcached::decremente","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method_decremente","(string $pKey, integer $pStep = 1)","",2],["Memcached::remove","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method_remove","(string $pKey)","",2],["Memcached::clear","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method_clear","()","",2],["Memcached::__call","Elixir\\Cache\\Memcached","Elixir\/Cache\/Memcached.html#method___call","(string $pMethod, array $pArguments)","",2],["Loader::__construct","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method___construct","()","",2],["Loader::register","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_register","()","",2],["Loader::unregister","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_unregister","()","",2],["Loader::setCacheVersion","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_setCacheVersion","(string|<abbr title=\"Elixir\\ClassLoader\\numeric\">numeric<\/abbr>|null $pValue)","",2],["Loader::getCacheVersion","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_getCacheVersion","()","",2],["Loader::loadFromCache","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_loadFromCache","(<a href=\"Elixir\/Cache\/CacheInterface.html\"><abbr title=\"Elixir\\Cache\\CacheInterface\">CacheInterface<\/abbr><\/a>|<a href=\"Elixir\/HTTP\/Session\/SessionInterface.html\"><abbr title=\"Elixir\\HTTP\\Session\\SessionInterface\">SessionInterface<\/abbr><\/a> $pCache, string $pKey = self::DEFAULT_CACHE_KEY)","",2],["Loader::exportToCache","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_exportToCache","(<a href=\"Elixir\/Cache\/CacheInterface.html\"><abbr title=\"Elixir\\Cache\\CacheInterface\">CacheInterface<\/abbr><\/a>|<a href=\"Elixir\/HTTP\/Session\/SessionInterface.html\"><abbr title=\"Elixir\\HTTP\\Session\\SessionInterface\">SessionInterface<\/abbr><\/a> $pCache, string $pKey = self::DEFAULT_CACHE_KEY)","",2],["Loader::addIncludePath","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_addIncludePath","(string $pPath)","",2],["Loader::getIncludePaths","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_getIncludePaths","()","",2],["Loader::map","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_map","(string $pClassName, string $pPath, boolean $pOverride = true)","",2],["Loader::getClassMap","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_getClassMap","()","",2],["Loader::setClassMap","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_setClassMap","(array $pData)","",2],["Loader::addPrefix","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_addPrefix","(string $pPrefix, string $pPath, boolean $pOverride = true)","",2],["Loader::getPrefixs","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_getPrefixs","()","",2],["Loader::setPrefixs","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_setPrefixs","(array $pData)","",2],["Loader::addNamespace","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_addNamespace","(string $pNamespace, string $pPath, boolean $pOverride = true)","",2],["Loader::getNamespaces","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_getNamespaces","()","",2],["Loader::setNamespaces","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_setNamespaces","(array $pData)","",2],["Loader::hasAlias","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_hasAlias","(string $pAlias)","",2],["Loader::addAlias","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_addAlias","(string $pAlias, string $pClassName)","",2],["Loader::getClassAlias","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_getClassAlias","(string $pAlias)","",2],["Loader::loadClass","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_loadClass","(string $pClassName)","",2],["Loader::classExist","Elixir\\ClassLoader\\Loader","Elixir\/ClassLoader\/Loader.html#method_classExist","(string $pClassName)","",2],["LoaderInterface::register","Elixir\\ClassLoader\\LoaderInterface","Elixir\/ClassLoader\/LoaderInterface.html#method_register","()","",2],["LoaderInterface::unregister","Elixir\\ClassLoader\\LoaderInterface","Elixir\/ClassLoader\/LoaderInterface.html#method_unregister","()","",2],["LoaderInterface::classExist","Elixir\\ClassLoader\\LoaderInterface","Elixir\/ClassLoader\/LoaderInterface.html#method_classExist","(string $pClassName)","",2],["LoaderInterface::loadClass","Elixir\\ClassLoader\\LoaderInterface","Elixir\/ClassLoader\/LoaderInterface.html#method_loadClass","(string $pClassName)","",2],["Config::__construct","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method___construct","($pEnvironment = null, array $pParameters = array())","",2],["Config::load","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_load","(mixed $pConfig, array $pOptions = array())","",2],["Config::export","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_export","(<a href=\"Elixir\/Config\/Writer\/WriterInterface.html\"><abbr title=\"Elixir\\Config\\Writer\\WriterInterface\">WriterInterface<\/abbr><\/a> $pWriter, string $pFile)","",2],["Config::addProcessor","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_addProcessor","(<a href=\"Elixir\/Config\/Processor\/ProcessorInterface.html\"><abbr title=\"Elixir\\Config\\Processor\\ProcessorInterface\">ProcessorInterface<\/abbr><\/a> $pProcessor)","",2],["Config::getProcessors","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_getProcessors","()","",2],["Config::setProcessors","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_setProcessors","(array $pData)","",2],["Config::has","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_has","(mixed $pKey)","",2],["Config::get","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_get","(mixed $pKey, mixed $pDefault = null)","",2],["Config::set","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_set","(mixed $pKey, mixed $pValue)","",2],["Config::remove","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_remove","(mixed $pKey)","",2],["Config::gets","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_gets","()","",2],["Config::sets","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_sets","(array $pData)","",2],["Config::offsetExists","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_offsetExists","($pKey)","",2],["Config::offsetSet","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_offsetSet","($pKey, $pValue)","",2],["Config::offsetGet","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_offsetGet","($pKey)","",2],["Config::offsetUnset","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_offsetUnset","($pKey)","",2],["Config::rewind","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_rewind","()","",2],["Config::current","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_current","()","",2],["Config::key","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_key","()","",2],["Config::next","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_next","()","",2],["Config::valid","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_valid","()","",2],["Config::count","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_count","()","",2],["Config::__issset","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method___issset","($pKey)","",2],["Config::__get","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method___get","($pKey)","",2],["Config::__set","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method___set","($pKey, $pValue)","",2],["Config::__unset","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method___unset","($pKey)","",2],["Config::merge","Elixir\\Config\\Config","Elixir\/Config\/Config.html#method_merge","(<a href=\"Elixir\/Config\/ConfigInterface.html\"><abbr title=\"Elixir\\Config\\ConfigInterface\">ConfigInterface<\/abbr><\/a>|array $pData, boolean $pRecursive = false)","",2],["ConfigInterface::has","Elixir\\Config\\ConfigInterface","Elixir\/Config\/ConfigInterface.html#method_has","(mixed $pKey)","",2],["ConfigInterface::get","Elixir\\Config\\ConfigInterface","Elixir\/Config\/ConfigInterface.html#method_get","(mixed $pKey, mixed $pDefault = null)","",2],["ConfigInterface::set","Elixir\\Config\\ConfigInterface","Elixir\/Config\/ConfigInterface.html#method_set","(mixed $pKey, mixed $pValue)","",2],["ConfigInterface::remove","Elixir\\Config\\ConfigInterface","Elixir\/Config\/ConfigInterface.html#method_remove","(mixed $pKey)","",2],["ConfigInterface::gets","Elixir\\Config\\ConfigInterface","Elixir\/Config\/ConfigInterface.html#method_gets","()","",2],["ConfigInterface::sets","Elixir\\Config\\ConfigInterface","Elixir\/Config\/ConfigInterface.html#method_sets","(array $pData)","",2],["ConfigInterface::merge","Elixir\\Config\\ConfigInterface","Elixir\/Config\/ConfigInterface.html#method_merge","(<a href=\"Elixir\/Config\/ConfigInterface.html\"><abbr title=\"Elixir\\Config\\ConfigInterface\">ConfigInterface<\/abbr><\/a>|array $pData, boolean $pRecursive = false)","",2],["Arr::load","Elixir\\Config\\Loader\\Arr","Elixir\/Config\/Loader\/Arr.html#method_load","(mixed $pConfig, boolean $pRecursive = false)","",2],["INI::load","Elixir\\Config\\Loader\\INI","Elixir\/Config\/Loader\/INI.html#method_load","(mixed $pConfig, boolean $pRecursive = false)","",2],["JSON::load","Elixir\\Config\\Loader\\JSON","Elixir\/Config\/Loader\/JSON.html#method_load","(mixed $pConfig, boolean $pRecursive = false)","",2],["LoaderAbstract::__construct","Elixir\\Config\\Loader\\LoaderAbstract","Elixir\/Config\/Loader\/LoaderAbstract.html#method___construct","(string $pEnvironment = null, boolean $pStrict = false)","",2],["LoaderAbstract::getEnvironment","Elixir\\Config\\Loader\\LoaderAbstract","Elixir\/Config\/Loader\/LoaderAbstract.html#method_getEnvironment","()","",2],["LoaderAbstract::isStrict","Elixir\\Config\\Loader\\LoaderAbstract","Elixir\/Config\/Loader\/LoaderAbstract.html#method_isStrict","()","",2],["LoaderFactory::create","Elixir\\Config\\Loader\\LoaderFactory","Elixir\/Config\/Loader\/LoaderFactory.html#method_create","(mixed $pConfig, array $pOptions = array())","",2],["LoaderInterface::load","Elixir\\Config\\Loader\\LoaderInterface","Elixir\/Config\/Loader\/LoaderInterface.html#method_load","(mixed $pConfig, boolean $pRecursive = false)","",2],["XML::load","Elixir\\Config\\Loader\\XML","Elixir\/Config\/Loader\/XML.html#method_load","(mixed $pConfig, boolean $pRecursive = false)","",2],["Filter::__construct","Elixir\\Config\\Processor\\Filter","Elixir\/Config\/Processor\/Filter.html#method___construct","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a> $pFilter, array $pOptions = array())","",2],["Filter::process","Elixir\\Config\\Processor\\Filter","Elixir\/Config\/Processor\/Filter.html#method_process","(mixed $pValue)","",2],["ProcessorAbstract::processConfig","Elixir\\Config\\Processor\\ProcessorAbstract","Elixir\/Config\/Processor\/ProcessorAbstract.html#method_processConfig","(<a href=\"Elixir\/Config\/ConfigInterface.html\"><abbr title=\"Elixir\\Config\\ConfigInterface\">ConfigInterface<\/abbr><\/a> $pConfig)","",2],["ProcessorInterface::processConfig","Elixir\\Config\\Processor\\ProcessorInterface","Elixir\/Config\/Processor\/ProcessorInterface.html#method_processConfig","(<a href=\"Elixir\/Config\/ConfigInterface.html\"><abbr title=\"Elixir\\Config\\ConfigInterface\">ConfigInterface<\/abbr><\/a> $pConfig)","",2],["ProcessorInterface::process","Elixir\\Config\\Processor\\ProcessorInterface","Elixir\/Config\/Processor\/ProcessorInterface.html#method_process","(mixed $pValue)","",2],["Arr::write","Elixir\\Config\\Writer\\Arr","Elixir\/Config\/Writer\/Arr.html#method_write","()","",2],["Arr::export","Elixir\\Config\\Writer\\Arr","Elixir\/Config\/Writer\/Arr.html#method_export","(string $pFile)","",2],["WriterAbstract::__construct","Elixir\\Config\\Writer\\WriterAbstract","Elixir\/Config\/Writer\/WriterAbstract.html#method___construct","(<a href=\"Elixir\/Config\/ConfigInterface.html\"><abbr title=\"Elixir\\Config\\ConfigInterface\">ConfigInterface<\/abbr><\/a> $pConfig = null)","",2],["WriterAbstract::setConfig","Elixir\\Config\\Writer\\WriterAbstract","Elixir\/Config\/Writer\/WriterAbstract.html#method_setConfig","(<a href=\"Elixir\/Config\/ConfigInterface.html\"><abbr title=\"Elixir\\Config\\ConfigInterface\">ConfigInterface<\/abbr><\/a> $pValue)","",2],["WriterAbstract::getConfig","Elixir\\Config\\Writer\\WriterAbstract","Elixir\/Config\/Writer\/WriterAbstract.html#method_getConfig","()","",2],["WriterInterface::setConfig","Elixir\\Config\\Writer\\WriterInterface","Elixir\/Config\/Writer\/WriterInterface.html#method_setConfig","(<a href=\"Elixir\/Config\/ConfigInterface.html\"><abbr title=\"Elixir\\Config\\ConfigInterface\">ConfigInterface<\/abbr><\/a> $pValue)","",2],["WriterInterface::write","Elixir\\Config\\Writer\\WriterInterface","Elixir\/Config\/Writer\/WriterInterface.html#method_write","()","",2],["WriterInterface::export","Elixir\\Config\\Writer\\WriterInterface","Elixir\/Config\/Writer\/WriterInterface.html#method_export","(string $pFile)","",2],["DBAbstract::getDriver","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_getDriver","()","",2],["DBAbstract::createSelect","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_createSelect","(string $pTable = null)","",2],["DBAbstract::createInsert","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_createInsert","(string $pTable = null)","",2],["DBAbstract::createDelete","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_createDelete","(string $pTable = null)","",2],["DBAbstract::createUpdate","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_createUpdate","(string $pTable = null)","",2],["DBAbstract::createTable","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_createTable","(string $pTable = null)","",2],["DBAbstract::createAlterTable","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_createAlterTable","(string $pTable = null)","",2],["DBAbstract::createDropTable","Elixir\\DB\\DBAbstract","Elixir\/DB\/DBAbstract.html#method_createDropTable","(string $pTable = null)","",2],["DBEvent::__construct","Elixir\\DB\\DBEvent","Elixir\/DB\/DBEvent.html#method___construct","(string $pType, $pSQL = null, array $pValues = array(), $pTime)","",2],["DBEvent::getSQL","Elixir\\DB\\DBEvent","Elixir\/DB\/DBEvent.html#method_getSQL","()","",2],["DBEvent::getValues","Elixir\\DB\\DBEvent","Elixir\/DB\/DBEvent.html#method_getValues","()","",2],["DBEvent::getTime","Elixir\\DB\\DBEvent","Elixir\/DB\/DBEvent.html#method_getTime","()","",2],["DBFactory::create","Elixir\\DB\\DBFactory","Elixir\/DB\/DBFactory.html#method_create","(array $pConfig)","",2],["DBInterface::lastInsertId","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_lastInsertId","()","",2],["DBInterface::begin","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_begin","()","",2],["DBInterface::rollBack","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_rollBack","()","",2],["DBInterface::commit","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_commit","()","",2],["DBInterface::inTransaction","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_inTransaction","()","",2],["DBInterface::createSelect","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_createSelect","(string $pTable = null)","",2],["DBInterface::createInsert","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_createInsert","(string $pTable = null)","",2],["DBInterface::createDelete","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_createDelete","(string $pTable = null)","",2],["DBInterface::createUpdate","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_createUpdate","(string $pTable = null)","",2],["DBInterface::createTable","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_createTable","(string $pTable = null)","",2],["DBInterface::createAlterTable","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_createAlterTable","(string $pTable = null)","",2],["DBInterface::createDropTable","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_createDropTable","(string $pTable = null)","",2],["DBInterface::quote","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_quote","(mixed $pValue, integer $pType = null)","",2],["DBInterface::query","Elixir\\DB\\DBInterface","Elixir\/DB\/DBInterface.html#method_query","(<a href=\"Elixir\/DB\/SQL\/SQLAbstract.html\"><abbr title=\"Elixir\\DB\\SQL\\SQLAbstract\">SQLAbstract<\/abbr><\/a>|string $pSQL, array $pValues = array(), array $pOptions = array())","",2],["Collection::isCollection","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_isCollection","(mixed $pValue)","",2],["Collection::create","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_create","(array $pData = array(), boolean $pAutoCreated = false)","",2],["Collection::__construct","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method___construct","(array $pData = array(), boolean $pAutoCreated = false)","",2],["Collection::isAutoCreated","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_isAutoCreated","()","",2],["Collection::prepend","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_prepend","(mixed $pValue)","",2],["Collection::remove","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_remove","(mixed $pValue)","",2],["Collection::in","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_in","(mixed $pNeedle)","",2],["Collection::search","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_search","(mixed $pValue)","",2],["Collection::splice","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_splice","(integer $pOffset, integer $pLength, array $pReplacement = array())","",2],["Collection::shuffle","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_shuffle","()","",2],["Collection::reverse","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_reverse","()","",2],["Collection::shift","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_shift","()","",2],["Collection::pop","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_pop","()","",2],["Collection::export","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_export","()","",2],["Collection::merge","Elixir\\DB\\ORM\\Collection","Elixir\/DB\/ORM\/Collection.html#method_merge","(array|<a href=\"http:\/\/php.net\/ArrayObject\"><abbr title=\"ArrayObject\">ArrayObject<\/abbr><\/a> $pData)","",2],["EntityInterface::hydrate","Elixir\\DB\\ORM\\EntityInterface","Elixir\/DB\/ORM\/EntityInterface.html#method_hydrate","(array $pData, array $pOptions = array(&#039;raw&#039; =&gt; true))","",2],["EntityInterface::export","Elixir\\DB\\ORM\\EntityInterface","Elixir\/DB\/ORM\/EntityInterface.html#method_export","(array $pMembers = array(), array $pOmitMembers = array(), boolean $pRaw = false)","",2],["EntityInterface::has","Elixir\\DB\\ORM\\EntityInterface","Elixir\/DB\/ORM\/EntityInterface.html#method_has","(string $pKey)","",2],["EntityInterface::set","Elixir\\DB\\ORM\\EntityInterface","Elixir\/DB\/ORM\/EntityInterface.html#method_set","(string $pKey, mixed $pValue, boolean $pFilled = true)","",2],["EntityInterface::get","Elixir\\DB\\ORM\\EntityInterface","Elixir\/DB\/ORM\/EntityInterface.html#method_get","(string $pKey)","",2],["ModelAbstract::create","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_create","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pManager = null, array $pData = array())","",2],["ModelAbstract::columns","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_columns","(boolean $pWithPrefix = true, string $pAlias = null, string $pReference = null)","",2],["ModelAbstract::isCollection","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_isCollection","(mixed $pValue)","",2],["ModelAbstract::convertIfCollection","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_convertIfCollection","(mixed $pValue)","",2],["ModelAbstract::__construct","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method___construct","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pManager = null, array $pData = array())","",2],["ModelAbstract::setConnectionManager","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_setConnectionManager","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["ModelAbstract::getConnectionManager","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getConnectionManager","()","",2],["ModelAbstract::getConnection","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getConnection","(string $pKey = null)","",2],["ModelAbstract::getClassName","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getClassName","()","",2],["ModelAbstract::getTable","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getTable","()","",2],["ModelAbstract::getPrimaryKey","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getPrimaryKey","()","",2],["ModelAbstract::getPrimaryValue","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getPrimaryValue","()","",2],["ModelAbstract::getIgnoreValue","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getIgnoreValue","()","",2],["ModelAbstract::isAutoIncrement","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_isAutoIncrement","()","",2],["ModelAbstract::getColumnKeys","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getColumnKeys","()","",2],["ModelAbstract::getGuardedKeys","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getGuardedKeys","()","",2],["ModelAbstract::getRelatedKeys","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getRelatedKeys","()","",2],["ModelAbstract::getRelatedType","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getRelatedType","($pKey)","",2],["ModelAbstract::setState","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_setState","(string $pValue)","",2],["ModelAbstract::getState","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_getState","()","",2],["ModelAbstract::isReadOnly","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_isReadOnly","()","",2],["ModelAbstract::isFillable","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_isFillable","()","",2],["ModelAbstract::isGuarded","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_isGuarded","()","",2],["ModelAbstract::exist","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_exist","()","",2],["ModelAbstract::isFilled","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_isFilled","(string $pKey)","",2],["ModelAbstract::unfilledIfIsIgnoreValue","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_unfilledIfIsIgnoreValue","()","",2],["ModelAbstract::has","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_has","(string $pKey)","",2],["ModelAbstract::set","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_set","(string $pKey, mixed $pValue, boolean $pFilled = true)","",2],["ModelAbstract::get","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_get","(string $pKey)","",2],["ModelAbstract::sync","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_sync","()","",2],["ModelAbstract::save","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_save","()","",2],["ModelAbstract::insert","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_insert","()","",2],["ModelAbstract::update","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_update","(array $pMembers = array(), array $pOmitMembers = array())","",2],["ModelAbstract::delete","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_delete","()","",2],["ModelAbstract::select","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_select","(string $pAlias = null)","",2],["ModelAbstract::hydrate","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_hydrate","(array $pData, array $pOptions = array(&#039;raw&#039; =&gt; true))","",2],["ModelAbstract::export","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method_export","(array $pMembers = array(), array $pOmitMembers = array(), boolean $pRaw = true)","",2],["ModelAbstract::__isset","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method___isset","(string $pKey)","",2],["ModelAbstract::__get","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method___get","(string $pKey)","",2],["ModelAbstract::__set","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method___set","(string $pKey, mixed $pValue)","",2],["ModelAbstract::__unset","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method___unset","(string $pKey)","",2],["ModelAbstract::__toString","Elixir\\DB\\ORM\\ModelAbstract","Elixir\/DB\/ORM\/ModelAbstract.html#method___toString","()","",2],["ModelFactory::create","Elixir\\DB\\ORM\\ModelFactory","Elixir\/DB\/ORM\/ModelFactory.html#method_create","(array $pData, array $pOptions = array(&#039;raw&#039; =&gt; true, &#039;sync&#039; =&gt; true), <a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pManager = null)","",2],["BelongsTo::__construct","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method___construct","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pRepository, string|<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pTarget, string $pForeignKey, string $pOtherKey = null, <a href=\"Elixir\/DB\/ORM\/Relation\/Pivot.html\"><abbr title=\"Elixir\\DB\\ORM\\Relation\\Pivot\">Pivot<\/abbr><\/a> $pPivot = null)","",2],["BelongsTo::getType","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getType","()","",2],["BelongsTo::getRepository","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getRepository","()","",2],["BelongsTo::getTarget","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getTarget","()","",2],["BelongsTo::getForeignKey","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getForeignKey","()","",2],["BelongsTo::getOtherKey","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getOtherKey","()","",2],["BelongsTo::withPivot","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_withPivot","(<a href=\"Elixir\/DB\/ORM\/Relation\/Pivot.html\"><abbr title=\"Elixir\\DB\\ORM\\Relation\\Pivot\">Pivot<\/abbr><\/a> $pPivot)","",2],["BelongsTo::getPivot","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getPivot","()","",2],["BelongsTo::addCriterion","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_addCriterion","(<abbr title=\"Elixir\\DB\\ORM\\Relation\\callable\">callable<\/abbr> $pCriterion)","",2],["BelongsTo::getCriterions","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getCriterions","()","",2],["BelongsTo::setRelated","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_setRelated","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a>|<a href=\"Elixir\/DB\/ORM\/Collection.html\"><abbr title=\"Elixir\\DB\\ORM\\Collection\">Collection<\/abbr><\/a>|null $pValue, boolean $pFilled = true)","",2],["BelongsTo::getRelated","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_getRelated","()","",2],["BelongsTo::setFilled","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_setFilled","(boolean $pValue)","",2],["BelongsTo::isFilled","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_isFilled","()","",2],["BelongsTo::load","Elixir\\DB\\ORM\\Relation\\BelongsTo","Elixir\/DB\/ORM\/Relation\/BelongsTo.html#method_load","()","",2],["HasMany::__construct","Elixir\\DB\\ORM\\Relation\\HasMany","Elixir\/DB\/ORM\/Relation\/HasMany.html#method___construct","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pRepository, string|<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pTarget, string $pForeignKey, string $pOtherKey = null, <a href=\"Elixir\/DB\/ORM\/Relation\/Pivot.html\"><abbr title=\"Elixir\\DB\\ORM\\Relation\\Pivot\">Pivot<\/abbr><\/a> $pPivot = null)","",2],["HasOne::__construct","Elixir\\DB\\ORM\\Relation\\HasOne","Elixir\/DB\/ORM\/Relation\/HasOne.html#method___construct","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pRepository, string|<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pTarget, string $pForeignKey, string $pOtherKey = null, <a href=\"Elixir\/DB\/ORM\/Relation\/Pivot.html\"><abbr title=\"Elixir\\DB\\ORM\\Relation\\Pivot\">Pivot<\/abbr><\/a> $pPivot = null)","",2],["HasOneOrMany::__construct","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method___construct","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pRepository, string|<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pTarget, string $pForeignKey, string $pOtherKey = null, <a href=\"Elixir\/DB\/ORM\/Relation\/Pivot.html\"><abbr title=\"Elixir\\DB\\ORM\\Relation\\Pivot\">Pivot<\/abbr><\/a> $pPivot = null, string $pType = self::HAS_ONE)","",2],["HasOneOrMany::getType","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getType","()","",2],["HasOneOrMany::getRepository","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getRepository","()","",2],["HasOneOrMany::getTarget","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getTarget","()","",2],["HasOneOrMany::getForeignKey","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getForeignKey","()","",2],["HasOneOrMany::getOtherKey","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getOtherKey","()","",2],["HasOneOrMany::withPivot","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_withPivot","(<a href=\"Elixir\/DB\/ORM\/Relation\/Pivot.html\"><abbr title=\"Elixir\\DB\\ORM\\Relation\\Pivot\">Pivot<\/abbr><\/a> $pPivot)","",2],["HasOneOrMany::getPivot","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getPivot","()","",2],["HasOneOrMany::addCriterion","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_addCriterion","(<abbr title=\"Elixir\\DB\\ORM\\Relation\\callable\">callable<\/abbr> $pCriterion)","",2],["HasOneOrMany::getCriterions","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getCriterions","()","",2],["HasOneOrMany::setRelated","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_setRelated","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a>|<a href=\"Elixir\/DB\/ORM\/Collection.html\"><abbr title=\"Elixir\\DB\\ORM\\Collection\">Collection<\/abbr><\/a>|null $pValue, boolean $pFilled = true)","",2],["HasOneOrMany::getRelated","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_getRelated","()","",2],["HasOneOrMany::setFilled","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_setFilled","(boolean $pValue)","",2],["HasOneOrMany::isFilled","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_isFilled","()","",2],["HasOneOrMany::load","Elixir\\DB\\ORM\\Relation\\HasOneOrMany","Elixir\/DB\/ORM\/Relation\/HasOneOrMany.html#method_load","()","",2],["Pivot::__construct","Elixir\\DB\\ORM\\Relation\\Pivot","Elixir\/DB\/ORM\/Relation\/Pivot.html#method___construct","(string $pPivot, string $pForeignKey, string $pOtherKey)","",2],["Pivot::getPivot","Elixir\\DB\\ORM\\Relation\\Pivot","Elixir\/DB\/ORM\/Relation\/Pivot.html#method_getPivot","()","",2],["Pivot::getForeignKey","Elixir\\DB\\ORM\\Relation\\Pivot","Elixir\/DB\/ORM\/Relation\/Pivot.html#method_getForeignKey","()","",2],["Pivot::getOtherKey","Elixir\\DB\\ORM\\Relation\\Pivot","Elixir\/DB\/ORM\/Relation\/Pivot.html#method_getOtherKey","()","",2],["Pivot::addCriterion","Elixir\\DB\\ORM\\Relation\\Pivot","Elixir\/DB\/ORM\/Relation\/Pivot.html#method_addCriterion","(<abbr title=\"Elixir\\DB\\ORM\\Relation\\callable\">callable<\/abbr> $pCriterion)","",2],["Pivot::getCriterions","Elixir\\DB\\ORM\\Relation\\Pivot","Elixir\/DB\/ORM\/Relation\/Pivot.html#method_getCriterions","()","",2],["Pivot::join","Elixir\\DB\\ORM\\Relation\\Pivot","Elixir\/DB\/ORM\/Relation\/Pivot.html#method_join","(<a href=\"Elixir\/DB\/ORM\/Relation\/RelationInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\Relation\\RelationInterface\">RelationInterface<\/abbr><\/a> $pRelation, <a href=\"Elixir\/DB\/ORM\/Select.html\"><abbr title=\"Elixir\\DB\\ORM\\Select\">Select<\/abbr><\/a> $pSelect)","",2],["Relation::__construct","Elixir\\DB\\ORM\\Relation\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html#method___construct","(<abbr title=\"Elixir\\DB\\ORM\\Relation\\callable\">callable<\/abbr> $pCallback)","",2],["Relation::getType","Elixir\\DB\\ORM\\Relation\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html#method_getType","()","",2],["Relation::setRelated","Elixir\\DB\\ORM\\Relation\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html#method_setRelated","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a>|<a href=\"Elixir\/DB\/ORM\/Collection.html\"><abbr title=\"Elixir\\DB\\ORM\\Collection\">Collection<\/abbr><\/a>|null $pValue, boolean $pFilled = true)","",2],["Relation::getRelated","Elixir\\DB\\ORM\\Relation\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html#method_getRelated","()","",2],["Relation::setFilled","Elixir\\DB\\ORM\\Relation\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html#method_setFilled","(boolean $pValue)","",2],["Relation::isFilled","Elixir\\DB\\ORM\\Relation\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html#method_isFilled","()","",2],["Relation::load","Elixir\\DB\\ORM\\Relation\\Relation","Elixir\/DB\/ORM\/Relation\/Relation.html#method_load","()","",2],["RelationInterface::getType","Elixir\\DB\\ORM\\Relation\\RelationInterface","Elixir\/DB\/ORM\/Relation\/RelationInterface.html#method_getType","()","",2],["RelationInterface::setRelated","Elixir\\DB\\ORM\\Relation\\RelationInterface","Elixir\/DB\/ORM\/Relation\/RelationInterface.html#method_setRelated","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a>|<a href=\"Elixir\/DB\/ORM\/Collection.html\"><abbr title=\"Elixir\\DB\\ORM\\Collection\">Collection<\/abbr><\/a>|null $pValue, boolean $pFilled = true)","",2],["RelationInterface::getRelated","Elixir\\DB\\ORM\\Relation\\RelationInterface","Elixir\/DB\/ORM\/Relation\/RelationInterface.html#method_getRelated","()","",2],["RelationInterface::setFilled","Elixir\\DB\\ORM\\Relation\\RelationInterface","Elixir\/DB\/ORM\/Relation\/RelationInterface.html#method_setFilled","(boolean $pValue)","",2],["RelationInterface::isFilled","Elixir\\DB\\ORM\\Relation\\RelationInterface","Elixir\/DB\/ORM\/Relation\/RelationInterface.html#method_isFilled","()","",2],["RelationInterface::load","Elixir\\DB\\ORM\\Relation\\RelationInterface","Elixir\/DB\/ORM\/Relation\/RelationInterface.html#method_load","()","",2],["RepositoryInterface::setConnectionManager","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_setConnectionManager","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["RepositoryInterface::getConnectionManager","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_getConnectionManager","()","",2],["RepositoryInterface::getConnection","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_getConnection","(string $pKey = null)","",2],["RepositoryInterface::getTable","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_getTable","()","",2],["RepositoryInterface::getPrimaryKey","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_getPrimaryKey","()","",2],["RepositoryInterface::getPrimaryValue","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_getPrimaryValue","()","",2],["RepositoryInterface::select","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_select","(string $pAlias = null)","",2],["RepositoryInterface::save","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_save","()","",2],["RepositoryInterface::insert","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_insert","()","",2],["RepositoryInterface::update","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_update","(array $pMembers = array(), array $pOmitMembers = array())","",2],["RepositoryInterface::delete","Elixir\\DB\\ORM\\RepositoryInterface","Elixir\/DB\/ORM\/RepositoryInterface.html#method_delete","()","",2],["Select::__construct","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method___construct","(<a href=\"Elixir\/DB\/ORM\/RepositoryInterface.html\"><abbr title=\"Elixir\\DB\\ORM\\RepositoryInterface\">RepositoryInterface<\/abbr><\/a> $pRepository, string $pAlias = null)","",2],["Select::combine","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_combine","(array $pSQLs, string $pType = SQLAbstract::COMBINE_UNION)","",2],["Select::current","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_current","()","",2],["Select::primary","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_primary","(integer|array $pId)","",2],["Select::scope","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_scope","(string $pMethod)","",2],["Select::load","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_load","(string $pMethod)","",2],["Select::reset","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_reset","($pPart)","",2],["Select::has","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_has","()","",2],["Select::count","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_count","()","",2],["Select::raw","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_raw","()","",2],["Select::one","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_one","()","",2],["Select::all","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method_all","()","",2],["Select::__call","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method___call","(string $pMethod, array $pArguments)","",2],["Select::__toString","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method___toString","()","",2],["Select::__clone","Elixir\\DB\\ORM\\Select","Elixir\/DB\/ORM\/Select.html#method___clone","()","",2],["PDO::__construct","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method___construct","(string $pDNS, string $pUsername = null, string $pPassword = null, array $pOptions = array())","",2],["PDO::__destruct","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method___destruct","()","",2],["PDO::useAuthorizeMultipleTransactions","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_useAuthorizeMultipleTransactions","(boolean $pValue)","",2],["PDO::isAuthorizeMultipleTransactions","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_isAuthorizeMultipleTransactions","()","",2],["PDO::getDriver","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_getDriver","()","",2],["PDO::begin","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_begin","()","",2],["PDO::rollBack","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_rollBack","()","",2],["PDO::commit","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_commit","()","",2],["PDO::inTransaction","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_inTransaction","()","",2],["PDO::quote","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_quote","(mixed $pValue, integer $pType = null)","",2],["PDO::exec","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_exec","(<a href=\"Elixir\/DB\/SQL\/SQLAbstract.html\"><abbr title=\"Elixir\\DB\\SQL\\SQLAbstract\">SQLAbstract<\/abbr><\/a>|string $pSQL)","",2],["PDO::query","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_query","(<a href=\"Elixir\/DB\/SQL\/SQLAbstract.html\"><abbr title=\"Elixir\\DB\\SQL\\SQLAbstract\">SQLAbstract<\/abbr><\/a>|string $pSQL, array $pValues = array(), array $pOptions = array())","",2],["PDO::lastInsertId","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method_lastInsertId","()","",2],["PDO::__call","Elixir\\DB\\PDO","Elixir\/DB\/PDO.html#method___call","(string $pMethod, array $pArguments)","",2],["PDO::fetch","Elixir\\DB\\Result\\PDO","Elixir\/DB\/Result\/PDO.html#method_fetch","(string $pFetchStyle = self::FETCH_DEFAULT)","",2],["PDO::fetchAll","Elixir\\DB\\Result\\PDO","Elixir\/DB\/Result\/PDO.html#method_fetchAll","(string $pFetchStyle = self::FETCH_ASSOC)","",2],["PDO::fetchColumn","Elixir\\DB\\Result\\PDO","Elixir\/DB\/Result\/PDO.html#method_fetchColumn","(integer $pColumn)","",2],["PDO::fetchObject","Elixir\\DB\\Result\\PDO","Elixir\/DB\/Result\/PDO.html#method_fetchObject","(string $pClassName = &#039;stdClass&#039;, array $pArgs = array())","",2],["PDO::fetchAssoc","Elixir\\DB\\Result\\PDO","Elixir\/DB\/Result\/PDO.html#method_fetchAssoc","()","",2],["PDO::rowCount","Elixir\\DB\\Result\\PDO","Elixir\/DB\/Result\/PDO.html#method_rowCount","()","",2],["PDO::__call","Elixir\\DB\\Result\\PDO","Elixir\/DB\/Result\/PDO.html#method___call","(string $pMethod, array $pArguments)","",2],["SetAbstract::__construct","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method___construct","(mixed $pResource)","",2],["SetAbstract::getResource","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method_getResource","()","",2],["SetAbstract::fetch","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method_fetch","(string $pFetchStyle = self::FETCH_DEFAULT)","",2],["SetAbstract::fetchAll","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method_fetchAll","(string $pFetchStyle = self::FETCH_ASSOC)","",2],["SetAbstract::fetchColumn","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method_fetchColumn","(integer $pColumn)","",2],["SetAbstract::fetchObject","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method_fetchObject","(string $pClassName = &#039;stdClass&#039;, array $pArgs = array())","",2],["SetAbstract::fetchAssoc","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method_fetchAssoc","()","",2],["SetAbstract::rowCount","Elixir\\DB\\Result\\SetAbstract","Elixir\/DB\/Result\/SetAbstract.html#method_rowCount","()","",2],["AlterTable::__construct","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method___construct","(string $pTable = null)","",2],["AlterTable::table","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_table","(string $pTable)","",2],["AlterTable::rename","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_rename","(string $pTable)","",2],["AlterTable::addColumn","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_addColumn","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["AlterTable::modifyColumn","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_modifyColumn","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["AlterTable::renameColumn","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_renameColumn","($pOldColumn, $pNewColumn)","",2],["AlterTable::dropColumn","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_dropColumn","(string|<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["AlterTable::addConstraint","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_addConstraint","(<a href=\"Elixir\/DB\/SQL\/Constraint.html\"><abbr title=\"Elixir\\DB\\SQL\\Constraint\">Constraint<\/abbr><\/a> $pConstraint)","",2],["AlterTable::dropConstraint","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_dropConstraint","(<a href=\"Elixir\/DB\/SQL\/Constraint.html\"><abbr title=\"Elixir\\DB\\SQL\\Constraint\">Constraint<\/abbr><\/a> $pConstraint = null, string $pType = null)","",2],["AlterTable::reset","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_reset","(string $pPart)","",2],["AlterTable::render","Elixir\\DB\\SQL\\AlterTable","Elixir\/DB\/SQL\/AlterTable.html#method_render","()","",2],["Column::__construct","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method___construct","(string $pName = null, string $pType = null)","",2],["Column::setName","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setName","(string $pValue)","",2],["Column::getName","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_getName","()","",2],["Column::setType","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setType","(string $pValue)","",2],["Column::getType","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_getType","()","",2],["Column::setValue","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setValue","(mixed $pValue)","",2],["Column::getValue","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_getValue","()","",2],["Column::setDefault","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setDefault","(mixed $pValue)","",2],["Column::getDefault","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_getDefault","()","",2],["Column::setCollating","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setCollating","(string $pValue)","",2],["Column::getCollating","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_getCollating","()","",2],["Column::setAttribute","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setAttribute","(string $pValue)","",2],["Column::getAttribute","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_getAttribute","()","",2],["Column::setNullable","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setNullable","(boolean $pValue)","",2],["Column::isNullable","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_isNullable","()","",2],["Column::setAutoIncrement","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setAutoIncrement","(boolean $pValue)","",2],["Column::isAutoIncrement","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_isAutoIncrement","()","",2],["Column::setComment","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_setComment","(string $pValue)","",2],["Column::getComment","Elixir\\DB\\SQL\\Column","Elixir\/DB\/SQL\/Column.html#method_getComment","()","",2],["ColumnFactory::boolean","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_boolean","(string $pName, boolean $pDefault = false)","",2],["ColumnFactory::tinyInt","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_tinyInt","(string $pName, integer $pLength = 4, boolean $pAttribute = Column::UNSIGNED, boolean $pAutoIncrement = false)","",2],["ColumnFactory::smallInt","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_smallInt","(string $pName, integer $pLength = 6, boolean $pAttribute = Column::UNSIGNED, boolean $pAutoIncrement = false)","",2],["ColumnFactory::mediumInt","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_mediumInt","(string $pName, integer $pLength = 9, boolean $pAttribute = Column::UNSIGNED, boolean $pAutoIncrement = false)","",2],["ColumnFactory::int","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_int","(string $pName, integer $pLength = 11, boolean $pAttribute = Column::UNSIGNED, boolean $pAutoIncrement = false)","",2],["ColumnFactory::bigInt","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_bigInt","(string $pName, integer $pLength = 20, boolean $pAttribute = Column::UNSIGNED, boolean $pAutoIncrement = false)","",2],["ColumnFactory::float","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_float","(string $pName, integer $pLength = 8, integer $pDecimal = 2, boolean $pNullable = false)","",2],["ColumnFactory::double","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_double","(string $pName, integer $pLength = 8, integer $pDecimal = 2, boolean $pNullable = false)","",2],["ColumnFactory::date","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_date","($pName, $pNullable = false)","",2],["ColumnFactory::dateTime","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_dateTime","(string $pName, boolean $pNullable = false)","",2],["ColumnFactory::timestamp","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_timestamp","(string $pName, string $pDefault = Column::CURRENT_TIMESTAMP, string $pAttribute = Column::UPDATE_CURRENT_TIMESTAMP, boolean $pNullable = false)","",2],["ColumnFactory::char","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_char","(string $pName, integer $pLength = 255, boolean $pNullable = false)","",2],["ColumnFactory::varchar","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_varchar","(string $pName, integer $pLength = 255, boolean $pNullable = false)","",2],["ColumnFactory::text","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_text","(string $pName, boolean $pNullable = false)","",2],["ColumnFactory::binary","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_binary","(string $pName, boolean $pNullable = false)","",2],["ColumnFactory::blob","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_blob","(string $pName, boolean $pNullable = false)","",2],["ColumnFactory::set","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_set","(string $pName, array $pValues, string $pDefault = null)","",2],["ColumnFactory::enum","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_enum","(string $pName, array $pValues, string $pDefault = null)","",2],["ColumnFactory::create","Elixir\\DB\\SQL\\ColumnFactory","Elixir\/DB\/SQL\/ColumnFactory.html#method_create","(string $pName, array $pDefinition)","",2],["Constraint::__construct","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method___construct","(string|array $pColumns = null, string $pType = null)","",2],["Constraint::setType","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_setType","(string $pValue)","",2],["Constraint::getType","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_getType","()","",2],["Constraint::setName","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_setName","(string $pValue)","",2],["Constraint::getName","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_getName","()","",2],["Constraint::setColumns","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_setColumns","(array $pValue)","",2],["Constraint::addColumn","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_addColumn","(string|<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["Constraint::getColumns","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_getColumns","()","",2],["Constraint::setReferenceTable","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_setReferenceTable","(string $pValue)","",2],["Constraint::getReferenceTable","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_getReferenceTable","()","",2],["Constraint::setReferenceColumn","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_setReferenceColumn","(string $pValue)","",2],["Constraint::getReferenceColumn","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_getReferenceColumn","()","",2],["Constraint::setOnDeleteRule","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_setOnDeleteRule","(string $pValue)","",2],["Constraint::getOnDeleteRule","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_getOnDeleteRule","()","",2],["Constraint::setOnUpdateRule","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_setOnUpdateRule","(string $pValue)","",2],["Constraint::getOnUpdateRule","Elixir\\DB\\SQL\\Constraint","Elixir\/DB\/SQL\/Constraint.html#method_getOnUpdateRule","()","",2],["ConstraintFactory::index","Elixir\\DB\\SQL\\ConstraintFactory","Elixir\/DB\/SQL\/ConstraintFactory.html#method_index","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a>|string|array $pColumns)","",2],["ConstraintFactory::primary","Elixir\\DB\\SQL\\ConstraintFactory","Elixir\/DB\/SQL\/ConstraintFactory.html#method_primary","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a>|string|array $pColumns)","",2],["ConstraintFactory::unique","Elixir\\DB\\SQL\\ConstraintFactory","Elixir\/DB\/SQL\/ConstraintFactory.html#method_unique","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a>|string|array $pColumns)","",2],["ConstraintFactory::fullText","Elixir\\DB\\SQL\\ConstraintFactory","Elixir\/DB\/SQL\/ConstraintFactory.html#method_fullText","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a>|string|array $pColumns)","",2],["ConstraintFactory::foreign","Elixir\\DB\\SQL\\ConstraintFactory","Elixir\/DB\/SQL\/ConstraintFactory.html#method_foreign","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a>|string $pColumn, string $pReferenceTable, string $pReferenceColumn, string $pName = null, string $pOnDeleteRule = null, string $pOnUpdateRule = null)","",2],["ConstraintFactory::create","Elixir\\DB\\SQL\\ConstraintFactory","Elixir\/DB\/SQL\/ConstraintFactory.html#method_create","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a>|string|array $pColumns, array $pDefinition)","",2],["CreateTable::__construct","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method___construct","(string $pTable = null)","",2],["CreateTable::table","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method_table","(string $pTable)","",2],["CreateTable::temporary","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method_temporary","(boolean $pValue)","",2],["CreateTable::column","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method_column","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["CreateTable::constraint","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method_constraint","(<a href=\"Elixir\/DB\/SQL\/Constraint.html\"><abbr title=\"Elixir\\DB\\SQL\\Constraint\">Constraint<\/abbr><\/a> $pConstraint)","",2],["CreateTable::option","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method_option","($pOption, $pValue = null)","",2],["CreateTable::reset","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method_reset","(string $pPart)","",2],["CreateTable::render","Elixir\\DB\\SQL\\CreateTable","Elixir\/DB\/SQL\/CreateTable.html#method_render","()","",2],["Delete::__construct","Elixir\\DB\\SQL\\Delete","Elixir\/DB\/SQL\/Delete.html#method___construct","(string $pTable = null)","",2],["Delete::table","Elixir\\DB\\SQL\\Delete","Elixir\/DB\/SQL\/Delete.html#method_table","(string $pTable)","",2],["Delete::where","Elixir\\DB\\SQL\\Delete","Elixir\/DB\/SQL\/Delete.html#method_where","(mixed $pCond, mixed $pValue = null)","",2],["Delete::orWhere","Elixir\\DB\\SQL\\Delete","Elixir\/DB\/SQL\/Delete.html#method_orWhere","(mixed $pCond, mixed $pValue = null)","",2],["Delete::reset","Elixir\\DB\\SQL\\Delete","Elixir\/DB\/SQL\/Delete.html#method_reset","(string $pPart)","",2],["Delete::render","Elixir\\DB\\SQL\\Delete","Elixir\/DB\/SQL\/Delete.html#method_render","()","",2],["DropTable::__construct","Elixir\\DB\\SQL\\DropTable","Elixir\/DB\/SQL\/DropTable.html#method___construct","(string $pTable = null)","",2],["DropTable::table","Elixir\\DB\\SQL\\DropTable","Elixir\/DB\/SQL\/DropTable.html#method_table","(string $pTable)","",2],["DropTable::render","Elixir\\DB\\SQL\\DropTable","Elixir\/DB\/SQL\/DropTable.html#method_render","()","",2],["Expr::protect","Elixir\\DB\\SQL\\Expr","Elixir\/DB\/SQL\/Expr.html#method_protect","(string $pExpr)","",2],["Expr::__construct","Elixir\\DB\\SQL\\Expr","Elixir\/DB\/SQL\/Expr.html#method___construct","(string $pExpr)","",2],["Expr::getExpr","Elixir\\DB\\SQL\\Expr","Elixir\/DB\/SQL\/Expr.html#method_getExpr","()","",2],["Expr::__toString","Elixir\\DB\\SQL\\Expr","Elixir\/DB\/SQL\/Expr.html#method___toString","()","",2],["Insert::__construct","Elixir\\DB\\SQL\\Insert","Elixir\/DB\/SQL\/Insert.html#method___construct","(string $pTable = null)","",2],["Insert::raw","Elixir\\DB\\SQL\\Insert","Elixir\/DB\/SQL\/Insert.html#method_raw","(boolean $pValue)","",2],["Insert::table","Elixir\\DB\\SQL\\Insert","Elixir\/DB\/SQL\/Insert.html#method_table","(string $pTable)","",2],["Insert::columns","Elixir\\DB\\SQL\\Insert","Elixir\/DB\/SQL\/Insert.html#method_columns","(array $pColumns)","",2],["Insert::values","Elixir\\DB\\SQL\\Insert","Elixir\/DB\/SQL\/Insert.html#method_values","(<a href=\"Elixir\/DB\/SQL\/Select.html\"><abbr title=\"Elixir\\DB\\SQL\\Select\">Select<\/abbr><\/a>|string|array $pValues, string $pType = self::VALUES_SET)","",2],["Insert::reset","Elixir\\DB\\SQL\\Insert","Elixir\/DB\/SQL\/Insert.html#method_reset","(string $pPart)","",2],["Insert::render","Elixir\\DB\\SQL\\Insert","Elixir\/DB\/SQL\/Insert.html#method_render","()","",2],["JoinClause::__construct","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method___construct","(<a href=\"Elixir\/DB\/SQL\/Select.html\"><abbr title=\"Elixir\\DB\\SQL\\Select\">Select<\/abbr><\/a> $pSQL)","",2],["JoinClause::on","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method_on","(mixed $pCond, mixed $pValue = null)","",2],["JoinClause::orOn","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method_orOn","(mixed $pCond, mixed $pValue = null)","",2],["JoinClause::using","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method_using","(array|string $pUsing)","",2],["JoinClause::columns","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method_columns","(array|string $pColumns = self::STAR, boolean $pReset = false)","",2],["JoinClause::reset","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method_reset","(string $pPart)","",2],["JoinClause::render","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method_render","()","",2],["JoinClause::__toString","Elixir\\DB\\SQL\\JoinClause","Elixir\/DB\/SQL\/JoinClause.html#method___toString","()","",2],["AlterTable::renameColumn","Elixir\\DB\\SQL\\MySQL\\AlterTable","Elixir\/DB\/SQL\/MySQL\/AlterTable.html#method_renameColumn","($pOldColumn, $pNewColumn)","",2],["AlterTable::addColumnAfter","Elixir\\DB\\SQL\\MySQL\\AlterTable","Elixir\/DB\/SQL\/MySQL\/AlterTable.html#method_addColumnAfter","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn, $pPrevious)","",2],["AlterTable::addColumnFirst","Elixir\\DB\\SQL\\MySQL\\AlterTable","Elixir\/DB\/SQL\/MySQL\/AlterTable.html#method_addColumnFirst","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["AlterTable::collating","Elixir\\DB\\SQL\\MySQL\\AlterTable","Elixir\/DB\/SQL\/MySQL\/AlterTable.html#method_collating","(string $pCollating)","",2],["AlterTable::reset","Elixir\\DB\\SQL\\MySQL\\AlterTable","Elixir\/DB\/SQL\/MySQL\/AlterTable.html#method_reset","(string $pPart)","",2],["AlterTable::render","Elixir\\DB\\SQL\\MySQL\\AlterTable","Elixir\/DB\/SQL\/MySQL\/AlterTable.html#method_render","()","",2],["CreateTable::ifNotExists","Elixir\\DB\\SQL\\MySQL\\CreateTable","Elixir\/DB\/SQL\/MySQL\/CreateTable.html#method_ifNotExists","(boolean $pValue)","",2],["CreateTable::render","Elixir\\DB\\SQL\\MySQL\\CreateTable","Elixir\/DB\/SQL\/MySQL\/CreateTable.html#method_render","()","",2],["Delete::orderBy","Elixir\\DB\\SQL\\MySQL\\Delete","Elixir\/DB\/SQL\/MySQL\/Delete.html#method_orderBy","(array|string $pOrder, string $pType = self::ORDER_ASCENDING)","",2],["Delete::limit","Elixir\\DB\\SQL\\MySQL\\Delete","Elixir\/DB\/SQL\/MySQL\/Delete.html#method_limit","(integer $pLimit)","",2],["Delete::offset","Elixir\\DB\\SQL\\MySQL\\Delete","Elixir\/DB\/SQL\/MySQL\/Delete.html#method_offset","(integer $pOffset)","",2],["Delete::render","Elixir\\DB\\SQL\\MySQL\\Delete","Elixir\/DB\/SQL\/MySQL\/Delete.html#method_render","()","",2],["DropTable::temporary","Elixir\\DB\\SQL\\MySQL\\DropTable","Elixir\/DB\/SQL\/MySQL\/DropTable.html#method_temporary","(boolean $pValue)","",2],["DropTable::ifExists","Elixir\\DB\\SQL\\MySQL\\DropTable","Elixir\/DB\/SQL\/MySQL\/DropTable.html#method_ifExists","(boolean $pValue)","",2],["DropTable::render","Elixir\\DB\\SQL\\MySQL\\DropTable","Elixir\/DB\/SQL\/MySQL\/DropTable.html#method_render","()","",2],["Insert::ignore","Elixir\\DB\\SQL\\MySQL\\Insert","Elixir\/DB\/SQL\/MySQL\/Insert.html#method_ignore","(boolean $pValue = true)","",2],["Insert::duplicateKeyUpdate","Elixir\\DB\\SQL\\MySQL\\Insert","Elixir\/DB\/SQL\/MySQL\/Insert.html#method_duplicateKeyUpdate","(array $pValues)","",2],["Insert::render","Elixir\\DB\\SQL\\MySQL\\Insert","Elixir\/DB\/SQL\/MySQL\/Insert.html#method_render","()","",2],["Update::orderBy","Elixir\\DB\\SQL\\MySQL\\Update","Elixir\/DB\/SQL\/MySQL\/Update.html#method_orderBy","(array|string $pOrder, string $pType = self::ORDER_ASCENDING)","",2],["Update::limit","Elixir\\DB\\SQL\\MySQL\\Update","Elixir\/DB\/SQL\/MySQL\/Update.html#method_limit","(integer $pLimit)","",2],["Update::offset","Elixir\\DB\\SQL\\MySQL\\Update","Elixir\/DB\/SQL\/MySQL\/Update.html#method_offset","(integer $pOffset)","",2],["Update::render","Elixir\\DB\\SQL\\MySQL\\Update","Elixir\/DB\/SQL\/MySQL\/Update.html#method_render","()","",2],["SQLAbstract::protect","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_protect","(mixed $pParameter)","",2],["SQLAbstract::setQuoteMethod","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_setQuoteMethod","(<abbr title=\"Elixir\\DB\\SQL\\callable\">callable<\/abbr> $pValue)","",2],["SQLAbstract::getQuoteMethod","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_getQuoteMethod","()","",2],["SQLAbstract::quote","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_quote","(mixed $pParameter)","",2],["SQLAbstract::bindValue","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_bindValue","(string $pKey, mixed $pValue)","",2],["SQLAbstract::getBindValues","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_getBindValues","()","",2],["SQLAbstract::assemble","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_assemble","(string $pSQL, mixed $pValues = null)","",2],["SQLAbstract::getQuery","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_getQuery","()","",2],["SQLAbstract::render","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method_render","()","",2],["SQLAbstract::__toString","Elixir\\DB\\SQL\\SQLAbstract","Elixir\/DB\/SQL\/SQLAbstract.html#method___toString","()","",2],["SQLFactory::select","Elixir\\DB\\SQL\\SQLFactory","Elixir\/DB\/SQL\/SQLFactory.html#method_select","(string $pTable = null, string $pDriver = self::DRIVER_MYSQL)","",2],["SQLFactory::insert","Elixir\\DB\\SQL\\SQLFactory","Elixir\/DB\/SQL\/SQLFactory.html#method_insert","(string $pTable = null, string $pDriver = self::DRIVER_MYSQL)","",2],["SQLFactory::update","Elixir\\DB\\SQL\\SQLFactory","Elixir\/DB\/SQL\/SQLFactory.html#method_update","(string $pTable = null, string $pDriver = self::DRIVER_MYSQL)","",2],["SQLFactory::delete","Elixir\\DB\\SQL\\SQLFactory","Elixir\/DB\/SQL\/SQLFactory.html#method_delete","(string $pTable = null, string $pDriver = self::DRIVER_MYSQL)","",2],["SQLFactory::createTable","Elixir\\DB\\SQL\\SQLFactory","Elixir\/DB\/SQL\/SQLFactory.html#method_createTable","(string $pTable = null, string $pDriver = self::DRIVER_MYSQL)","",2],["SQLFactory::createAlterTable","Elixir\\DB\\SQL\\SQLFactory","Elixir\/DB\/SQL\/SQLFactory.html#method_createAlterTable","(string $pTable = null, string $pDriver = self::DRIVER_MYSQL)","",2],["SQLFactory::dropTable","Elixir\\DB\\SQL\\SQLFactory","Elixir\/DB\/SQL\/SQLFactory.html#method_dropTable","(string $pTable = null, string $pDriver = self::DRIVER_MYSQL)","",2],["AlterTable::modifyColumn","Elixir\\DB\\SQL\\SQLite\\AlterTable","Elixir\/DB\/SQL\/SQLite\/AlterTable.html#method_modifyColumn","(<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["AlterTable::renameColumn","Elixir\\DB\\SQL\\SQLite\\AlterTable","Elixir\/DB\/SQL\/SQLite\/AlterTable.html#method_renameColumn","($pOldColumn, $pNewColumn)","",2],["AlterTable::dropColumn","Elixir\\DB\\SQL\\SQLite\\AlterTable","Elixir\/DB\/SQL\/SQLite\/AlterTable.html#method_dropColumn","(string|<a href=\"Elixir\/DB\/SQL\/Column.html\"><abbr title=\"Elixir\\DB\\SQL\\Column\">Column<\/abbr><\/a> $pColumn)","",2],["AlterTable::addConstraint","Elixir\\DB\\SQL\\SQLite\\AlterTable","Elixir\/DB\/SQL\/SQLite\/AlterTable.html#method_addConstraint","(<a href=\"Elixir\/DB\/SQL\/Constraint.html\"><abbr title=\"Elixir\\DB\\SQL\\Constraint\">Constraint<\/abbr><\/a> $pConstraint)","",2],["AlterTable::dropConstraint","Elixir\\DB\\SQL\\SQLite\\AlterTable","Elixir\/DB\/SQL\/SQLite\/AlterTable.html#method_dropConstraint","(<a href=\"Elixir\/DB\/SQL\/Constraint.html\"><abbr title=\"Elixir\\DB\\SQL\\Constraint\">Constraint<\/abbr><\/a> $pConstraint = null, string $pType = null)","",2],["CreateTable::ifNotExists","Elixir\\DB\\SQL\\SQLite\\CreateTable","Elixir\/DB\/SQL\/SQLite\/CreateTable.html#method_ifNotExists","(boolean $pValue)","",2],["CreateTable::render","Elixir\\DB\\SQL\\SQLite\\CreateTable","Elixir\/DB\/SQL\/SQLite\/CreateTable.html#method_render","()","",2],["Delete::orderBy","Elixir\\DB\\SQL\\SQLite\\Delete","Elixir\/DB\/SQL\/SQLite\/Delete.html#method_orderBy","(array|string $pOrder, string $pType = self::ORDER_ASCENDING)","",2],["Delete::limit","Elixir\\DB\\SQL\\SQLite\\Delete","Elixir\/DB\/SQL\/SQLite\/Delete.html#method_limit","(integer $pLimit)","",2],["Delete::offset","Elixir\\DB\\SQL\\SQLite\\Delete","Elixir\/DB\/SQL\/SQLite\/Delete.html#method_offset","(integer $pOffset)","",2],["Delete::render","Elixir\\DB\\SQL\\SQLite\\Delete","Elixir\/DB\/SQL\/SQLite\/Delete.html#method_render","()","",2],["DropTable::ifExists","Elixir\\DB\\SQL\\SQLite\\DropTable","Elixir\/DB\/SQL\/SQLite\/DropTable.html#method_ifExists","(boolean $pValue)","",2],["DropTable::render","Elixir\\DB\\SQL\\SQLite\\DropTable","Elixir\/DB\/SQL\/SQLite\/DropTable.html#method_render","()","",2],["Insert::ignore","Elixir\\DB\\SQL\\SQLite\\Insert","Elixir\/DB\/SQL\/SQLite\/Insert.html#method_ignore","(boolean $pValue)","",2],["Insert::render","Elixir\\DB\\SQL\\SQLite\\Insert","Elixir\/DB\/SQL\/SQLite\/Insert.html#method_render","()","",2],["Update::orderBy","Elixir\\DB\\SQL\\SQLite\\Update","Elixir\/DB\/SQL\/SQLite\/Update.html#method_orderBy","(array|string $pOrder, string $pType = self::ORDER_ASCENDING)","",2],["Update::limit","Elixir\\DB\\SQL\\SQLite\\Update","Elixir\/DB\/SQL\/SQLite\/Update.html#method_limit","(integer $pLimit)","",2],["Update::offset","Elixir\\DB\\SQL\\SQLite\\Update","Elixir\/DB\/SQL\/SQLite\/Update.html#method_offset","(integer $pOffset)","",2],["Update::render","Elixir\\DB\\SQL\\SQLite\\Update","Elixir\/DB\/SQL\/SQLite\/Update.html#method_render","()","",2],["Select::__construct","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method___construct","(string $pTable = null)","",2],["Select::quantifier","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_quantifier","(string $pQuantifier)","",2],["Select::columns","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_columns","(array|string $pColumns = self::STAR, boolean $pReset = false)","",2],["Select::table","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_table","(string $pTable)","",2],["Select::join","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_join","(string $pTable, mixed $pCond, mixed $pValue = null, array|string $pColumns = null, string $pType = self::JOIN_INNER)","",2],["Select::where","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_where","(mixed $pCond, mixed $pValue = null)","",2],["Select::orWhere","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_orWhere","(mixed $pCond, mixed $pValue = null)","",2],["Select::groupBy","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_groupBy","(array|string $pGroup)","",2],["Select::having","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_having","(mixed $pCond, mixed $pValue = null)","",2],["Select::orHaving","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_orHaving","(mixed $pCond, mixed $pValue = null)","",2],["Select::orderBy","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_orderBy","(array|string $pOrder, string $pType = self::ORDER_ASCENDING)","",2],["Select::limit","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_limit","(integer $pLimit)","",2],["Select::offset","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_offset","(integer $pOffset)","",2],["Select::combine","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_combine","(array $pSQLs, string $pType = self::COMBINE_UNION)","",2],["Select::reset","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_reset","(string $pPart)","",2],["Select::render","Elixir\\DB\\SQL\\Select","Elixir\/DB\/SQL\/Select.html#method_render","()","",2],["Update::__construct","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method___construct","(string $pTable = null)","",2],["Update::raw","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method_raw","(boolean $pValue)","",2],["Update::table","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method_table","(string $pTable)","",2],["Update::set","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method_set","(array $pValues, string $pType = self::VALUES_SET)","",2],["Update::where","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method_where","(mixed $pCond, mixed $pValue = null)","",2],["Update::orWhere","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method_orWhere","(mixed $pCond, mixed $pValue = null)","",2],["Update::reset","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method_reset","(string $pPart)","",2],["Update::render","Elixir\\DB\\SQL\\Update","Elixir\/DB\/SQL\/Update.html#method_render","()","",2],["WhereClause::__construct","Elixir\\DB\\SQL\\WhereClause","Elixir\/DB\/SQL\/WhereClause.html#method___construct","(<a href=\"Elixir\/DB\/SQL\/SQLAbstract.html\"><abbr title=\"Elixir\\DB\\SQL\\SQLAbstract\">SQLAbstract<\/abbr><\/a> $pSQL)","",2],["WhereClause::where","Elixir\\DB\\SQL\\WhereClause","Elixir\/DB\/SQL\/WhereClause.html#method_where","(mixed $pCond, mixed $pValue = null)","",2],["WhereClause::orWhere","Elixir\\DB\\SQL\\WhereClause","Elixir\/DB\/SQL\/WhereClause.html#method_orWhere","(mixed $pCond, mixed $pValue = null)","",2],["WhereClause::reset","Elixir\\DB\\SQL\\WhereClause","Elixir\/DB\/SQL\/WhereClause.html#method_reset","()","",2],["WhereClause::render","Elixir\\DB\\SQL\\WhereClause","Elixir\/DB\/SQL\/WhereClause.html#method_render","()","",2],["WhereClause::__toString","Elixir\\DB\\SQL\\WhereClause","Elixir\/DB\/SQL\/WhereClause.html#method___toString","()","",2],["Container::setLockMode","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_setLockMode","(string $pValue)","",2],["Container::getLockMode","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_getLockMode","()","",2],["Container::has","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_has","(string $pKey)","",2],["Container::get","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_get","(string $pKey, array $pArguments = null, mixed $pDefault = null)","",2],["Container::set","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_set","(string $pKey, mixed $pValue, array $pOptions = array())","",2],["Container::remove","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_remove","(string $pKey)","",2],["Container::gets","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_gets","(array $pOptions = array())","",2],["Container::sets","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_sets","(array $pData, array $pOptions = array())","",2],["Container::hasAlias","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_hasAlias","(string $pAlias, string $pKey = null)","",2],["Container::addAlias","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_addAlias","(string $pKey, string $pAlias)","",2],["Container::hasTag","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_hasTag","(string $pKey, string $pTag)","",2],["Container::addTag","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_addTag","(string $pKey, string $pTag)","",2],["Container::findByTag","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_findByTag","(string $pTag, array $pArguments = null, mixed $pDefault = null)","",2],["Container::raw","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_raw","(string $pKey, boolean $pWithConfiguration = false)","",2],["Container::singleton","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_singleton","(string $pKey, mixed $pValue, mixed $pTags = array(), mixed $pAliases = array())","",2],["Container::protect","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_protect","(string $pKey, <abbr title=\"Elixir\\DI\\callable\">callable<\/abbr> $pValue, mixed $pTags = array(), mixed $pAliases = array())","",2],["Container::extend","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_extend","(string $pKey, <abbr title=\"Elixir\\DI\\callable\">callable<\/abbr> $pValue)","",2],["Container::getStorageType","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_getStorageType","(string $pKey)","",2],["Container::load","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_load","(<a href=\"Elixir\/DI\/ProviderInterface.html\"><abbr title=\"Elixir\\DI\\ProviderInterface\">ProviderInterface<\/abbr><\/a> $pProvider)","",2],["Container::merge","Elixir\\DI\\Container","Elixir\/DI\/Container.html#method_merge","(array|<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pData)","",2],["ContainerEvent::__construct","Elixir\\DI\\ContainerEvent","Elixir\/DI\/ContainerEvent.html#method___construct","(string $pType, $pName = null, $pAlias = null, $pServiceType = null)","",2],["ContainerEvent::getName","Elixir\\DI\\ContainerEvent","Elixir\/DI\/ContainerEvent.html#method_getName","()","",2],["ContainerEvent::getAlias","Elixir\\DI\\ContainerEvent","Elixir\/DI\/ContainerEvent.html#method_getAlias","()","",2],["ContainerEvent::getServiceType","Elixir\\DI\\ContainerEvent","Elixir\/DI\/ContainerEvent.html#method_getServiceType","()","",2],["ContainerInterface::setLockMode","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_setLockMode","(string $pValue)","",2],["ContainerInterface::getLockMode","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_getLockMode","()","",2],["ContainerInterface::has","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_has","(string $pKey)","",2],["ContainerInterface::get","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_get","(string $pKey, array $pArguments = null, mixed $pDefault = null)","",2],["ContainerInterface::set","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_set","(string $pKey, mixed $pValue, array $pOptions = array())","",2],["ContainerInterface::remove","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_remove","(string $pKey)","",2],["ContainerInterface::gets","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_gets","(array $pOptions = array())","",2],["ContainerInterface::sets","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_sets","(array $pData, array $pOptions = array())","",2],["ContainerInterface::hasAlias","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_hasAlias","(string $pAlias, string $pKey = null)","",2],["ContainerInterface::addAlias","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_addAlias","(string $pKey, string $pAlias)","",2],["ContainerInterface::hasTag","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_hasTag","(string $pKey, string $pTag)","",2],["ContainerInterface::addTag","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_addTag","(string $pKey, string $pTag)","",2],["ContainerInterface::findByTag","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_findByTag","(string $pTag, array $pArguments = null, mixed $pDefault = null)","",2],["ContainerInterface::extend","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_extend","(string $pKey, <abbr title=\"Elixir\\DI\\callable\">callable<\/abbr> $pValue)","",2],["ContainerInterface::raw","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_raw","(string $pKey, boolean $pWithConfiguration = false)","",2],["ContainerInterface::getStorageType","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_getStorageType","(string $pKey)","",2],["ContainerInterface::load","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_load","(<a href=\"Elixir\/DI\/ProviderInterface.html\"><abbr title=\"Elixir\\DI\\ProviderInterface\">ProviderInterface<\/abbr><\/a> $pProvider)","",2],["ContainerInterface::merge","Elixir\\DI\\ContainerInterface","Elixir\/DI\/ContainerInterface.html#method_merge","(array|<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pData)","",2],["ProviderInterface::load","Elixir\\DI\\ProviderInterface","Elixir\/DI\/ProviderInterface.html#method_load","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["Dispatcher::__construct","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method___construct","(mixed $pTarget = null)","",2],["Dispatcher::getTarget","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_getTarget","()","",2],["Dispatcher::setTarget","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_setTarget","(mixed $pValue)","",2],["Dispatcher::hasListener","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_hasListener","(string $pType)","",2],["Dispatcher::addListener","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_addListener","(string $pType, <abbr title=\"Elixir\\Dispatcher\\callable\">callable<\/abbr> $pCallback, integer $pPriority)","",2],["Dispatcher::removeListener","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_removeListener","(string $pType, <abbr title=\"Elixir\\Dispatcher\\callable\">callable<\/abbr> $pCallback)","",2],["Dispatcher::getListeners","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_getListeners","()","",2],["Dispatcher::removeListeners","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_removeListeners","()","",2],["Dispatcher::addSubscriber","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_addSubscriber","(<a href=\"Elixir\/Dispatcher\/SubscriberInterface.html\"><abbr title=\"Elixir\\Dispatcher\\SubscriberInterface\">SubscriberInterface<\/abbr><\/a> $pSubscriber)","",2],["Dispatcher::removeSubscriber","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_removeSubscriber","(<a href=\"Elixir\/Dispatcher\/SubscriberInterface.html\"><abbr title=\"Elixir\\Dispatcher\\SubscriberInterface\">SubscriberInterface<\/abbr><\/a> $pSubscriber)","",2],["Dispatcher::dispatch","Elixir\\Dispatcher\\Dispatcher","Elixir\/Dispatcher\/Dispatcher.html#method_dispatch","(<a href=\"Elixir\/Dispatcher\/Event.html\"><abbr title=\"Elixir\\Dispatcher\\Event\">Event<\/abbr><\/a> $pEvent)","",2],["DispatcherInterface::hasListener","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_hasListener","(string $pType)","",2],["DispatcherInterface::addListener","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_addListener","(string $pType, <abbr title=\"Elixir\\Dispatcher\\callable\">callable<\/abbr> $pCallback, integer $pPriority)","",2],["DispatcherInterface::getListeners","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_getListeners","()","",2],["DispatcherInterface::removeListener","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_removeListener","(string $pType, <abbr title=\"Elixir\\Dispatcher\\callable\">callable<\/abbr> $pCallback)","",2],["DispatcherInterface::removeListeners","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_removeListeners","()","",2],["DispatcherInterface::addSubscriber","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_addSubscriber","(<a href=\"Elixir\/Dispatcher\/SubscriberInterface.html\"><abbr title=\"Elixir\\Dispatcher\\SubscriberInterface\">SubscriberInterface<\/abbr><\/a> $pSubscriber)","",2],["DispatcherInterface::removeSubscriber","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_removeSubscriber","(<a href=\"Elixir\/Dispatcher\/SubscriberInterface.html\"><abbr title=\"Elixir\\Dispatcher\\SubscriberInterface\">SubscriberInterface<\/abbr><\/a> $pSubscriber)","",2],["DispatcherInterface::dispatch","Elixir\\Dispatcher\\DispatcherInterface","Elixir\/Dispatcher\/DispatcherInterface.html#method_dispatch","(<a href=\"Elixir\/Dispatcher\/Event.html\"><abbr title=\"Elixir\\Dispatcher\\Event\">Event<\/abbr><\/a> $pEvent)","",2],["Event::__construct","Elixir\\Dispatcher\\Event","Elixir\/Dispatcher\/Event.html#method___construct","(string $pType)","",2],["Event::getType","Elixir\\Dispatcher\\Event","Elixir\/Dispatcher\/Event.html#method_getType","()","",2],["Event::getTarget","Elixir\\Dispatcher\\Event","Elixir\/Dispatcher\/Event.html#method_getTarget","()","",2],["Event::setTarget","Elixir\\Dispatcher\\Event","Elixir\/Dispatcher\/Event.html#method_setTarget","(mixed $pValue)","",2],["Event::isStopped","Elixir\\Dispatcher\\Event","Elixir\/Dispatcher\/Event.html#method_isStopped","()","",2],["Event::stopPropagation","Elixir\\Dispatcher\\Event","Elixir\/Dispatcher\/Event.html#method_stopPropagation","()","",2],["SubscriberInterface::subscribe","Elixir\\Dispatcher\\SubscriberInterface","Elixir\/Dispatcher\/SubscriberInterface.html#method_subscribe","(<a href=\"Elixir\/Dispatcher\/DispatcherInterface.html\"><abbr title=\"Elixir\\Dispatcher\\DispatcherInterface\">DispatcherInterface<\/abbr><\/a> $pDispatcher)","",2],["SubscriberInterface::unsubscribe","Elixir\\Dispatcher\\SubscriberInterface","Elixir\/Dispatcher\/SubscriberInterface.html#method_unsubscribe","(<a href=\"Elixir\/Dispatcher\/DispatcherInterface.html\"><abbr title=\"Elixir\\Dispatcher\\DispatcherInterface\">DispatcherInterface<\/abbr><\/a> $pDispatcher)","",2],["DB::with","Elixir\\Facade\\DB","Elixir\/Facade\/DB.html#method_with","(string $pAccessor)","",2],["DI::getContainer","Elixir\\Facade\\DI","Elixir\/Facade\/DI.html#method_getContainer","()","",2],["DI::setContainer","Elixir\\Facade\\DI","Elixir\/Facade\/DI.html#method_setContainer","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["DI::__callStatic","Elixir\\Facade\\DI","Elixir\/Facade\/DI.html#method___callStatic","(string $pMethod, array $pArguments)","",2],["FacadeAbstract::getContainer","Elixir\\Facade\\FacadeAbstract","Elixir\/Facade\/FacadeAbstract.html#method_getContainer","()","",2],["FacadeAbstract::setContainer","Elixir\\Facade\\FacadeAbstract","Elixir\/Facade\/FacadeAbstract.html#method_setContainer","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["FacadeAbstract::resolveInstance","Elixir\\Facade\\FacadeAbstract","Elixir\/Facade\/FacadeAbstract.html#method_resolveInstance","($pKey)","",2],["FacadeAbstract::__callStatic","Elixir\\Facade\\FacadeAbstract","Elixir\/Facade\/FacadeAbstract.html#method___callStatic","(string $pMethod, array $pArguments)","",2],["Filter::macro","Elixir\\Facade\\Filter","Elixir\/Facade\/Filter.html#method_macro","(string $pMethod, <abbr title=\"Elixir\\Facade\\callable\">callable<\/abbr> $pMacro)","",2],["Filter::resolveInstance","Elixir\\Facade\\Filter","Elixir\/Facade\/Filter.html#method_resolveInstance","($pKey)","",2],["Filter::filter","Elixir\\Facade\\Filter","Elixir\/Facade\/Filter.html#method_filter","(string $pClassOrKey, string $pContent, array $pOptions = array())","",2],["Filter::__callStatic","Elixir\\Facade\\Filter","Elixir\/Facade\/Filter.html#method___callStatic","(string $pMethod, array $pArguments)","",2],["Helper::macro","Elixir\\Facade\\Helper","Elixir\/Facade\/Helper.html#method_macro","(string $pMethod, <abbr title=\"Elixir\\Facade\\callable\">callable<\/abbr> $pMacro)","",2],["Helper::resolveInstance","Elixir\\Facade\\Helper","Elixir\/Facade\/Helper.html#method_resolveInstance","($pKey)","",2],["Helper::helper","Elixir\\Facade\\Helper","Elixir\/Facade\/Helper.html#method_helper","(string $pClassOrKey, array $pArguments = array())","",2],["Helper::__callStatic","Elixir\\Facade\\Helper","Elixir\/Facade\/Helper.html#method___callStatic","(string $pMethod, array $pArguments)","",2],["Validator::macro","Elixir\\Facade\\Validator","Elixir\/Facade\/Validator.html#method_macro","(string $pMethod, <abbr title=\"Elixir\\Facade\\callable\">callable<\/abbr> $pMacro)","",2],["Validator::resolveInstance","Elixir\\Facade\\Validator","Elixir\/Facade\/Validator.html#method_resolveInstance","($pKey)","",2],["Validator::valid","Elixir\\Facade\\Validator","Elixir\/Facade\/Validator.html#method_valid","(string $pClassOrKey, string $pContent, array $pOptions = array())","",2],["Validator::__callStatic","Elixir\\Facade\\Validator","Elixir\/Facade\/Validator.html#method___callStatic","(string $pMethod, array $pArguments)","",2],["Boolean::filter","Elixir\\Filter\\Boolean","Elixir\/Filter\/Boolean.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Callback::filter","Elixir\\Filter\\Callback","Elixir\/Filter\/Callback.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Chain::getSteps","Elixir\\Filter\\Chain","Elixir\/Filter\/Chain.html#method_getSteps","()","",2],["Chain::addFilter","Elixir\\Filter\\Chain","Elixir\/Filter\/Chain.html#method_addFilter","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a>|<abbr title=\"Elixir\\Filter\\callable\">callable<\/abbr>|string $pFilter, array $pOptions = array())","",2],["Chain::getFilters","Elixir\\Filter\\Chain","Elixir\/Filter\/Chain.html#method_getFilters","()","",2],["Chain::setFilters","Elixir\\Filter\\Chain","Elixir\/Filter\/Chain.html#method_setFilters","(array $pData)","",2],["Chain::filter","Elixir\\Filter\\Chain","Elixir\/Filter\/Chain.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Crop::filter","Elixir\\Filter\\Crop","Elixir\/Filter\/Crop.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Date::filter","Elixir\\Filter\\Date","Elixir\/Filter\/Date.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Duplicate::filter","Elixir\\Filter\\Duplicate","Elixir\/Filter\/Duplicate.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Email::filter","Elixir\\Filter\\Email","Elixir\/Filter\/Email.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Enlarge::filter","Elixir\\Filter\\Enlarge","Elixir\/Filter\/Enlarge.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Escaper::__construct","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method___construct","(string $pEncoding = &#039;UTF-8&#039;)","",2],["Escaper::getEncoding","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_getEncoding","()","",2],["Escaper::filter","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Escaper::escapeJS","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_escapeJS","(string $pValue)","",2],["Escaper::escapeCSS","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_escapeCSS","(string $pValue)","",2],["Escaper::escapeURL","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_escapeURL","(string $pValue)","",2],["Escaper::unescapeURL","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_unescapeURL","(string $pValue)","",2],["Escaper::escapeHTML","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_escapeHTML","(string $pValue, integer $pFlags = null, boolean $pDoubleEncode = true)","",2],["Escaper::unescapeHTML","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_unescapeHTML","(string $pValue, integer $pFlags = null)","",2],["Escaper::escapeHTMLAttr","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_escapeHTMLAttr","(string $pValue)","",2],["Escaper::escapeXML","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_escapeXML","($pValue)","",2],["Escaper::escapeXMLAttr","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_escapeXMLAttr","($pValue)","",2],["Escaper::convertEncoding","Elixir\\Filter\\Escaper","Elixir\/Filter\/Escaper.html#method_convertEncoding","(string $pValue, string $pTo, string $pFrom)","",2],["FilterAbstract::setDefaultOptions","Elixir\\Filter\\FilterAbstract","Elixir\/Filter\/FilterAbstract.html#method_setDefaultOptions","(array $pValue)","",2],["FilterAbstract::getDefaultOptions","Elixir\\Filter\\FilterAbstract","Elixir\/Filter\/FilterAbstract.html#method_getDefaultOptions","()","",2],["FilterInterface::filter","Elixir\\Filter\\FilterInterface","Elixir\/Filter\/FilterInterface.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Float::filter","Elixir\\Filter\\Float","Elixir\/Filter\/Float.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Int::filter","Elixir\\Filter\\Int","Elixir\/Filter\/Int.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["NbrFormat::filter","Elixir\\Filter\\NbrFormat","Elixir\/Filter\/NbrFormat.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["NbrFormat::format","Elixir\\Filter\\NbrFormat","Elixir\/Filter\/NbrFormat.html#method_format","(<abbr title=\"Elixir\\Filter\\float\">float<\/abbr> $pValue, integer $pType = null, string $pLocale = null)","",2],["NbrFormat::formatCurrency","Elixir\\Filter\\NbrFormat","Elixir\/Filter\/NbrFormat.html#method_formatCurrency","(<abbr title=\"Elixir\\Filter\\float\">float<\/abbr> $pValue, string $pCurrency = &#039;EUR&#039;, string $pLocale = null)","",2],["Protect::filter","Elixir\\Filter\\Protect","Elixir\/Filter\/Protect.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Rename::filter","Elixir\\Filter\\Rename","Elixir\/Filter\/Rename.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Replace::filter","Elixir\\Filter\\Replace","Elixir\/Filter\/Replace.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Resize::filter","Elixir\\Filter\\Resize","Elixir\/Filter\/Resize.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["Trim::filter","Elixir\\Filter\\Trim","Elixir\/Filter\/Trim.html#method_filter","(mixed $pContent, array $pOptions = array())","",2],["CSRF::__construct","Elixir\\Form\\Extension\\CSRF","Elixir\/Form\/Extension\/CSRF.html#method___construct","(string $pName = self::DEFAULT_NAME, array $pOptions = array())","",2],["CSRF::getName","Elixir\\Form\\Extension\\CSRF","Elixir\/Form\/Extension\/CSRF.html#method_getName","()","",2],["CSRF::getOptions","Elixir\\Form\\Extension\\CSRF","Elixir\/Form\/Extension\/CSRF.html#method_getOptions","()","",2],["CSRF::load","Elixir\\Form\\Extension\\CSRF","Elixir\/Form\/Extension\/CSRF.html#method_load","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pForm)","",2],["CSRF::unload","Elixir\\Form\\Extension\\CSRF","Elixir\/Form\/Extension\/CSRF.html#method_unload","()","",2],["ExtensionInterface::load","Elixir\\Form\\Extension\\ExtensionInterface","Elixir\/Form\/Extension\/ExtensionInterface.html#method_load","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pForm)","",2],["ExtensionInterface::unload","Elixir\\Form\\Extension\\ExtensionInterface","Elixir\/Form\/Extension\/ExtensionInterface.html#method_unload","()","",2],["Reference::__construct","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method___construct","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a> $pInputReference, string $pFormat)","",2],["Reference::getInputReference","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_getInputReference","()","",2],["Reference::getFormat","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_getFormat","()","",2],["Reference::load","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_load","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pForm)","",2],["Reference::onPreBind","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_onPreBind","(<a href=\"Elixir\/Form\/FormEvent.html\"><abbr title=\"Elixir\\Form\\FormEvent\">FormEvent<\/abbr><\/a> $e)","",2],["Reference::protect","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_protect","(string $pValue)","",2],["Reference::onPreSubmit","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_onPreSubmit","(<a href=\"Elixir\/Form\/FormEvent.html\"><abbr title=\"Elixir\\Form\\FormEvent\">FormEvent<\/abbr><\/a> $e)","",2],["Reference::onPreValues","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_onPreValues","(<a href=\"Elixir\/Form\/FormEvent.html\"><abbr title=\"Elixir\\Form\\FormEvent\">FormEvent<\/abbr><\/a> $e)","",2],["Reference::unload","Elixir\\Form\\Extension\\Reference","Elixir\/Form\/Extension\/Reference.html#method_unload","()","",2],["Button::__construct","Elixir\\Form\\Field\\Button","Elixir\/Form\/Field\/Button.html#method___construct","(string $pName = null)","",2],["Button::setType","Elixir\\Form\\Field\\Button","Elixir\/Form\/Field\/Button.html#method_setType","(string $pValue)","",2],["Button::getType","Elixir\\Form\\Field\\Button","Elixir\/Form\/Field\/Button.html#method_getType","()","",2],["Button::setValue","Elixir\\Form\\Field\\Button","Elixir\/Form\/Field\/Button.html#method_setValue","(mixed $pValue, boolean $pFiltered = true)","",2],["CSRF::__construct","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method___construct","(string $pName = null)","",2],["CSRF::setRequired","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_setRequired","(boolean $pValue)","",2],["CSRF::setCSRFValidator","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_setCSRFValidator","(<a href=\"Elixir\/Validator\/CSRF.html\"><abbr title=\"Elixir\\Validator\\CSRF\">CSRF<\/abbr><\/a>|<abbr title=\"Elixir\\Form\\Field\\callable\">callable<\/abbr>|string $pValidator, array $pOptions = array())","",2],["CSRF::getCSRFValidator","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_getCSRFValidator","()","",2],["CSRF::setCSRFValidatorOptions","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_setCSRFValidatorOptions","(array $pValue = array())","",2],["CSRF::getCSRFValidatorOptions","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_getCSRFValidatorOptions","()","",2],["CSRF::setAttribute","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_setAttribute","(string $pKey, string $pValue)","",2],["CSRF::removeAttribute","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_removeAttribute","(string $pKey)","",2],["CSRF::setAttributes","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_setAttributes","(array $pData)","",2],["CSRF::addValidator","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_addValidator","(<a href=\"Elixir\/Validator\/ValidatorInterface.html\"><abbr title=\"Elixir\\Validator\\ValidatorInterface\">ValidatorInterface<\/abbr><\/a>|<abbr title=\"Elixir\\Form\\Field\\callable\">callable<\/abbr>|string $pValidator, array $pOptions = array())","",2],["CSRF::addFilter","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_addFilter","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a>|<abbr title=\"Elixir\\Form\\Field\\callable\">callable<\/abbr>|string $pFilter, array $pOptions = array(), integer|null $pType = null)","",2],["CSRF::prepare","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_prepare","()","",2],["CSRF::isValid","Elixir\\Form\\Field\\CSRF","Elixir\/Form\/Field\/CSRF.html#method_isValid","(mixed $pValue = null)","",2],["Checkbox::__construct","Elixir\\Form\\Field\\Checkbox","Elixir\/Form\/Field\/Checkbox.html#method___construct","($pName = null)","",2],["Checkbox::setAttribute","Elixir\\Form\\Field\\Checkbox","Elixir\/Form\/Field\/Checkbox.html#method_setAttribute","($pKey, $pValue)","",2],["Checkbox::removeAttribute","Elixir\\Form\\Field\\Checkbox","Elixir\/Form\/Field\/Checkbox.html#method_removeAttribute","($pKey)","",2],["Checkbox::setAttributes","Elixir\\Form\\Field\\Checkbox","Elixir\/Form\/Field\/Checkbox.html#method_setAttributes","(array $pData)","",2],["FieldAbstract::__construct","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method___construct","(string $pName = null)","",2],["FieldAbstract::setName","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setName","(string $pValue)","",2],["FieldAbstract::getName","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getName","()","",2],["FieldAbstract::setHelper","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setHelper","(mixed $pValue)","",2],["FieldAbstract::getHelper","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getHelper","()","",2],["FieldAbstract::setParent","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setParent","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pValue)","",2],["FieldAbstract::getParent","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getParent","()","",2],["FieldAbstract::setLabel","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setLabel","(string $pValue)","",2],["FieldAbstract::getLabel","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getLabel","()","",2],["FieldAbstract::setErrorMessage","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setErrorMessage","(string $pValue)","",2],["FieldAbstract::getErrorMessage","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getErrorMessage","()","",2],["FieldAbstract::setRequired","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setRequired","(boolean $pValue)","",2],["FieldAbstract::isRequired","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_isRequired","()","",2],["FieldAbstract::hasAttribute","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_hasAttribute","(string $pKey)","",2],["FieldAbstract::getAttribute","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getAttribute","(string $pKey, mixed $pDefault = null)","",2],["FieldAbstract::setAttribute","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setAttribute","(string $pKey, string $pValue)","",2],["FieldAbstract::removeAttribute","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_removeAttribute","(string $pKey)","",2],["FieldAbstract::getAttributes","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getAttributes","()","",2],["FieldAbstract::setAttributes","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setAttributes","(array $pData)","",2],["FieldAbstract::hasOption","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_hasOption","(string $pKey)","",2],["FieldAbstract::getOption","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getOption","(string $pKey, mixed $pDefault = null)","",2],["FieldAbstract::setOption","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setOption","(string $pKey, string $pValue)","",2],["FieldAbstract::removeOption","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_removeOption","(string $pKey)","",2],["FieldAbstract::getOptions","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getOptions","()","",2],["FieldAbstract::setOptions","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setOptions","(array $pData)","",2],["FieldAbstract::setErrorBreak","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setErrorBreak","(boolean $pValue)","",2],["FieldAbstract::isErrorBreak","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_isErrorBreak","()","",2],["FieldAbstract::addValidator","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_addValidator","(<a href=\"Elixir\/Validator\/ValidatorInterface.html\"><abbr title=\"Elixir\\Validator\\ValidatorInterface\">ValidatorInterface<\/abbr><\/a>|<abbr title=\"Elixir\\Form\\Field\\callable\">callable<\/abbr>|string $pValidator, array $pOptions = array())","",2],["FieldAbstract::getValidators","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getValidators","()","",2],["FieldAbstract::setValidators","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setValidators","(array $pData)","",2],["FieldAbstract::addFilter","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_addFilter","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a>|<abbr title=\"Elixir\\Form\\Field\\callable\">callable<\/abbr>|string $pFilter, array $pOptions = array(), integer|null $pType = null)","",2],["FieldAbstract::getFilters","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getFilters","()","",2],["FieldAbstract::setFilters","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setFilters","(array $pData)","",2],["FieldAbstract::setValue","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_setValue","(mixed $pValue, boolean $pFiltered = true)","",2],["FieldAbstract::getValue","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_getValue","(boolean $pFiltered = true)","",2],["FieldAbstract::isEligible","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_isEligible","()","",2],["FieldAbstract::isEmpty","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_isEmpty","()","",2],["FieldAbstract::prepare","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_prepare","()","",2],["FieldAbstract::isPrepared","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_isPrepared","()","",2],["FieldAbstract::isValid","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_isValid","(mixed $pValue = null)","",2],["FieldAbstract::hasError","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_hasError","()","",2],["FieldAbstract::errors","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_errors","()","",2],["FieldAbstract::reset","Elixir\\Form\\Field\\FieldAbstract","Elixir\/Form\/Field\/FieldAbstract.html#method_reset","()","",2],["FieldEvent::__construct","Elixir\\Form\\Field\\FieldEvent","Elixir\/Form\/Field\/FieldEvent.html#method___construct","(string $pType, $pValue = null)","",2],["FieldEvent::getValue","Elixir\\Form\\Field\\FieldEvent","Elixir\/Form\/Field\/FieldEvent.html#method_getValue","()","",2],["FieldEvent::setValue","Elixir\\Form\\Field\\FieldEvent","Elixir\/Form\/Field\/FieldEvent.html#method_setValue","(mixed $pValue)","",2],["FieldInterface::setName","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setName","(string $pValue)","",2],["FieldInterface::getName","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getName","()","",2],["FieldInterface::setHelper","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setHelper","(mixed $pValue)","",2],["FieldInterface::getHelper","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getHelper","()","",2],["FieldInterface::setParent","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setParent","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pValue)","",2],["FieldInterface::getParent","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getParent","()","",2],["FieldInterface::setLabel","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setLabel","(string $pValue)","",2],["FieldInterface::getLabel","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getLabel","()","",2],["FieldInterface::setErrorMessage","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setErrorMessage","(string $pValue)","",2],["FieldInterface::getErrorMessage","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getErrorMessage","()","",2],["FieldInterface::setRequired","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setRequired","(boolean $pValue)","",2],["FieldInterface::isRequired","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_isRequired","()","",2],["FieldInterface::prepare","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_prepare","()","",2],["FieldInterface::getAttributes","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getAttributes","()","",2],["FieldInterface::setAttributes","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setAttributes","(array $pData)","",2],["FieldInterface::getOptions","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getOptions","()","",2],["FieldInterface::setOptions","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setOptions","(array $pData)","",2],["FieldInterface::setErrorBreak","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setErrorBreak","(boolean $pValue)","",2],["FieldInterface::isErrorBreak","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_isErrorBreak","()","",2],["FieldInterface::getValidators","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getValidators","()","",2],["FieldInterface::setValidators","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setValidators","(array $pData)","",2],["FieldInterface::getFilters","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getFilters","()","",2],["FieldInterface::setFilters","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setFilters","(array $pData)","",2],["FieldInterface::setValue","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_setValue","(mixed $pValue, boolean $pFiltered = true)","",2],["FieldInterface::getValue","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_getValue","(boolean $pFiltered = true)","",2],["FieldInterface::isEligible","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_isEligible","()","",2],["FieldInterface::isEmpty","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_isEmpty","()","",2],["FieldInterface::isValid","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_isValid","(mixed $pValue = null)","",2],["FieldInterface::hasError","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_hasError","()","",2],["FieldInterface::errors","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_errors","()","",2],["FieldInterface::reset","Elixir\\Form\\Field\\FieldInterface","Elixir\/Form\/Field\/FieldInterface.html#method_reset","()","",2],["File::__construct","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method___construct","(string $pName = null)","",2],["File::setParent","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_setParent","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pValue)","",2],["File::setErrorBreak","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_setErrorBreak","(boolean $pValue)","",2],["File::getUploader","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_getUploader","()","",2],["File::setUploader","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_setUploader","(<a href=\"Elixir\/HTTP\/Uploader.html\"><abbr title=\"Elixir\\HTTP\\Uploader\">Uploader<\/abbr><\/a> $pValue)","",2],["File::setAPCUploadProgressData","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_setAPCUploadProgressData","(string $pId, string $pValue = null)","",2],["File::getAPCUploadProgressData","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_getAPCUploadProgressData","()","",2],["File::setMaxFileSize","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_setMaxFileSize","(integer $pValue)","",2],["File::getMaxFileSize","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_getMaxFileSize","()","",2],["File::setAttribute","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_setAttribute","(string $pKey, string $pValue)","",2],["File::removeAttribute","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_removeAttribute","(string $pKey)","",2],["File::setAttributes","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_setAttributes","(array $pData)","",2],["File::getFileName","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_getFileName","()","",2],["File::addFilter","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_addFilter","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a>|<abbr title=\"Elixir\\Form\\Field\\callable\">callable<\/abbr>|string $pFilter, array $pOptions = array(), integer|null $pType = null)","",2],["File::isUploaded","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_isUploaded","()","",2],["File::isEmpty","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_isEmpty","()","",2],["File::isValid","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_isValid","(mixed $pValue = null)","",2],["File::hasMultipleFiles","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_hasMultipleFiles","()","",2],["File::receive","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_receive","()","",2],["File::reset","Elixir\\Form\\Field\\File","Elixir\/Form\/Field\/File.html#method_reset","()","",2],["FileInterface::hasMultipleFiles","Elixir\\Form\\Field\\FileInterface","Elixir\/Form\/Field\/FileInterface.html#method_hasMultipleFiles","()","",2],["FileInterface::isUploaded","Elixir\\Form\\Field\\FileInterface","Elixir\/Form\/Field\/FileInterface.html#method_isUploaded","()","",2],["FileInterface::receive","Elixir\\Form\\Field\\FileInterface","Elixir\/Form\/Field\/FileInterface.html#method_receive","()","",2],["FileInterface::getFileName","Elixir\\Form\\Field\\FileInterface","Elixir\/Form\/Field\/FileInterface.html#method_getFileName","()","",2],["Input::__construct","Elixir\\Form\\Field\\Input","Elixir\/Form\/Field\/Input.html#method___construct","(string $pName = null)","",2],["Input::setType","Elixir\\Form\\Field\\Input","Elixir\/Form\/Field\/Input.html#method_setType","(string $pValue)","",2],["Input::getType","Elixir\\Form\\Field\\Input","Elixir\/Form\/Field\/Input.html#method_getType","()","",2],["Input::setAttribute","Elixir\\Form\\Field\\Input","Elixir\/Form\/Field\/Input.html#method_setAttribute","(string $pKey, string $pValue)","",2],["Input::setValue","Elixir\\Form\\Field\\Input","Elixir\/Form\/Field\/Input.html#method_setValue","(mixed $pValue, boolean $pFiltered = true)","",2],["MultipleAbstract::setValue","Elixir\\Form\\Field\\MultipleAbstract","Elixir\/Form\/Field\/MultipleAbstract.html#method_setValue","(mixed $pValue, boolean $pFiltered = true)","",2],["MultipleAbstract::setData","Elixir\\Form\\Field\\MultipleAbstract","Elixir\/Form\/Field\/MultipleAbstract.html#method_setData","(array $pValue, boolean $pType = self::DATA_USE_VALUES)","",2],["MultipleAbstract::getData","Elixir\\Form\\Field\\MultipleAbstract","Elixir\/Form\/Field\/MultipleAbstract.html#method_getData","()","",2],["MultipleAbstract::removeOption","Elixir\\Form\\Field\\MultipleAbstract","Elixir\/Form\/Field\/MultipleAbstract.html#method_removeOption","(string $pKey)","",2],["MultipleAbstract::setOptions","Elixir\\Form\\Field\\MultipleAbstract","Elixir\/Form\/Field\/MultipleAbstract.html#method_setOptions","(array $pData)","",2],["MultipleInterface::setData","Elixir\\Form\\Field\\MultipleInterface","Elixir\/Form\/Field\/MultipleInterface.html#method_setData","(array $pValue, boolean $pType = self::DATA_USE_VALUES)","",2],["MultipleInterface::getData","Elixir\\Form\\Field\\MultipleInterface","Elixir\/Form\/Field\/MultipleInterface.html#method_getData","()","",2],["Radio::__construct","Elixir\\Form\\Field\\Radio","Elixir\/Form\/Field\/Radio.html#method___construct","($pName = null)","",2],["Radio::setAttribute","Elixir\\Form\\Field\\Radio","Elixir\/Form\/Field\/Radio.html#method_setAttribute","($pKey, $pValue)","",2],["Radio::removeAttribute","Elixir\\Form\\Field\\Radio","Elixir\/Form\/Field\/Radio.html#method_removeAttribute","($pKey)","",2],["Radio::setAttributes","Elixir\\Form\\Field\\Radio","Elixir\/Form\/Field\/Radio.html#method_setAttributes","(array $pData)","",2],["Select::__construct","Elixir\\Form\\Field\\Select","Elixir\/Form\/Field\/Select.html#method___construct","($pName = null)","",2],["Textarea::__construct","Elixir\\Form\\Field\\Textarea","Elixir\/Form\/Field\/Textarea.html#method___construct","(string $pName = null)","",2],["Form::__construct","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method___construct","(string $pName = null)","",2],["Form::setParent","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setParent","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pValue)","",2],["Form::getParent","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getParent","()","",2],["Form::setName","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setName","(string $pValue)","",2],["Form::getName","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getName","()","",2],["Form::setMethod","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setMethod","(string $pValue)","",2],["Form::getMethod","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getMethod","()","",2],["Form::setAction","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setAction","(string $pValue)","",2],["Form::getAction","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getAction","()","",2],["Form::setHelper","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setHelper","(mixed $pValue)","",2],["Form::getHelper","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getHelper","()","",2],["Form::isRoot","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_isRoot","()","",2],["Form::setErrorMessage","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setErrorMessage","(string $pValue)","",2],["Form::getErrorMessage","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getErrorMessage","()","",2],["Form::prepare","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_prepare","()","",2],["Form::isPrepared","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_isPrepared","()","",2],["Form::addExtension","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_addExtension","(<a href=\"Elixir\/Form\/Extension\/ExtensionInterface.html\"><abbr title=\"Elixir\\Form\\Extension\\ExtensionInterface\">ExtensionInterface<\/abbr><\/a> $pExtension)","",2],["Form::removeExtension","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_removeExtension","(<a href=\"Elixir\/Form\/Extension\/ExtensionInterface.html\"><abbr title=\"Elixir\\Form\\Extension\\ExtensionInterface\">ExtensionInterface<\/abbr><\/a> $pExtension)","",2],["Form::hasAttribute","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_hasAttribute","(string $pKey)","",2],["Form::getAttribute","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getAttribute","(string $pKey, mixed $pDefault = null)","",2],["Form::setAttribute","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setAttribute","(string $pKey, string $pValue)","",2],["Form::removeAttribute","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_removeAttribute","(string $pKey)","",2],["Form::getAttributes","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getAttributes","()","",2],["Form::setAttributes","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setAttributes","(array $pData)","",2],["Form::hasOption","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_hasOption","(string $pKey)","",2],["Form::getOption","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getOption","(string $pKey, mixed $pDefault = null)","",2],["Form::setOption","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setOption","(string $pKey, string $pValue)","",2],["Form::removeOption","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_removeOption","(string $pKey)","",2],["Form::getOptions","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_getOptions","()","",2],["Form::setOptions","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_setOptions","(array $pData)","",2],["Form::has","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_has","(string $pName, boolean $pUseSubForms = false)","",2],["Form::add","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_add","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pItem)","",2],["Form::onRenameItem","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_onRenameItem","(<a href=\"Elixir\/Form\/FormEvent.html\"><abbr title=\"Elixir\\Form\\FormEvent\">FormEvent<\/abbr><\/a> $e)","",2],["Form::get","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_get","(string $pName, boolean $pUseSubForms = true, mixed $pDefault = null)","",2],["Form::remove","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_remove","(string $pName, boolean $pUseSubForms = false)","",2],["Form::gets","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_gets","(integer $pMask = self::ALL_FIELDS)","",2],["Form::sets","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_sets","(array $pData)","",2],["Form::bind","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_bind","(array $pData, boolean $pFiltered = true)","",2],["Form::isEmpty","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_isEmpty","()","",2],["Form::isSubmited","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_isSubmited","()","",2],["Form::submit","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_submit","(array $pData = null)","",2],["Form::receive","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_receive","()","",2],["Form::required","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_required","(array $pMembers = array(), array $pOmitMembers = array(), array $pData = null)","",2],["Form::values","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_values","(boolean $pFiltered = true)","",2],["Form::hasError","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_hasError","()","",2],["Form::errors","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_errors","()","",2],["Form::reset","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_reset","(array $pOmit = array())","",2],["Form::dispatch","Elixir\\Form\\Form","Elixir\/Form\/Form.html#method_dispatch","(<a href=\"Elixir\/Dispatcher\/Event.html\"><abbr title=\"Elixir\\Dispatcher\\Event\">Event<\/abbr><\/a> $pEvent)","",2],["FormEvent::__construct","Elixir\\Form\\FormEvent","Elixir\/Form\/FormEvent.html#method___construct","(string $pType, array $pData = null)","",2],["FormEvent::getData","Elixir\\Form\\FormEvent","Elixir\/Form\/FormEvent.html#method_getData","()","",2],["FormEvent::setData","Elixir\\Form\\FormEvent","Elixir\/Form\/FormEvent.html#method_setData","(array $pValue)","",2],["FormFactory::createForm","Elixir\\Form\\FormFactory","Elixir\/Form\/FormFactory.html#method_createForm","(array $pData)","",2],["FormFactory::createField","Elixir\\Form\\FormFactory","Elixir\/Form\/FormFactory.html#method_createField","(array $pData)","",2],["FormInterface::setParent","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_setParent","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pValue)","",2],["FormInterface::getParent","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_getParent","()","",2],["FormInterface::setName","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_setName","(string $pValue)","",2],["FormInterface::getName","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_getName","()","",2],["FormInterface::setHelper","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_setHelper","(mixed $pValue)","",2],["FormInterface::getHelper","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_getHelper","()","",2],["FormInterface::setErrorMessage","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_setErrorMessage","(string $pValue)","",2],["FormInterface::getErrorMessage","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_getErrorMessage","()","",2],["FormInterface::getAttributes","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_getAttributes","()","",2],["FormInterface::setAttributes","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_setAttributes","(array $pData)","",2],["FormInterface::getOptions","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_getOptions","()","",2],["FormInterface::setOptions","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_setOptions","(array $pData)","",2],["FormInterface::add","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_add","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pItem)","",2],["FormInterface::remove","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_remove","(string $pName, boolean $pUseSubForms = false)","",2],["FormInterface::gets","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_gets","(integer $pMask = self::ALL_FIELDS)","",2],["FormInterface::sets","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_sets","(array $pData)","",2],["FormInterface::prepare","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_prepare","()","",2],["FormInterface::isPrepared","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_isPrepared","()","",2],["FormInterface::isEmpty","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_isEmpty","()","",2],["FormInterface::bind","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_bind","(array $pData, boolean $pFiltered = true)","",2],["FormInterface::submit","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_submit","(array $pData = null)","",2],["FormInterface::values","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_values","(boolean $pFiltered = true)","",2],["FormInterface::hasError","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_hasError","()","",2],["FormInterface::errors","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_errors","()","",2],["FormInterface::reset","Elixir\\Form\\FormInterface","Elixir\/Form\/FormInterface.html#method_reset","(array $pOmit = array())","",2],["Utils::prefix","Elixir\\Form\\Utils","Elixir\/Form\/Utils.html#method_prefix","(string $pPrefix, string $pValue)","",2],["Utils::getDataByPrefix","Elixir\\Form\\Utils","Elixir\/Form\/Utils.html#method_getDataByPrefix","(array $pData, string $pPrefix)","",2],["Utils::removePrefix","Elixir\\Form\\Utils","Elixir\/Form\/Utils.html#method_removePrefix","(mixed $pData, string $pPrefix = null)","",2],["Utils::prefixForm","Elixir\\Form\\Utils","Elixir\/Form\/Utils.html#method_prefixForm","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pForm, string $pPrefix = null)","",2],["Utils::createOptions","Elixir\\Form\\Utils","Elixir\/Form\/Utils.html#method_createOptions","(array $pData, string $pIdentifier, string|array $pWording = null, string $pMask = &#039;%s&#039;)","",2],["Cookie::fromString","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_fromString","(string $pValue)","",2],["Cookie::__construct","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method___construct","(string $pName, mixed $pValue = &#039;&#039;, integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pExpires, string $pPath = &#039;\/&#039;, string $pDomain = &#039;&#039;, boolean $pSecure = false, boolean $pHTTPOnly = false)","",2],["Cookie::getName","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_getName","()","",2],["Cookie::getValue","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_getValue","()","",2],["Cookie::setValue","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_setValue","(mixed $pValue)","",2],["Cookie::getExpires","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_getExpires","()","",2],["Cookie::setExpires","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_setExpires","(integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pValue)","",2],["Cookie::getPath","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_getPath","()","",2],["Cookie::setPath","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_setPath","(string $pValue)","",2],["Cookie::getDomain","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_getDomain","()","",2],["Cookie::setDomain","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_setDomain","(string $pValue)","",2],["Cookie::isSecure","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_isSecure","()","",2],["Cookie::setSecure","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_setSecure","(boolean $pValue)","",2],["Cookie::isHTTPOnly","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_isHTTPOnly","()","",2],["Cookie::setHTTPOnly","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_setHTTPOnly","(boolean $pValue)","",2],["Cookie::send","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_send","()","",2],["Cookie::toString","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method_toString","()","",2],["Cookie::__toString","Elixir\\HTTP\\Cookie","Elixir\/HTTP\/Cookie.html#method___toString","()","",2],["FileParameters::getUploaderFile","Elixir\\HTTP\\FileParameters","Elixir\/HTTP\/FileParameters.html#method_getUploaderFile","(string $pKey, mixed $pDefault = null)","",2],["Headers::fromApacheRequestHeaders","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_fromApacheRequestHeaders","(array $pServerDataFailback = null)","",2],["Headers::has","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_has","(string $pKey)","",2],["Headers::set","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_set","(string $pKey, string|null $pValue = null, boolean $pReplace = true)","",2],["Headers::get","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["Headers::remove","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_remove","(string $pKey)","",2],["Headers::gets","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_gets","()","",2],["Headers::sets","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_sets","(array $pData)","",2],["Headers::hasCacheControlDirective","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_hasCacheControlDirective","(string $pKey)","",2],["Headers::getCacheControlDirective","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_getCacheControlDirective","(string $pKey, mixed $pDefault)","",2],["Headers::addCacheControlDirective","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_addCacheControlDirective","(string $pKey, mixed $pValue = true)","",2],["Headers::removeCacheControlDirective","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_removeCacheControlDirective","(string $pKey)","",2],["Headers::getCacheControlDirectives","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_getCacheControlDirectives","()","",2],["Headers::setCacheControlDirectives","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_setCacheControlDirectives","(array $pData)","",2],["Headers::hasCookie","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_hasCookie","(string $pName, string $pPath = &#039;\/&#039;, string $pDomain = &#039;&#039;)","",2],["Headers::setCookie","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_setCookie","(<a href=\"Elixir\/HTTP\/Cookie.html\"><abbr title=\"Elixir\\HTTP\\Cookie\">Cookie<\/abbr><\/a> $pCookie)","",2],["Headers::removeCookie","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_removeCookie","(string $pName, string $pPath = &#039;\/&#039;, string $pDomain = &#039;&#039;)","",2],["Headers::clearCookie","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_clearCookie","(string $pName, string $pPath = &#039;\/&#039;, string $pDomain = &#039;&#039;)","",2],["Headers::getCookies","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_getCookies","(boolean $pWithConfiguration = false)","",2],["Headers::setCookies","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_setCookies","(array $pData)","",2],["Headers::send","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method_send","()","",2],["Headers::__toString","Elixir\\HTTP\\Headers","Elixir\/HTTP\/Headers.html#method___toString","()","",2],["Parameters::__construct","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method___construct","(array|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a> $pData = array())","",2],["Parameters::setSanitizer","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_setSanitizer","(<a href=\"Elixir\/HTTP\/Sanitizer.html\"><abbr title=\"Elixir\\HTTP\\Sanitizer\">Sanitizer<\/abbr><\/a> $pValue)","",2],["Parameters::getSanitizer","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_getSanitizer","()","",2],["Parameters::setAutoSanitization","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_setAutoSanitization","(boolean $pValue)","",2],["Parameters::isAutoSanitization","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_isAutoSanitization","()","",2],["Parameters::has","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_has","(mixed $pKey)","",2],["Parameters::get","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_get","(mixed $pKey, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Parameters::set","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_set","(mixed $pKey, mixed $pValue)","",2],["Parameters::remove","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_remove","(mixed $pKey)","",2],["Parameters::gets","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_gets","(mixed $pSanitize = null)","",2],["Parameters::sets","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_sets","(array $pData)","",2],["Parameters::offsetExists","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_offsetExists","($pKey)","",2],["Parameters::offsetSet","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_offsetSet","($pKey, $pValue)","",2],["Parameters::offsetGet","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_offsetGet","($pKey)","",2],["Parameters::offsetUnset","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_offsetUnset","($pKey)","",2],["Parameters::rewind","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_rewind","()","",2],["Parameters::current","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_current","()","",2],["Parameters::key","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_key","()","",2],["Parameters::next","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_next","()","",2],["Parameters::valid","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_valid","()","",2],["Parameters::count","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_count","()","",2],["Parameters::__issset","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method___issset","($pKey)","",2],["Parameters::__get","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method___get","($pKey)","",2],["Parameters::__set","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method___set","($pKey, $pValue)","",2],["Parameters::__unset","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method___unset","($pKey)","",2],["Parameters::merge","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_merge","(<a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|array $pData, boolean $pRecursive = false)","",2],["Parameters::filter","Elixir\\HTTP\\Parameters","Elixir\/HTTP\/Parameters.html#method_filter","(mixed $pContent, string|integer $pSanitize = &#039;FILTER_SANITIZE_FULL_SPECIAL_CHARS&#039;, array $pOptions = array())","",2],["ParametersInterface::has","Elixir\\HTTP\\ParametersInterface","Elixir\/HTTP\/ParametersInterface.html#method_has","(mixed $pKey)","",2],["ParametersInterface::get","Elixir\\HTTP\\ParametersInterface","Elixir\/HTTP\/ParametersInterface.html#method_get","(mixed $pKey, mixed $pDefault = null, mixed $pSanitize = null)","",2],["ParametersInterface::set","Elixir\\HTTP\\ParametersInterface","Elixir\/HTTP\/ParametersInterface.html#method_set","(mixed $pKey, mixed $pValue)","",2],["ParametersInterface::remove","Elixir\\HTTP\\ParametersInterface","Elixir\/HTTP\/ParametersInterface.html#method_remove","(mixed $pKey)","",2],["ParametersInterface::gets","Elixir\\HTTP\\ParametersInterface","Elixir\/HTTP\/ParametersInterface.html#method_gets","(mixed $pSanitize = null)","",2],["ParametersInterface::sets","Elixir\\HTTP\\ParametersInterface","Elixir\/HTTP\/ParametersInterface.html#method_sets","(array $pData)","",2],["ParametersInterface::merge","Elixir\\HTTP\\ParametersInterface","Elixir\/HTTP\/ParametersInterface.html#method_merge","(<a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|array $pData, boolean $pRecursive = false)","",2],["Request::__construct","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method___construct","(<a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pAttributes, <a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pQuery, <a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pPost, <a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pSession, <a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pCookie, <a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pFiles, <a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pServer, <a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $pEnv)","",2],["Request::setHeaders","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_setHeaders","(<a href=\"Elixir\/HTTP\/Headers.html\"><abbr title=\"Elixir\\HTTP\\Headers\">Headers<\/abbr><\/a> $pValue)","",2],["Request::getHeaders","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getHeaders","(string $pKey = null, mixed $pDefault = null)","",2],["Request::get","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_get","(mixed $pKey, mixed $pDefault = null, mixed $pSanitize = null, array $pProviders = array(self::ATTRIBUTES, self::QUERY, self::POST))","",2],["Request::has","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_has","(mixed $pKey, array $pProviders = array(self::QUERY, self::POST, self::ATTRIBUTES))","",2],["Request::getAttributes","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getAttributes","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::getQuery","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getQuery","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::getPost","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getPost","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::getSession","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getSession","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::getCookie","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getCookie","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::getFiles","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getFiles","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::getServer","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getServer","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::getEnv","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getEnv","(mixed $pKey = null, mixed $pDefault = null, mixed $pSanitize = null)","",2],["Request::setBaseURL","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_setBaseURL","(string $pValue)","",2],["Request::getBaseURL","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getBaseURL","()","",2],["Request::setURL","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_setURL","(string $pValue)","",2],["Request::getURL","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getURL","()","",2],["Request::getIP","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getIP","()","",2],["Request::isSecure","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_isSecure","()","",2],["Request::getScheme","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getScheme","(boolean $pSecure = null)","",2],["Request::getPathInfo","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getPathInfo","()","",2],["Request::getRequestMethod","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getRequestMethod","(mixed $pDefault = null)","",2],["Request::isPost","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_isPost","()","",2],["Request::isQuery","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_isQuery","()","",2],["Request::isPut","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_isPut","()","",2],["Request::isDelete","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_isDelete","()","",2],["Request::isAjax","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_isAjax","()","",2],["Request::getUser","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getUser","()","",2],["Request::getPassword","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getPassword","()","",2],["Request::getRoute","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getRoute","()","",2],["Request::setRoute","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_setRoute","(<a href=\"Elixir\/Routing\/Matcher\/RouteMatch.html\"><abbr title=\"Elixir\\Routing\\Matcher\\RouteMatch\">RouteMatch<\/abbr><\/a> $pValue)","",2],["Request::getModule","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getModule","()","",2],["Request::setModule","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_setModule","(string $pValue)","",2],["Request::getController","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getController","()","",2],["Request::setController","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_setController","(string $pValue)","",2],["Request::getAction","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_getAction","()","",2],["Request::setAction","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method_setAction","(string $pValue)","",2],["Request::__clone","Elixir\\HTTP\\Request","Elixir\/HTTP\/Request.html#method___clone","()","",2],["RequestFactory::create","Elixir\\HTTP\\RequestFactory","Elixir\/HTTP\/RequestFactory.html#method_create","(<a href=\"Elixir\/HTTP\/Sanitizer.html\"><abbr title=\"Elixir\\HTTP\\Sanitizer\">Sanitizer<\/abbr><\/a> $pSanitizer = null)","",2],["Response::fromString","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_fromString","(string $pValue)","",2],["Response::__construct","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method___construct","(string $pContent = &#039;&#039;, integer $pStatus = 200, string $pProtocol = &#039;HTTP\/1.1&#039;, array $pHeaders = array())","",2],["Response::setRequest","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_setRequest","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pValue)","",2],["Response::getRequest","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_getRequest","()","",2],["Response::setStatusCode","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_setStatusCode","(integer $pValue)","",2],["Response::getStatusCode","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_getStatusCode","()","",2],["Response::getReasonPhrase","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_getReasonPhrase","()","",2],["Response::setProtocol","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_setProtocol","(string $pValue)","",2],["Response::getProtocol","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_getProtocol","()","",2],["Response::setContent","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_setContent","(string $pValue)","",2],["Response::getContent","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_getContent","()","",2],["Response::getHeaders","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_getHeaders","()","",2],["Response::isOk","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isOk","()","",2],["Response::isNotFound","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isNotFound","()","",2],["Response::isForbidden","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isForbidden","()","",2],["Response::isInformational","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isInformational","()","",2],["Response::isSuccess","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isSuccess","()","",2],["Response::isRedirection","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isRedirection","()","",2],["Response::isClientError","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isClientError","()","",2],["Response::isServerError","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isServerError","()","",2],["Response::isNotModified","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isNotModified","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest = null)","",2],["Response::optimizeHeaders","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_optimizeHeaders","()","",2],["Response::isSent","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_isSent","()","",2],["Response::send","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method_send","()","",2],["Response::__toString","Elixir\\HTTP\\Response","Elixir\/HTTP\/Response.html#method___toString","()","",2],["ResponseFactory::create","Elixir\\HTTP\\ResponseFactory","Elixir\/HTTP\/ResponseFactory.html#method_create","(string $pContent = &#039;&#039;, integer $pStatus = 200, string $pProtocol = null, array $pHeaders = array())","",2],["ResponseFactory::redirect","Elixir\\HTTP\\ResponseFactory","Elixir\/HTTP\/ResponseFactory.html#method_redirect","(string $pLocation, integer $pStatus = 302, <abbr title=\"Elixir\\HTTP\\type\">type<\/abbr> $pProtocol = null, array $pHeaders = array())","",2],["ResponseFactory::json","Elixir\\HTTP\\ResponseFactory","Elixir\/HTTP\/ResponseFactory.html#method_json","(string $pContent = &#039;&#039;, integer $pStatus = 200, string $pProtocol = null, array $pHeaders = array())","",2],["ResponseFactory::stream","Elixir\\HTTP\\ResponseFactory","Elixir\/HTTP\/ResponseFactory.html#method_stream","(string $pContent, string $pFileName = null, string $pStatus = 200, string $pProtocol = null, array $pHeaders = array(&#039;Content-Type&#039; =&gt; &#039;application\/octet-stream&#039;))","",2],["Sanitizer::__construct","Elixir\\HTTP\\Sanitizer","Elixir\/HTTP\/Sanitizer.html#method___construct","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer = null)","",2],["Sanitizer::setContainer","Elixir\\HTTP\\Sanitizer","Elixir\/HTTP\/Sanitizer.html#method_setContainer","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["Sanitizer::getContainer","Elixir\\HTTP\\Sanitizer","Elixir\/HTTP\/Sanitizer.html#method_getContainer","()","",2],["Sanitizer::filter","Elixir\\HTTP\\Sanitizer","Elixir\/HTTP\/Sanitizer.html#method_filter","(mixed $pContent, string|integer $pFilter = &#039;FILTER_SANITIZE_FULL_SPECIAL_CHARS&#039;, array $pOptions = array())","",2],["SessionParameters::__construct","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method___construct","(<a href=\"Elixir\/HTTP\/Session\/SessionInterface.html\"><abbr title=\"Elixir\\HTTP\\Session\\SessionInterface\">SessionInterface<\/abbr><\/a> $pSession)","",2],["SessionParameters::getSession","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_getSession","()","",2],["SessionParameters::has","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_has","(mixed $pKey)","",2],["SessionParameters::get","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_get","(mixed $pKey, mixed $pDefault = null, mixed $pSanitize = null)","",2],["SessionParameters::set","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_set","(mixed $pKey, mixed $pValue)","",2],["SessionParameters::remove","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_remove","(mixed $pKey)","",2],["SessionParameters::gets","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_gets","(mixed $pSanitize = null)","",2],["SessionParameters::sets","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_sets","(array $pData)","",2],["SessionParameters::merge","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method_merge","(<a href=\"Elixir\/HTTP\/ParametersInterface.html\"><abbr title=\"Elixir\\HTTP\\ParametersInterface\">ParametersInterface<\/abbr><\/a>|array $pData, boolean $pRecursive = false)","",2],["SessionParameters::__call","Elixir\\HTTP\\SessionParameters","Elixir\/HTTP\/SessionParameters.html#method___call","(string $pMethod, array $pArguments)","",2],["DB::__construct","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method___construct","(<a href=\"Elixir\/DB\/DBInterface.html\"><abbr title=\"Elixir\\DB\\DBInterface\">DBInterface<\/abbr><\/a> $pDB, integer $pLifeTime = -1)","",2],["DB::getDB","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_getDB","()","",2],["DB::getLifeTime","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_getLifeTime","()","",2],["DB::open","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_open","($pSavePath, $pName)","",2],["DB::close","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_close","()","",2],["DB::read","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_read","($pId)","",2],["DB::write","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_write","($pId, $pData)","",2],["DB::destroy","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_destroy","($pId)","",2],["DB::gc","Elixir\\HTTP\\Session\\Handler\\DB","Elixir\/HTTP\/Session\/Handler\/DB.html#method_gc","($pMaxLifetime)","",2],["Session::__construct","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method___construct","()","",2],["Session::instance","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_instance","()","",2],["Session::setHandler","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_setHandler","(<abbr title=\"Elixir\\HTTP\\Session\\SessionHandlerInterface\">SessionHandlerInterface<\/abbr> $pValue)","",2],["Session::geHandler","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_geHandler","()","",2],["Session::exist","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_exist","()","",2],["Session::setId","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_setId","(string $pValue)","",2],["Session::getId","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_getId","()","",2],["Session::setName","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_setName","(string $pValue)","",2],["Session::getName","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_getName","()","",2],["Session::regenerate","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_regenerate","(boolean $pDeleteOldSession = true)","",2],["Session::start","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_start","()","",2],["Session::has","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_has","(mixed $pKey)","",2],["Session::get","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_get","(mixed $pKey, mixed $pDefault = null)","",2],["Session::set","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_set","(mixed $pKey, mixed $pValue)","",2],["Session::remove","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_remove","(mixed $pKey)","",2],["Session::gets","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_gets","()","",2],["Session::sets","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_sets","(array $pData)","",2],["Session::offsetExists","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_offsetExists","($pKey)","",2],["Session::offsetSet","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_offsetSet","($pKey, $pValue)","",2],["Session::offsetGet","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_offsetGet","($pKey)","",2],["Session::offsetUnset","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_offsetUnset","($pKey)","",2],["Session::rewind","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_rewind","()","",2],["Session::current","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_current","()","",2],["Session::key","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_key","()","",2],["Session::next","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_next","()","",2],["Session::valid","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_valid","()","",2],["Session::count","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_count","()","",2],["Session::__issset","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method___issset","($pKey)","",2],["Session::__get","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method___get","($pKey)","",2],["Session::__set","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method___set","($pKey, $pValue)","",2],["Session::__unset","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method___unset","($pKey)","",2],["Session::flash","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_flash","(mixed $pKey = null, mixed $pValue = null)","",2],["Session::clear","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_clear","()","",2],["Session::destroy","Elixir\\HTTP\\Session\\Session","Elixir\/HTTP\/Session\/Session.html#method_destroy","()","",2],["SessionInterface::setHandler","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_setHandler","(<abbr title=\"Elixir\\HTTP\\Session\\SessionHandlerInterface\">SessionHandlerInterface<\/abbr> $pValue)","",2],["SessionInterface::geHandler","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_geHandler","()","",2],["SessionInterface::exist","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_exist","()","",2],["SessionInterface::setId","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_setId","(string $pValue)","",2],["SessionInterface::getId","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_getId","()","",2],["SessionInterface::setName","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_setName","(string $pValue)","",2],["SessionInterface::getName","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_getName","()","",2],["SessionInterface::regenerate","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_regenerate","(boolean $pDeleteOldSession = true)","",2],["SessionInterface::start","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_start","()","",2],["SessionInterface::has","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_has","(mixed $pKey)","",2],["SessionInterface::get","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_get","(mixed $pKey, mixed $pDefault = null)","",2],["SessionInterface::set","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_set","(mixed $pKey, mixed $pValue)","",2],["SessionInterface::remove","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_remove","(mixed $pKey)","",2],["SessionInterface::gets","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_gets","()","",2],["SessionInterface::sets","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_sets","(array $pData)","",2],["SessionInterface::flash","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_flash","(mixed $pKey = null, mixed $pValue = null)","",2],["SessionInterface::clear","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_clear","()","",2],["SessionInterface::destroy","Elixir\\HTTP\\Session\\SessionInterface","Elixir\/HTTP\/Session\/SessionInterface.html#method_destroy","()","",2],["Uploader::__construct","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method___construct","(string $pName = null)","",2],["Uploader::setName","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_setName","(string $pValue)","",2],["Uploader::getName","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getName","()","",2],["Uploader::getFileName","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getFileName","()","",2],["Uploader::getTempName","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getTempName","()","",2],["Uploader::hasMultipleFiles","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_hasMultipleFiles","()","",2],["Uploader::setErrorMessage","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_setErrorMessage","(string $pValue)","",2],["Uploader::getErrorMessage","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getErrorMessage","()","",2],["Uploader::setErrorMessageTemplate","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_setErrorMessageTemplate","(string $pKey, string $pValue)","",2],["Uploader::getErrorMessageTemplate","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getErrorMessageTemplate","(string $pKey, mixed $pDefault = null)","",2],["Uploader::getErrorMessageTemplates","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getErrorMessageTemplates","()","",2],["Uploader::setErrorMessageTemplates","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_setErrorMessageTemplates","(array $pData)","",2],["Uploader::setErrorBreak","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_setErrorBreak","(boolean $pValue)","",2],["Uploader::isErrorBreak","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_isErrorBreak","()","",2],["Uploader::addValidator","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_addValidator","(<a href=\"Elixir\/Validator\/ValidatorInterface.html\"><abbr title=\"Elixir\\Validator\\ValidatorInterface\">ValidatorInterface<\/abbr><\/a>|<abbr title=\"Elixir\\HTTP\\callable\">callable<\/abbr>|string $pValidator, array $pOptions = array())","",2],["Uploader::getValidators","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getValidators","()","",2],["Uploader::setValidators","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_setValidators","(array $pData)","",2],["Uploader::addFilter","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_addFilter","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a>|<abbr title=\"Elixir\\HTTP\\callable\">callable<\/abbr>|string $pFilter, array $pOptions = array())","",2],["Uploader::getFilters","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getFilters","()","",2],["Uploader::setFilters","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_setFilters","(array $pData)","",2],["Uploader::getFileInfo","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_getFileInfo","()","",2],["Uploader::isUploaded","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_isUploaded","()","",2],["Uploader::isValid","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_isValid","()","",2],["Uploader::receive","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_receive","()","",2],["Uploader::hasError","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_hasError","()","",2],["Uploader::errors","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_errors","()","",2],["Uploader::reset","Elixir\\HTTP\\Uploader","Elixir\/HTTP\/Uploader.html#method_reset","()","",2],["Action::__construct","Elixir\\Helper\\Action","Elixir\/Helper\/Action.html#method___construct","(<a href=\"Elixir\/MVC\/ApplicationInterface.html\"><abbr title=\"Elixir\\MVC\\ApplicationInterface\">ApplicationInterface<\/abbr><\/a> $pApplication = null)","",2],["Action::setController","Elixir\\Helper\\Action","Elixir\/Helper\/Action.html#method_setController","(<a href=\"Elixir\/MVC\/Controller\/ControllerInterface.html\"><abbr title=\"Elixir\\MVC\\Controller\\ControllerInterface\">ControllerInterface<\/abbr><\/a> $pValue)","",2],["Action::get","Elixir\\Helper\\Action","Elixir\/Helper\/Action.html#method_get","(string $pPathInfo, array $pAttributes = array(), boolean $pResetOthersAttributes = true)","",2],["Action::direct","Elixir\\Helper\\Action","Elixir\/Helper\/Action.html#method_direct","()","",2],["Form::__construct","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method___construct","(<a href=\"Elixir\/Filter\/Escaper.html\"><abbr title=\"Elixir\\Filter\\Escaper\">Escaper<\/abbr><\/a> $pEscaper = null)","",2],["Form::setEscaper","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_setEscaper","(<a href=\"Elixir\/Filter\/Escaper.html\"><abbr title=\"Elixir\\Filter\\Escaper\">Escaper<\/abbr><\/a> $pValue = null)","",2],["Form::getEscaper","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_getEscaper","()","",2],["Form::setEnabledProtection","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_setEnabledProtection","(boolean $pValue)","",2],["Form::isEnableProtection","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_isEnableProtection","()","",2],["Form::form","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_form","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pForm, boolean $pUseLabel = true, boolean $pUseError = true, string $pSeparator = &#039;\n&#039;)","",2],["Form::formRest","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_formRest","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pForm, boolean $pUseLabel = true, boolean $pUseError = true, string $pSeparator = &#039;\n&#039;)","",2],["Form::openFormTag","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_openFormTag","(<a href=\"Elixir\/Form\/FormInterface.html\"><abbr title=\"Elixir\\Form\\FormInterface\">FormInterface<\/abbr><\/a> $pForm = null, array $pAttributes = array())","",2],["Form::closeFormTag","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_closeFormTag","()","",2],["Form::openFieldsetTag","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_openFieldsetTag","(string $pLegend = null, array $pAttributes = array())","",2],["Form::closeFieldsetTag","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_closeFieldsetTag","()","",2],["Form::openLabelTag","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_openLabelTag","(array $pAttributes = array())","",2],["Form::closeLabelTag","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_closeLabelTag","()","",2],["Form::field","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_field","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a> $pField, boolean $pUseLabel = true, boolean $pUseError = true)","",2],["Form::fieldErrors","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_fieldErrors","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|array $pFieldOrErrors, string $pTag = &#039;ul&#039;, array $pAttributes = array(&#039;class&#039; =&gt; &#039;form-error&#039;))","",2],["Form::input","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_input","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|mixed $pFieldOrValue = null, array $pAttributes = array())","",2],["Form::CSRF","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_CSRF","($pFieldOrValue, array $pAttributes = array())","",2],["Form::button","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_button","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|mixed $pFieldOrValue = null, array $pAttributes = array())","",2],["Form::textarea","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_textarea","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|mixed $pFieldOrValue = null, array $pAttributes = array())","",2],["Form::select","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_select","($pFieldOrValue = null, array $pAttributes = array(), array $pOptions = array())","",2],["Form::checkbox","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_checkbox","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|mixed $pFieldOrValue = null, array $pAttributes = array(), array $pOptions = array())","",2],["Form::radio","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_radio","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|mixed $pFieldOrValue = null, array $pAttributes = array(), array $pOptions = array())","",2],["Form::file","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_file","(<a href=\"Elixir\/Form\/Field\/FieldInterface.html\"><abbr title=\"Elixir\\Form\\Field\\FieldInterface\">FieldInterface<\/abbr><\/a>|mixed $pFieldOrValue = null, array $pAttributes = array(), array $pOptions = array())","",2],["Form::direct","Elixir\\Helper\\Form","Elixir\/Helper\/Form.html#method_direct","()","",2],["Forward::__construct","Elixir\\Helper\\Forward","Elixir\/Helper\/Forward.html#method___construct","(<a href=\"Elixir\/MVC\/ApplicationInterface.html\"><abbr title=\"Elixir\\MVC\\ApplicationInterface\">ApplicationInterface<\/abbr><\/a> $pApplication = null)","",2],["Forward::setController","Elixir\\Helper\\Forward","Elixir\/Helper\/Forward.html#method_setController","(<a href=\"Elixir\/MVC\/Controller\/ControllerInterface.html\"><abbr title=\"Elixir\\MVC\\Controller\\ControllerInterface\">ControllerInterface<\/abbr><\/a> $pValue)","",2],["Forward::to","Elixir\\Helper\\Forward","Elixir\/Helper\/Forward.html#method_to","(string $pModule = null, string $pController = null, string $pAction = null, array $pAttributes = array(), boolean $pResetOthersAttributes = true)","",2],["Forward::direct","Elixir\\Helper\\Forward","Elixir\/Helper\/Forward.html#method_direct","()","",2],["HelperInterface::direct","Elixir\\Helper\\HelperInterface","Elixir\/Helper\/HelperInterface.html#method_direct","()","",2],["I18N::__construct","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method___construct","(<a href=\"Elixir\/I18N\/I18NInterface.html\"><abbr title=\"Elixir\\I18N\\I18NInterface\">I18NInterface<\/abbr><\/a> $pI18N)","",2],["I18N::getI18N","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method_getI18N","()","",2],["I18N::translate","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method_translate","($pMessage, array $pOptions = array())","",2],["I18N::_","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method__","($pMessage, array $pOptions = array())","",2],["I18N::pluralize","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method_pluralize","(array $pMessage, <abbr title=\"Elixir\\Helper\\float\">float<\/abbr> $pCount, array $pOptions = array())","",2],["I18N::transPlural","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method_transPlural","(string|array $pMessage, <abbr title=\"Elixir\\Helper\\float\">float<\/abbr> $pCount, array $pOptions = array())","",2],["I18N::__call","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method___call","(string $pMethod, array $pArguments)","",2],["I18N::direct","Elixir\\Helper\\I18N","Elixir\/Helper\/I18N.html#method_direct","()","",2],["Locator::__construct","Elixir\\Helper\\Locator","Elixir\/Helper\/Locator.html#method___construct","(<a href=\"Elixir\/MVC\/ApplicationInterface.html\"><abbr title=\"Elixir\\MVC\\ApplicationInterface\">ApplicationInterface<\/abbr><\/a> $pApplication)","",2],["Locator::locateClass","Elixir\\Helper\\Locator","Elixir\/Helper\/Locator.html#method_locateClass","($pClassName)","",2],["Locator::locateFile","Elixir\\Helper\\Locator","Elixir\/Helper\/Locator.html#method_locateFile","($pFilePath, $pAll = false)","",2],["Locator::direct","Elixir\\Helper\\Locator","Elixir\/Helper\/Locator.html#method_direct","()","",2],["Pagination::setView","Elixir\\Helper\\Pagination","Elixir\/Helper\/Pagination.html#method_setView","(<a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pValue)","",2],["Pagination::setLocator","Elixir\\Helper\\Pagination","Elixir\/Helper\/Pagination.html#method_setLocator","(<a href=\"Elixir\/Helper\/Locator.html\"><abbr title=\"Elixir\\Helper\\Locator\">Locator<\/abbr><\/a> $pValue)","",2],["Pagination::getLocator","Elixir\\Helper\\Pagination","Elixir\/Helper\/Pagination.html#method_getLocator","()","",2],["Pagination::paginate","Elixir\\Helper\\Pagination","Elixir\/Helper\/Pagination.html#method_paginate","(<a href=\"Elixir\/Pagination\/PaginationInterface.html\"><abbr title=\"Elixir\\Pagination\\PaginationInterface\">PaginationInterface<\/abbr><\/a> $pPagination, string $pFilePath)","",2],["Pagination::direct","Elixir\\Helper\\Pagination","Elixir\/Helper\/Pagination.html#method_direct","()","",2],["Partial::setView","Elixir\\Helper\\Partial","Elixir\/Helper\/Partial.html#method_setView","(<a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pValue)","",2],["Partial::setLocator","Elixir\\Helper\\Partial","Elixir\/Helper\/Partial.html#method_setLocator","(<a href=\"Elixir\/Helper\/Locator.html\"><abbr title=\"Elixir\\Helper\\Locator\">Locator<\/abbr><\/a> $pValue)","",2],["Partial::getLocator","Elixir\\Helper\\Partial","Elixir\/Helper\/Partial.html#method_getLocator","()","",2],["Partial::renderLoop","Elixir\\Helper\\Partial","Elixir\/Helper\/Partial.html#method_renderLoop","(string|<a href=\"Elixir\/View\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\View\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pTemplate, array $pParams = array())","",2],["Partial::render","Elixir\\Helper\\Partial","Elixir\/Helper\/Partial.html#method_render","($pTemplate, array $pParams = array())","",2],["Partial::direct","Elixir\\Helper\\Partial","Elixir\/Helper\/Partial.html#method_direct","()","",2],["Renderer::__construct","Elixir\\Helper\\Renderer","Elixir\/Helper\/Renderer.html#method___construct","(<a href=\"Elixir\/MVC\/ApplicationInterface.html\"><abbr title=\"Elixir\\MVC\\ApplicationInterface\">ApplicationInterface<\/abbr><\/a> $pApplication = null)","",2],["Renderer::setController","Elixir\\Helper\\Renderer","Elixir\/Helper\/Renderer.html#method_setController","(<a href=\"Elixir\/MVC\/Controller\/ControllerInterface.html\"><abbr title=\"Elixir\\MVC\\Controller\\ControllerInterface\">ControllerInterface<\/abbr><\/a> $pValue)","",2],["Renderer::render","Elixir\\Helper\\Renderer","Elixir\/Helper\/Renderer.html#method_render","(string|<a href=\"Elixir\/View\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\View\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pTemplate, array|<a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pDataOrView = array())","",2],["Renderer::renderResponse","Elixir\\Helper\\Renderer","Elixir\/Helper\/Renderer.html#method_renderResponse","(string|<a href=\"Elixir\/View\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\View\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pTemplate, array|<a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pDataOrView = array(), integer $pStatus = 200, string $pProtocol = null, array $pHeaders = array())","",2],["Renderer::renderTextResponse","Elixir\\Helper\\Renderer","Elixir\/Helper\/Renderer.html#method_renderTextResponse","(string $pText, integer $pStatus = 200, string $pProtocol = null, array $pHeaders = array())","",2],["Renderer::direct","Elixir\\Helper\\Renderer","Elixir\/Helper\/Renderer.html#method_direct","()","",2],["Security::setManager","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_setManager","(<a href=\"Elixir\/Security\/Authentification\/Manager.html\"><abbr title=\"Elixir\\Security\\Authentification\\Manager\">Manager<\/abbr><\/a> $pValue)","",2],["Security::getManager","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_getManager","()","",2],["Security::setRequest","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_setRequest","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pValue)","",2],["Security::getRequest","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_getRequest","()","",2],["Security::setRBAC","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_setRBAC","(<a href=\"Elixir\/Security\/RBAC\/RBACInterface.html\"><abbr title=\"Elixir\\Security\\RBAC\\RBACInterface\">RBACInterface<\/abbr><\/a> $pValue)","",2],["Security::getRBAC","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_getRBAC","()","",2],["Security::setFirewall","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_setFirewall","(<a href=\"Elixir\/Security\/Firewall\/FirewallInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\FirewallInterface\">FirewallInterface<\/abbr><\/a> $pValue)","",2],["Security::getFirewall","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_getFirewall","()","",2],["Security::hasIdentity","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_hasIdentity","(string $pIdentity)","",2],["Security::hasRole","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_hasRole","(string $pRole, string $pIdentity = null)","",2],["Security::isGrantedRole","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_isGrantedRole","(string $pRole, string $pPermission = null, <abbr title=\"Elixir\\Helper\\callable\">callable<\/abbr> $pAssert = null, string $pIdentity = null)","",2],["Security::isGrantedResource","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_isGrantedResource","(string $pResource, array $pTempParameters = array())","",2],["Security::direct","Elixir\\Helper\\Security","Elixir\/Helper\/Security.html#method_direct","()","",2],["URL::__construct","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method___construct","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest = null)","",2],["URL::setView","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_setView","(<a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pValue)","",2],["URL::setController","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_setController","(<a href=\"Elixir\/MVC\/Controller\/ControllerInterface.html\"><abbr title=\"Elixir\\MVC\\Controller\\ControllerInterface\">ControllerInterface<\/abbr><\/a> $pValue)","",2],["URL::setLocator","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_setLocator","(<a href=\"Elixir\/Helper\/Locator.html\"><abbr title=\"Elixir\\Helper\\Locator\">Locator<\/abbr><\/a> $pValue)","",2],["URL::getLocator","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_getLocator","()","",2],["URL::setRouter","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_setRouter","(<a href=\"Elixir\/Routing\/RouterInterface.html\"><abbr title=\"Elixir\\Routing\\RouterInterface\">RouterInterface<\/abbr><\/a> $pValue)","",2],["URL::getRouter","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_getRouter","()","",2],["URL::baseURL","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_baseURL","(string $pUrl = &#039;&#039;)","",2],["URL::generate","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_generate","(string $pRouteName, array|string $pOptions = array(), string $pMode = GeneratorInterface::URL_ABSOLUTE)","",2],["URL::route","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_route","(string $pRouteName, mixed $pDefault = null)","",2],["URL::direct","Elixir\\Helper\\URL","Elixir\/Helper\/URL.html#method_direct","()","",2],["I18N::__construct","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method___construct","(array $pTextDomains = array(), string $pLocale = null)","",2],["I18N::setLocale","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_setLocale","(string $pValue)","",2],["I18N::getLocale","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_getLocale","()","",2],["I18N::setPlural","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_setPlural","(<a href=\"Elixir\/I18N\/Plural.html\"><abbr title=\"Elixir\\I18N\\Plural\">Plural<\/abbr><\/a> $pValue)","",2],["I18N::getPlural","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_getPlural","()","",2],["I18N::load","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_load","($pResource, $pLocale = null)","",2],["I18N::export","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_export","(<a href=\"Elixir\/I18N\/Writer\/WriterInterface.html\"><abbr title=\"Elixir\\I18N\\Writer\\WriterInterface\">WriterInterface<\/abbr><\/a> $pWriter, string $pFile)","",2],["I18N::hasTextDomain","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_hasTextDomain","(string $pName)","",2],["I18N::addTextDomain","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_addTextDomain","(<a href=\"Elixir\/I18N\/TextDomain.html\"><abbr title=\"Elixir\\I18N\\TextDomain\">TextDomain<\/abbr><\/a> $pTextDomain, string $pName = self::DEFAULT_TEXT_DOMAIN)","",2],["I18N::getTextDomain","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_getTextDomain","(string $pName, mixed $pDefault = null)","",2],["I18N::removeTextDomain","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_removeTextDomain","(string $pName)","",2],["I18N::getTextDomains","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_getTextDomains","()","",2],["I18N::setTextDomains","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_setTextDomains","(array $pData)","",2],["I18N::translate","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_translate","(string|array $pMessage, string $pLocale = null, string $pTextDomain = self::ALL_TEXT_DOMAINS)","",2],["I18N::pluralize","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_pluralize","(string|array $pMessage, <abbr title=\"Elixir\\I18N\\float\">float<\/abbr> $pCount, string $pLocale = null)","",2],["I18N::transPlural","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_transPlural","(string|array $pMessage, <abbr title=\"Elixir\\I18N\\float\">float<\/abbr> $pCount, string $pLocale = null, string $pTextDomain = self::ALL_TEXT_DOMAINS)","",2],["I18N::__call","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method___call","(string $pMethod, array $pArguments)","",2],["I18N::merge","Elixir\\I18N\\I18N","Elixir\/I18N\/I18N.html#method_merge","(array|<a href=\"Elixir\/I18N\/I18NInterface.html\"><abbr title=\"Elixir\\I18N\\I18NInterface\">I18NInterface<\/abbr><\/a> $pData)","",2],["I18NEvent::__construct","Elixir\\I18N\\I18NEvent","Elixir\/I18N\/I18NEvent.html#method___construct","(string $pType, $pMessage = null, $pLocale = null)","",2],["I18NEvent::setMessage","Elixir\\I18N\\I18NEvent","Elixir\/I18N\/I18NEvent.html#method_setMessage","(string $pValue)","",2],["I18NEvent::getMessage","Elixir\\I18N\\I18NEvent","Elixir\/I18N\/I18NEvent.html#method_getMessage","()","",2],["I18NEvent::getLocale","Elixir\\I18N\\I18NEvent","Elixir\/I18N\/I18NEvent.html#method_getLocale","()","",2],["I18NInterface::setLocale","Elixir\\I18N\\I18NInterface","Elixir\/I18N\/I18NInterface.html#method_setLocale","(string $pValue)","",2],["I18NInterface::getLocale","Elixir\\I18N\\I18NInterface","Elixir\/I18N\/I18NInterface.html#method_getLocale","()","",2],["I18NInterface::getTextDomains","Elixir\\I18N\\I18NInterface","Elixir\/I18N\/I18NInterface.html#method_getTextDomains","()","",2],["I18NInterface::translate","Elixir\\I18N\\I18NInterface","Elixir\/I18N\/I18NInterface.html#method_translate","(string|array $pMessage, string $pLocale = null, string $pTextDomain = self::DEFAULT_TEXT_DOMAIN)","",2],["I18NInterface::pluralize","Elixir\\I18N\\I18NInterface","Elixir\/I18N\/I18NInterface.html#method_pluralize","(string|array $pMessage, <abbr title=\"Elixir\\I18N\\float\">float<\/abbr> $pCount, string $pLocale = null)","",2],["I18NInterface::transPlural","Elixir\\I18N\\I18NInterface","Elixir\/I18N\/I18NInterface.html#method_transPlural","(string|array $pMessage, <abbr title=\"Elixir\\I18N\\float\">float<\/abbr> $pCount, string $pLocale = null, string $pTextDomain = self::DEFAULT_TEXT_DOMAIN)","",2],["Arr::load","Elixir\\I18N\\Loader\\Arr","Elixir\/I18N\/Loader\/Arr.html#method_load","(mixed $pResource)","",2],["CSV::load","Elixir\\I18N\\Loader\\CSV","Elixir\/I18N\/Loader\/CSV.html#method_load","(mixed $pResource)","",2],["Gettext::load","Elixir\\I18N\\Loader\\Gettext","Elixir\/I18N\/Loader\/Gettext.html#method_load","(mixed $pResource)","",2],["JSON::load","Elixir\\I18N\\Loader\\JSON","Elixir\/I18N\/Loader\/JSON.html#method_load","(mixed $pResource)","",2],["LoaderFactory::create","Elixir\\I18N\\Loader\\LoaderFactory","Elixir\/I18N\/Loader\/LoaderFactory.html#method_create","(mixed $pResource)","",2],["LoaderInterface::load","Elixir\\I18N\\Loader\\LoaderInterface","Elixir\/I18N\/Loader\/LoaderInterface.html#method_load","(mixed $pResource)","",2],["Locale::acceptFromHttp","Elixir\\I18N\\Locale","Elixir\/I18N\/Locale.html#method_acceptFromHttp","(string $pHeader = null)","",2],["Locale::setDefault","Elixir\\I18N\\Locale","Elixir\/I18N\/Locale.html#method_setDefault","(string $pLocale = &#039;fr-FR&#039;)","",2],["Locale::getDefault","Elixir\\I18N\\Locale","Elixir\/I18N\/Locale.html#method_getDefault","()","",2],["Locale::__callStatic","Elixir\\I18N\\Locale","Elixir\/I18N\/Locale.html#method___callStatic","(string $pMethod, array $pArguments)","",2],["Plural::__construct","Elixir\\I18N\\Plural","Elixir\/I18N\/Plural.html#method___construct","()","",2],["Plural::hasRule","Elixir\\I18N\\Plural","Elixir\/I18N\/Plural.html#method_hasRule","(string $pLocale)","",2],["Plural::addRule","Elixir\\I18N\\Plural","Elixir\/I18N\/Plural.html#method_addRule","(string $pLocale, <abbr title=\"Elixir\\I18N\\callable\">callable<\/abbr> $pRule)","",2],["Plural::removeRule","Elixir\\I18N\\Plural","Elixir\/I18N\/Plural.html#method_removeRule","(string $pLocale)","",2],["Plural::getRules","Elixir\\I18N\\Plural","Elixir\/I18N\/Plural.html#method_getRules","()","",2],["Plural::setRules","Elixir\\I18N\\Plural","Elixir\/I18N\/Plural.html#method_setRules","(array $pData)","",2],["Plural::pluralize","Elixir\\I18N\\Plural","Elixir\/I18N\/Plural.html#method_pluralize","(string|array $pMessage, <abbr title=\"Elixir\\I18N\\float\">float<\/abbr> $pCount, string $pLocale)","",2],["TextDomain::__construct","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method___construct","(array $pResources = array(), array $pData = array())","",2],["TextDomain::addResource","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_addResource","(mixed $pResource, string $pLocale)","",2],["TextDomain::getResources","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_getResources","()","",2],["TextDomain::setResources","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_setResources","(array $pData)","",2],["TextDomain::has","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_has","(mixed $pKey, string $pLocale)","",2],["TextDomain::set","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_set","(mixed $pKey, mixed $pValue, string $pLocale)","",2],["TextDomain::get","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_get","(string $pKey, string $pLocale, mixed $pDefault = null)","",2],["TextDomain::remove","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_remove","(string $pKey, string $pLocale)","",2],["TextDomain::gets","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_gets","(boolean $pLoadResources = false)","",2],["TextDomain::sets","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_sets","(array $pData)","",2],["TextDomain::isLoaded","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_isLoaded","($pLocale)","",2],["TextDomain::load","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_load","(string $pLocale)","",2],["TextDomain::merge","Elixir\\I18N\\TextDomain","Elixir\/I18N\/TextDomain.html#method_merge","(<a href=\"Elixir\/I18N\/TextDomain.html\"><abbr title=\"Elixir\\I18N\\TextDomain\">TextDomain<\/abbr><\/a> $pTextDomain)","",2],["Arr::write","Elixir\\I18N\\Writer\\Arr","Elixir\/I18N\/Writer\/Arr.html#method_write","()","",2],["Arr::export","Elixir\\I18N\\Writer\\Arr","Elixir\/I18N\/Writer\/Arr.html#method_export","(string $pFile)","",2],["WriterAbstract::__construct","Elixir\\I18N\\Writer\\WriterAbstract","Elixir\/I18N\/Writer\/WriterAbstract.html#method___construct","(<a href=\"Elixir\/I18N\/I18NInterface.html\"><abbr title=\"Elixir\\I18N\\I18NInterface\">I18NInterface<\/abbr><\/a> $pI18N = null)","",2],["WriterAbstract::setI18N","Elixir\\I18N\\Writer\\WriterAbstract","Elixir\/I18N\/Writer\/WriterAbstract.html#method_setI18N","(<a href=\"Elixir\/I18N\/I18NInterface.html\"><abbr title=\"Elixir\\I18N\\I18NInterface\">I18NInterface<\/abbr><\/a> $pValue)","",2],["WriterAbstract::getI18N","Elixir\\I18N\\Writer\\WriterAbstract","Elixir\/I18N\/Writer\/WriterAbstract.html#method_getI18N","()","",2],["WriterInterface::setI18N","Elixir\\I18N\\Writer\\WriterInterface","Elixir\/I18N\/Writer\/WriterInterface.html#method_setI18N","(<a href=\"Elixir\/I18N\/I18NInterface.html\"><abbr title=\"Elixir\\I18N\\I18NInterface\">I18NInterface<\/abbr><\/a> $pValue)","",2],["WriterInterface::write","Elixir\\I18N\\Writer\\WriterInterface","Elixir\/I18N\/Writer\/WriterInterface.html#method_write","()","",2],["WriterInterface::export","Elixir\\I18N\\Writer\\WriterInterface","Elixir\/I18N\/Writer\/WriterInterface.html#method_export","(string $pFile)","",2],["Logger::setDisabled","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_setDisabled","(boolean $pValue)","",2],["Logger::isDisabled","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_isDisabled","()","",2],["Logger::addWriter","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_addWriter","(<a href=\"Elixir\/Logging\/Writer\/WriterInterface.html\"><abbr title=\"Elixir\\Logging\\Writer\\WriterInterface\">WriterInterface<\/abbr><\/a> $pWriter)","",2],["Logger::getWriters","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_getWriters","()","",2],["Logger::setWriters","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_setWriters","(array $pData)","",2],["Logger::emerg","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_emerg","(string $pMessage)","",2],["Logger::alert","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_alert","(string $pMessage)","",2],["Logger::crit","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_crit","(string $pMessage)","",2],["Logger::error","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_error","(string $pMessage)","",2],["Logger::warn","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_warn","(string $pMessage)","",2],["Logger::notice","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_notice","(string $pMessage)","",2],["Logger::info","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_info","(string $pMessage)","",2],["Logger::debug","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_debug","(string $pMessage)","",2],["Logger::log","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method_log","(string $pMessage, integer $pSeverity = self::INFO)","",2],["Logger::__call","Elixir\\Logging\\Logger","Elixir\/Logging\/Logger.html#method___call","(string $pMethod, array $pArguments)","",2],["LoggerEvent::__construct","Elixir\\Logging\\LoggerEvent","Elixir\/Logging\/LoggerEvent.html#method___construct","(string $pType, $pMessage = null, $pSeverity = -1)","",2],["LoggerEvent::getMessage","Elixir\\Logging\\LoggerEvent","Elixir\/Logging\/LoggerEvent.html#method_getMessage","()","",2],["LoggerEvent::getSeverity","Elixir\\Logging\\LoggerEvent","Elixir\/Logging\/LoggerEvent.html#method_getSeverity","()","",2],["LoggerInterface::log","Elixir\\Logging\\LoggerInterface","Elixir\/Logging\/LoggerInterface.html#method_log","(string $pMessage, integer $pSeverity = self::INFO)","",2],["File::__construct","Elixir\\Logging\\Writer\\File","Elixir\/Logging\/Writer\/File.html#method___construct","(string $pPath = &#039;application\/logging\/log.txt&#039;)","",2],["File::__destruct","Elixir\\Logging\\Writer\\File","Elixir\/Logging\/Writer\/File.html#method___destruct","()","",2],["File::clear","Elixir\\Logging\\Writer\\File","Elixir\/Logging\/Writer\/File.html#method_clear","()","",2],["File::write","Elixir\\Logging\\Writer\\File","Elixir\/Logging\/Writer\/File.html#method_write","(string $pMessage, integer $pSeverity)","",2],["FirePHP::__construct","Elixir\\Logging\\Writer\\FirePHP","Elixir\/Logging\/Writer\/FirePHP.html#method___construct","()","",2],["FirePHP::clear","Elixir\\Logging\\Writer\\FirePHP","Elixir\/Logging\/Writer\/FirePHP.html#method_clear","()","",2],["FirePHP::write","Elixir\\Logging\\Writer\\FirePHP","Elixir\/Logging\/Writer\/FirePHP.html#method_write","(string $pMessage, integer $pSeverity)","",2],["WriterAbstract::setTimeFormat","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_setTimeFormat","(string $pValue)","",2],["WriterAbstract::getTimeFormat","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_getTimeFormat","()","",2],["WriterAbstract::getMessageTemplate","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_getMessageTemplate","()","",2],["WriterAbstract::setMessageTemplate","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_setMessageTemplate","(string $pValue)","",2],["WriterAbstract::isLocked","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_isLocked","(integer $pSeverity)","",2],["WriterAbstract::lock","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_lock","(integer $pSeverity)","",2],["WriterAbstract::unlock","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_unlock","(integer $pSeverity)","",2],["WriterAbstract::clear","Elixir\\Logging\\Writer\\WriterAbstract","Elixir\/Logging\/Writer\/WriterAbstract.html#method_clear","()","",2],["WriterInterface::write","Elixir\\Logging\\Writer\\WriterInterface","Elixir\/Logging\/Writer\/WriterInterface.html#method_write","(string $pMessage, integer $pSeverity)","",2],["Application::__construct","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method___construct","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["Application::getContainer","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_getContainer","()","",2],["Application::setCacheVersion","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_setCacheVersion","(string|<abbr title=\"Elixir\\MVC\\numeric\">numeric<\/abbr>|null $pValue)","",2],["Application::getCacheVersion","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_getCacheVersion","()","",2],["Application::loadFromCache","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_loadFromCache","(<a href=\"Elixir\/Cache\/CacheInterface.html\"><abbr title=\"Elixir\\Cache\\CacheInterface\">CacheInterface<\/abbr><\/a>|<a href=\"Elixir\/HTTP\/Session\/SessionInterface.html\"><abbr title=\"Elixir\\HTTP\\Session\\SessionInterface\">SessionInterface<\/abbr><\/a> $pCache, string $pKey = self::DEFAULT_CACHE_KEY)","",2],["Application::exportToCache","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_exportToCache","(<a href=\"Elixir\/Cache\/CacheInterface.html\"><abbr title=\"Elixir\\Cache\\CacheInterface\">CacheInterface<\/abbr><\/a>|<a href=\"Elixir\/HTTP\/Session\/SessionInterface.html\"><abbr title=\"Elixir\\HTTP\\Session\\SessionInterface\">SessionInterface<\/abbr><\/a> $pCache, string $pKey = self::DEFAULT_CACHE_KEY)","",2],["Application::setControllerResolver","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_setControllerResolver","(<a href=\"Elixir\/MVC\/Controller\/ControllerResolverInterface.html\"><abbr title=\"Elixir\\MVC\\Controller\\ControllerResolverInterface\">ControllerResolverInterface<\/abbr><\/a> $pValue)","",2],["Application::getControllerResolver","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_getControllerResolver","()","",2],["Application::hasModule","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_hasModule","(string $pName)","",2],["Application::getModule","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_getModule","(string $pName, mixed $pDefault = null)","",2],["Application::addModule","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_addModule","(<a href=\"Elixir\/MVC\/Module\/ModuleInterface.html\"><abbr title=\"Elixir\\MVC\\Module\\ModuleInterface\">ModuleInterface<\/abbr><\/a> $pModule)","",2],["Application::getModules","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_getModules","()","",2],["Application::setModules","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_setModules","(array $pData)","",2],["Application::isBooted","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_isBooted","()","",2],["Application::boot","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_boot","()","",2],["Application::getModuleHierarchy","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_getModuleHierarchy","(string $pModule, mixed $pDefault = null)","",2],["Application::locateClass","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_locateClass","(string $pClassName)","",2],["Application::locateFile","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_locateFile","(string $pFilePath, boolean $pAll = false)","",2],["Application::handle","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_handle","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest, string $pType = self::MAIN_REQUEST)","",2],["Application::terminate","Elixir\\MVC\\Application","Elixir\/MVC\/Application.html#method_terminate","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest, <a href=\"Elixir\/HTTP\/Response.html\"><abbr title=\"Elixir\\HTTP\\Response\">Response<\/abbr><\/a> $pResponse)","",2],["ApplicationEvent::__construct","Elixir\\MVC\\ApplicationEvent","Elixir\/MVC\/ApplicationEvent.html#method___construct","(string $pType, <a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest = null, $pRequestType = null, <a href=\"Elixir\/HTTP\/Response.html\"><abbr title=\"Elixir\\HTTP\\Response\">Response<\/abbr><\/a> $pResponse = null, <abbr title=\"Elixir\\MVC\\Exception\">Exception<\/abbr> $pException = null)","",2],["ApplicationEvent::getRequest","Elixir\\MVC\\ApplicationEvent","Elixir\/MVC\/ApplicationEvent.html#method_getRequest","()","",2],["ApplicationEvent::getRequestType","Elixir\\MVC\\ApplicationEvent","Elixir\/MVC\/ApplicationEvent.html#method_getRequestType","()","",2],["ApplicationEvent::setResponse","Elixir\\MVC\\ApplicationEvent","Elixir\/MVC\/ApplicationEvent.html#method_setResponse","(<a href=\"Elixir\/HTTP\/Response.html\"><abbr title=\"Elixir\\HTTP\\Response\">Response<\/abbr><\/a> $pValue)","",2],["ApplicationEvent::getResponse","Elixir\\MVC\\ApplicationEvent","Elixir\/MVC\/ApplicationEvent.html#method_getResponse","()","",2],["ApplicationEvent::getException","Elixir\\MVC\\ApplicationEvent","Elixir\/MVC\/ApplicationEvent.html#method_getException","()","",2],["ApplicationInterface::getContainer","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_getContainer","()","",2],["ApplicationInterface::getModule","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_getModule","(string $pName, mixed $pDefault = null)","",2],["ApplicationInterface::getModules","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_getModules","()","",2],["ApplicationInterface::locateClass","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_locateClass","(string $pClassName)","",2],["ApplicationInterface::locateFile","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_locateFile","(string $pFilePath, boolean $pAll = false)","",2],["ApplicationInterface::isBooted","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_isBooted","()","",2],["ApplicationInterface::boot","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_boot","()","",2],["ApplicationInterface::handle","Elixir\\MVC\\ApplicationInterface","Elixir\/MVC\/ApplicationInterface.html#method_handle","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest, string $pType = self::MAIN_REQUEST)","",2],["ControllerAbstract::initialize","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method_initialize","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest, <a href=\"Elixir\/Dispatcher\/DispatcherInterface.html\"><abbr title=\"Elixir\\Dispatcher\\DispatcherInterface\">DispatcherInterface<\/abbr><\/a> $pDispatcher, <a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["ControllerAbstract::getDispatcher","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method_getDispatcher","()","",2],["ControllerAbstract::getRequest","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method_getRequest","()","",2],["ControllerAbstract::getContainer","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method_getContainer","()","",2],["ControllerAbstract::setHelperContainer","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method_setHelperContainer","(<a href=\"Elixir\/MVC\/Controller\/Helper\/Container.html\"><abbr title=\"Elixir\\MVC\\Controller\\Helper\\Container\">Container<\/abbr><\/a>|<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["ControllerAbstract::getHelperContainer","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method_getHelperContainer","()","",2],["ControllerAbstract::helper","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method_helper","(string $pKey)","",2],["ControllerAbstract::__call","Elixir\\MVC\\Controller\\ControllerAbstract","Elixir\/MVC\/Controller\/ControllerAbstract.html#method___call","(string $pMethod, array $pArguments)","",2],["ControllerInterface::initialize","Elixir\\MVC\\Controller\\ControllerInterface","Elixir\/MVC\/Controller\/ControllerInterface.html#method_initialize","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest, <a href=\"Elixir\/Dispatcher\/DispatcherInterface.html\"><abbr title=\"Elixir\\Dispatcher\\DispatcherInterface\">DispatcherInterface<\/abbr><\/a> $pDispatcher, <a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["ControllerInterface::getRequest","Elixir\\MVC\\Controller\\ControllerInterface","Elixir\/MVC\/Controller\/ControllerInterface.html#method_getRequest","()","",2],["ControllerInterface::getDispatcher","Elixir\\MVC\\Controller\\ControllerInterface","Elixir\/MVC\/Controller\/ControllerInterface.html#method_getDispatcher","()","",2],["ControllerInterface::getContainer","Elixir\\MVC\\Controller\\ControllerInterface","Elixir\/MVC\/Controller\/ControllerInterface.html#method_getContainer","()","",2],["ControllerInterface::helper","Elixir\\MVC\\Controller\\ControllerInterface","Elixir\/MVC\/Controller\/ControllerInterface.html#method_helper","(string $pKey)","",2],["ControllerResolver::getController","Elixir\\MVC\\Controller\\ControllerResolver","Elixir\/MVC\/Controller\/ControllerResolver.html#method_getController","(<a href=\"Elixir\/MVC\/ApplicationInterface.html\"><abbr title=\"Elixir\\MVC\\ApplicationInterface\">ApplicationInterface<\/abbr><\/a> $pApplication, <a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest)","",2],["ControllerResolver::getArguments","Elixir\\MVC\\Controller\\ControllerResolver","Elixir\/MVC\/Controller\/ControllerResolver.html#method_getArguments","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest, <abbr title=\"Elixir\\MVC\\Controller\\callable\">callable<\/abbr> $pController)","",2],["ControllerResolverInterface::getController","Elixir\\MVC\\Controller\\ControllerResolverInterface","Elixir\/MVC\/Controller\/ControllerResolverInterface.html#method_getController","(<a href=\"Elixir\/MVC\/ApplicationInterface.html\"><abbr title=\"Elixir\\MVC\\ApplicationInterface\">ApplicationInterface<\/abbr><\/a> $pApplication, <a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest)","",2],["ControllerResolverInterface::getArguments","Elixir\\MVC\\Controller\\ControllerResolverInterface","Elixir\/MVC\/Controller\/ControllerResolverInterface.html#method_getArguments","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest, <abbr title=\"Elixir\\MVC\\Controller\\callable\">callable<\/abbr> $pController)","",2],["Container::__construct","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method___construct","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["Container::getContainer","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_getContainer","()","",2],["Container::setController","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_setController","(<a href=\"Elixir\/MVC\/Controller\/ControllerInterface.html\"><abbr title=\"Elixir\\MVC\\Controller\\ControllerInterface\">ControllerInterface<\/abbr><\/a> $pValue)","",2],["Container::getController","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_getController","()","",2],["Container::setUseTag","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_setUseTag","(boolean $pValue)","",2],["Container::isUseTag","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_isUseTag","()","",2],["Container::load","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_load","(array $pHelpers)","",2],["Container::get","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_get","($pKey, $pDefault = null)","",2],["Container::has","Elixir\\MVC\\Controller\\Helper\\Container","Elixir\/MVC\/Controller\/Helper\/Container.html#method_has","(string $pKey)","",2],["ContextInterface::setController","Elixir\\MVC\\Controller\\Helper\\ContextInterface","Elixir\/MVC\/Controller\/Helper\/ContextInterface.html#method_setController","(<a href=\"Elixir\/MVC\/Controller\/ControllerInterface.html\"><abbr title=\"Elixir\\MVC\\Controller\\ControllerInterface\">ControllerInterface<\/abbr><\/a> $pController)","",2],["RESTFulControllerAbstract::__call","Elixir\\MVC\\Controller\\RESTFulControllerAbstract","Elixir\/MVC\/Controller\/RESTFulControllerAbstract.html#method___call","(string $pMethod, array $pArguments)","",2],["ErrorException::__construct","Elixir\\MVC\\Exception\\ErrorException","Elixir\/MVC\/Exception\/ErrorException.html#method___construct","(<abbr title=\"Elixir\\MVC\\Exception\\type\">type<\/abbr> $pMessage = &#039;Internal Server Error&#039;)","",2],["ForbiddenException::__construct","Elixir\\MVC\\Exception\\ForbiddenException","Elixir\/MVC\/Exception\/ForbiddenException.html#method___construct","(<abbr title=\"Elixir\\MVC\\Exception\\type\">type<\/abbr> $pMessage = &#039;Forbidden&#039;)","",2],["NotFoundException::__construct","Elixir\\MVC\\Exception\\NotFoundException","Elixir\/MVC\/Exception\/NotFoundException.html#method___construct","(<abbr title=\"Elixir\\MVC\\Exception\\type\">type<\/abbr> $pMessage = &#039;Not Found&#039;)","",2],["ModuleAbstract::getName","Elixir\\MVC\\Module\\ModuleAbstract","Elixir\/MVC\/Module\/ModuleAbstract.html#method_getName","()","",2],["ModuleAbstract::getParent","Elixir\\MVC\\Module\\ModuleAbstract","Elixir\/MVC\/Module\/ModuleAbstract.html#method_getParent","()","",2],["ModuleAbstract::getNamespace","Elixir\\MVC\\Module\\ModuleAbstract","Elixir\/MVC\/Module\/ModuleAbstract.html#method_getNamespace","()","",2],["ModuleAbstract::getPath","Elixir\\MVC\\Module\\ModuleAbstract","Elixir\/MVC\/Module\/ModuleAbstract.html#method_getPath","()","",2],["ModuleAbstract::getRequired","Elixir\\MVC\\Module\\ModuleAbstract","Elixir\/MVC\/Module\/ModuleAbstract.html#method_getRequired","()","",2],["ModuleAbstract::register","Elixir\\MVC\\Module\\ModuleAbstract","Elixir\/MVC\/Module\/ModuleAbstract.html#method_register","(<a href=\"Elixir\/Dispatcher\/DispatcherInterface.html\"><abbr title=\"Elixir\\Dispatcher\\DispatcherInterface\">DispatcherInterface<\/abbr><\/a> $pDispatcher, <a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["ModuleInterface::getName","Elixir\\MVC\\Module\\ModuleInterface","Elixir\/MVC\/Module\/ModuleInterface.html#method_getName","()","",2],["ModuleInterface::getParent","Elixir\\MVC\\Module\\ModuleInterface","Elixir\/MVC\/Module\/ModuleInterface.html#method_getParent","()","",2],["ModuleInterface::getNamespace","Elixir\\MVC\\Module\\ModuleInterface","Elixir\/MVC\/Module\/ModuleInterface.html#method_getNamespace","()","",2],["ModuleInterface::getPath","Elixir\\MVC\\Module\\ModuleInterface","Elixir\/MVC\/Module\/ModuleInterface.html#method_getPath","()","",2],["ModuleInterface::getRequired","Elixir\\MVC\\Module\\ModuleInterface","Elixir\/MVC\/Module\/ModuleInterface.html#method_getRequired","()","",2],["ModuleInterface::register","Elixir\\MVC\\Module\\ModuleInterface","Elixir\/MVC\/Module\/ModuleInterface.html#method_register","(<a href=\"Elixir\/Dispatcher\/DispatcherInterface.html\"><abbr title=\"Elixir\\Dispatcher\\DispatcherInterface\">DispatcherInterface<\/abbr><\/a> $pDispatcher, <a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["ModuleInterface::boot","Elixir\\MVC\\Module\\ModuleInterface","Elixir\/MVC\/Module\/ModuleInterface.html#method_boot","()","",2],["SelectedInterface::isSelected","Elixir\\MVC\\Module\\SelectedInterface","Elixir\/MVC\/Module\/SelectedInterface.html#method_isSelected","()","",2],["SelectedInterface::selected","Elixir\\MVC\\Module\\SelectedInterface","Elixir\/MVC\/Module\/SelectedInterface.html#method_selected","()","",2],["Item::__construct","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method___construct","(integer $pIndex)","",2],["Item::getIndex","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method_getIndex","()","",2],["Item::setSelected","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method_setSelected","(boolean $pValue)","",2],["Item::isSelected","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method_isSelected","()","",2],["Item::setFirst","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method_setFirst","(boolean $pValue)","",2],["Item::isFirst","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method_isFirst","()","",2],["Item::setLast","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method_setLast","(boolean $pValue)","",2],["Item::isLast","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method_isLast","()","",2],["Item::__toString","Elixir\\Pagination\\Item","Elixir\/Pagination\/Item.html#method___toString","()","",2],["Pagination::__construct","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method___construct","(<a href=\"Elixir\/Pagination\/Style\/StyleInterface.html\"><abbr title=\"Elixir\\Pagination\\Style\\StyleInterface\">StyleInterface<\/abbr><\/a> $pStyle)","",2],["Pagination::getStyle","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getStyle","()","",2],["Pagination::setItemsPerPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_setItemsPerPage","(integer $pValue)","",2],["Pagination::getItemsPerPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getItemsPerPage","()","",2],["Pagination::setTotalItems","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_setTotalItems","(integer $pValue)","",2],["Pagination::getTotalItems","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getTotalItems","()","",2],["Pagination::getTotalPages","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getTotalPages","()","",2],["Pagination::setCurrentItem","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_setCurrentItem","(integer $pValue)","",2],["Pagination::getCurrentItem","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getCurrentItem","()","",2],["Pagination::hasNextItem","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_hasNextItem","()","",2],["Pagination::nextItem","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_nextItem","()","",2],["Pagination::hasPreviousItem","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_hasPreviousItem","()","",2],["Pagination::previousItem","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_previousItem","()","",2],["Pagination::setCurrentPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_setCurrentPage","(integer $pValue)","",2],["Pagination::getCurrentPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getCurrentPage","()","",2],["Pagination::hasNextPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_hasNextPage","()","",2],["Pagination::nextPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_nextPage","()","",2],["Pagination::hasPreviousPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_hasPreviousPage","()","",2],["Pagination::previousPage","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_previousPage","()","",2],["Pagination::hasParameter","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_hasParameter","(mixed $pKey)","",2],["Pagination::getParameter","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getParameter","(mixed $pKey, mixed $pDefault = null)","",2],["Pagination::setParameter","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_setParameter","(mixed $pKey, mixed $pValue)","",2],["Pagination::removeParameter","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_removeParameter","(mixed $pKey)","",2],["Pagination::getParameters","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getParameters","()","",2],["Pagination::setParameters","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_setParameters","(array $pData)","",2],["Pagination::getPageRange","Elixir\\Pagination\\Pagination","Elixir\/Pagination\/Pagination.html#method_getPageRange","()","",2],["PaginationInterface::getStyle","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getStyle","()","",2],["PaginationInterface::setItemsPerPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_setItemsPerPage","(integer $pValue)","",2],["PaginationInterface::getItemsPerPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getItemsPerPage","()","",2],["PaginationInterface::setTotalItems","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_setTotalItems","(integer $pValue)","",2],["PaginationInterface::getTotalItems","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getTotalItems","()","",2],["PaginationInterface::getTotalPages","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getTotalPages","()","",2],["PaginationInterface::setCurrentItem","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_setCurrentItem","(integer $pValue)","",2],["PaginationInterface::getCurrentItem","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getCurrentItem","()","",2],["PaginationInterface::hasNextItem","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_hasNextItem","()","",2],["PaginationInterface::nextItem","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_nextItem","()","",2],["PaginationInterface::hasPreviousItem","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_hasPreviousItem","()","",2],["PaginationInterface::previousItem","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_previousItem","()","",2],["PaginationInterface::setCurrentPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_setCurrentPage","(integer $pValue)","",2],["PaginationInterface::getCurrentPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getCurrentPage","()","",2],["PaginationInterface::hasNextPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_hasNextPage","()","",2],["PaginationInterface::nextPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_nextPage","()","",2],["PaginationInterface::hasPreviousPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_hasPreviousPage","()","",2],["PaginationInterface::previousPage","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_previousPage","()","",2],["PaginationInterface::getParameters","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getParameters","()","",2],["PaginationInterface::getPageRange","Elixir\\Pagination\\PaginationInterface","Elixir\/Pagination\/PaginationInterface.html#method_getPageRange","()","",2],["Elastic::getRange","Elixir\\Pagination\\Style\\Elastic","Elixir\/Pagination\/Style\/Elastic.html#method_getRange","(<a href=\"Elixir\/Pagination\/PaginationInterface.html\"><abbr title=\"Elixir\\Pagination\\PaginationInterface\">PaginationInterface<\/abbr><\/a> $pPagination)","",2],["Jumping::getRange","Elixir\\Pagination\\Style\\Jumping","Elixir\/Pagination\/Style\/Jumping.html#method_getRange","(<a href=\"Elixir\/Pagination\/PaginationInterface.html\"><abbr title=\"Elixir\\Pagination\\PaginationInterface\">PaginationInterface<\/abbr><\/a> $pPagination)","",2],["StyleInterface::getRange","Elixir\\Pagination\\Style\\StyleInterface","Elixir\/Pagination\/Style\/StyleInterface.html#method_getRange","(<a href=\"Elixir\/Pagination\/PaginationInterface.html\"><abbr title=\"Elixir\\Pagination\\PaginationInterface\">PaginationInterface<\/abbr><\/a> $pPagination)","",2],["Collection::has","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_has","(string $pName)","",2],["Collection::get","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_get","(string $pName, mixed $pDefault = null)","",2],["Collection::add","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_add","(string $pName, <a href=\"Elixir\/Routing\/Route.html\"><abbr title=\"Elixir\\Routing\\Route\">Route<\/abbr><\/a> $pRoute, integer $pPriority)","",2],["Collection::remove","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_remove","(string $pName)","",2],["Collection::gets","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_gets","(boolean $pWithInfos = false)","",2],["Collection::sets","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_sets","(array $pData)","",2],["Collection::sort","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_sort","()","",2],["Collection::merge","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method_merge","(<a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a>|array $pData)","",2],["Collection::__call","Elixir\\Routing\\Collection","Elixir\/Routing\/Collection.html#method___call","(string $pMethod, array $pArguments)","",2],["GeneratorInterface::setRequest","Elixir\\Routing\\Generator\\GeneratorInterface","Elixir\/Routing\/Generator\/GeneratorInterface.html#method_setRequest","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pValue)","",2],["GeneratorInterface::generate","Elixir\\Routing\\Generator\\GeneratorInterface","Elixir\/Routing\/Generator\/GeneratorInterface.html#method_generate","(<a href=\"Elixir\/Routing\/Route.html\"><abbr title=\"Elixir\\Routing\\Route\">Route<\/abbr><\/a> $pRoute, array $pOptions = array(), string $pMode = self::URL_RELATIVE)","",2],["QueryGenerator::getQueryKey","Elixir\\Routing\\Generator\\QueryGenerator","Elixir\/Routing\/Generator\/QueryGenerator.html#method_getQueryKey","()","",2],["QueryGenerator::setQueryKey","Elixir\\Routing\\Generator\\QueryGenerator","Elixir\/Routing\/Generator\/QueryGenerator.html#method_setQueryKey","(string $pValue)","",2],["QueryGenerator::generate","Elixir\\Routing\\Generator\\QueryGenerator","Elixir\/Routing\/Generator\/QueryGenerator.html#method_generate","(<a href=\"Elixir\/Routing\/Route.html\"><abbr title=\"Elixir\\Routing\\Route\">Route<\/abbr><\/a> $pRoute, array $pOptions = array(), string $pMode = self::URL_RELATIVE)","",2],["URLGenerator::__construct","Elixir\\Routing\\Generator\\URLGenerator","Elixir\/Routing\/Generator\/URLGenerator.html#method___construct","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest = null)","",2],["URLGenerator::setRequest","Elixir\\Routing\\Generator\\URLGenerator","Elixir\/Routing\/Generator\/URLGenerator.html#method_setRequest","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pValue)","",2],["URLGenerator::getRequest","Elixir\\Routing\\Generator\\URLGenerator","Elixir\/Routing\/Generator\/URLGenerator.html#method_getRequest","()","",2],["URLGenerator::setStrict","Elixir\\Routing\\Generator\\URLGenerator","Elixir\/Routing\/Generator\/URLGenerator.html#method_setStrict","(boolean $pValue)","",2],["URLGenerator::isStrict","Elixir\\Routing\\Generator\\URLGenerator","Elixir\/Routing\/Generator\/URLGenerator.html#method_isStrict","()","",2],["URLGenerator::clean","Elixir\\Routing\\Generator\\URLGenerator","Elixir\/Routing\/Generator\/URLGenerator.html#method_clean","($pMatches)","",2],["URLGenerator::generate","Elixir\\Routing\\Generator\\URLGenerator","Elixir\/Routing\/Generator\/URLGenerator.html#method_generate","(<a href=\"Elixir\/Routing\/Route.html\"><abbr title=\"Elixir\\Routing\\Route\">Route<\/abbr><\/a> $pRoute, array $pOptions = array(), string $pMode = self::URL_RELATIVE)","",2],["Arr::load","Elixir\\Routing\\Loader\\Arr","Elixir\/Routing\/Loader\/Arr.html#method_load","(mixed $pConfig, <a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection = null)","",2],["JSON::load","Elixir\\Routing\\Loader\\JSON","Elixir\/Routing\/Loader\/JSON.html#method_load","(mixed $pConfig, <a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection = null)","",2],["LoaderFactory::create","Elixir\\Routing\\Loader\\LoaderFactory","Elixir\/Routing\/Loader\/LoaderFactory.html#method_create","(mixed $pConfig)","",2],["LoaderInterface::load","Elixir\\Routing\\Loader\\LoaderInterface","Elixir\/Routing\/Loader\/LoaderInterface.html#method_load","(mixed $pConfig, <a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection = null)","",2],["XML::load","Elixir\\Routing\\Loader\\XML","Elixir\/Routing\/Loader\/XML.html#method_load","(mixed $pConfig, <a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection = null)","",2],["MatcherInterface::setRequest","Elixir\\Routing\\Matcher\\MatcherInterface","Elixir\/Routing\/Matcher\/MatcherInterface.html#method_setRequest","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pValue)","",2],["MatcherInterface::match","Elixir\\Routing\\Matcher\\MatcherInterface","Elixir\/Routing\/Matcher\/MatcherInterface.html#method_match","(<a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection, string $pURL)","",2],["QueryMatcher::getQueryKey","Elixir\\Routing\\Matcher\\QueryMatcher","Elixir\/Routing\/Matcher\/QueryMatcher.html#method_getQueryKey","()","",2],["QueryMatcher::setQueryKey","Elixir\\Routing\\Matcher\\QueryMatcher","Elixir\/Routing\/Matcher\/QueryMatcher.html#method_setQueryKey","(string $pValue)","",2],["QueryMatcher::match","Elixir\\Routing\\Matcher\\QueryMatcher","Elixir\/Routing\/Matcher\/QueryMatcher.html#method_match","(<a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection, string $pURL)","",2],["RouteMatch::__construct","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method___construct","(string $pRouteName, array $pParams = array())","",2],["RouteMatch::getRouteName","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method_getRouteName","()","",2],["RouteMatch::has","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method_has","(string $pKey)","",2],["RouteMatch::get","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["RouteMatch::set","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method_set","(string $pKey, mixed $pValue)","",2],["RouteMatch::remove","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method_remove","(string $pKey)","",2],["RouteMatch::gets","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method_gets","()","",2],["RouteMatch::sets","Elixir\\Routing\\Matcher\\RouteMatch","Elixir\/Routing\/Matcher\/RouteMatch.html#method_sets","(array $pData)","",2],["URLMatcher::__construct","Elixir\\Routing\\Matcher\\URLMatcher","Elixir\/Routing\/Matcher\/URLMatcher.html#method___construct","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest = null)","",2],["URLMatcher::setRequest","Elixir\\Routing\\Matcher\\URLMatcher","Elixir\/Routing\/Matcher\/URLMatcher.html#method_setRequest","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pValue)","",2],["URLMatcher::getRequest","Elixir\\Routing\\Matcher\\URLMatcher","Elixir\/Routing\/Matcher\/URLMatcher.html#method_getRequest","()","",2],["URLMatcher::match","Elixir\\Routing\\Matcher\\URLMatcher","Elixir\/Routing\/Matcher\/URLMatcher.html#method_match","(<a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection, string $pURL)","",2],["Route::__construct","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method___construct","(string $pPattern, array $pParameters = array(), array $pOptions = array())","",2],["Route::getPattern","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getPattern","()","",2],["Route::mvc","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_mvc","(string|<abbr title=\"Elixir\\Routing\\callable\">callable<\/abbr> $pValue)","",2],["Route::setModule","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setModule","(string $pValue)","",2],["Route::getModule","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getModule","()","",2],["Route::setController","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setController","(string|<abbr title=\"Elixir\\Routing\\callable\">callable<\/abbr> $pValue)","",2],["Route::getController","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getController","()","",2],["Route::setAction","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setAction","(string $pValue)","",2],["Route::getAction","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getAction","()","",2],["Route::hasParameter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_hasParameter","(string $pKey)","",2],["Route::getParameter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getParameter","(string $pKey, mixed $pDefault = null)","",2],["Route::setParameter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setParameter","(string $pKey, mixed $pValue)","",2],["Route::removeParameter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_removeParameter","(string $pKey)","",2],["Route::getParameters","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getParameters","()","",2],["Route::setParameters","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setParameters","(array $pData)","",2],["Route::prefix","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_prefix","(string $pValue)","",2],["Route::suffix","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_suffix","(string $pValue)","",2],["Route::setSecure","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setSecure","(boolean $pValue)","",2],["Route::isSecure","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_isSecure","()","",2],["Route::getMethods","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getMethods","()","",2],["Route::setMethods","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setMethods","(array $pData)","",2],["Route::setUseAttributes","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setUseAttributes","(boolean $pValue)","",2],["Route::isUseAttributes","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_isUseAttributes","()","",2],["Route::getReplacements","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getReplacements","()","",2],["Route::setReplacements","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setReplacements","(array $pData)","",2],["Route::setAssert","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setAssert","(<abbr title=\"Elixir\\Routing\\callable\">callable<\/abbr> $pValue)","",2],["Route::getAssert","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getAssert","()","",2],["Route::setGenerateFilter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setGenerateFilter","(<abbr title=\"Elixir\\Routing\\callable\">callable<\/abbr> $pValue)","",2],["Route::getGenerateFilter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getGenerateFilter","()","",2],["Route::setMatchedFilter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setMatchedFilter","(<abbr title=\"Elixir\\Routing\\callable\">callable<\/abbr> $pValue)","",2],["Route::getMatchedFilter","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getMatchedFilter","()","",2],["Route::hasOption","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_hasOption","(string $pKey)","",2],["Route::getOption","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getOption","(string $pKey, mixed $pDefault = null)","",2],["Route::setOption","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setOption","(string $pKey, mixed $pValue)","",2],["Route::removeOption","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_removeOption","(string $pKey)","",2],["Route::getOptions","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_getOptions","()","",2],["Route::setOptions","Elixir\\Routing\\Route","Elixir\/Routing\/Route.html#method_setOptions","(array $pData)","",2],["Router::__construct","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method___construct","(<a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pCollection = null)","",2],["Router::setCollection","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_setCollection","(<a href=\"Elixir\/Routing\/Collection.html\"><abbr title=\"Elixir\\Routing\\Collection\">Collection<\/abbr><\/a> $pValue)","",2],["Router::getCollection","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_getCollection","()","",2],["Router::setRequest","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_setRequest","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pValue)","",2],["Router::getRequest","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_getRequest","()","",2],["Router::setURLMatcher","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_setURLMatcher","(<a href=\"Elixir\/Routing\/Matcher\/MatcherInterface.html\"><abbr title=\"Elixir\\Routing\\Matcher\\MatcherInterface\">MatcherInterface<\/abbr><\/a> $pValue)","",2],["Router::getURLMatcher","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_getURLMatcher","()","",2],["Router::setURLGenerator","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_setURLGenerator","(<a href=\"Elixir\/Routing\/Generator\/GeneratorInterface.html\"><abbr title=\"Elixir\\Routing\\Generator\\GeneratorInterface\">GeneratorInterface<\/abbr><\/a> $pValue)","",2],["Router::getURLGenerator","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_getURLGenerator","()","",2],["Router::load","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_load","(mixed $pConfig)","",2],["Router::export","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_export","(<a href=\"Elixir\/Routing\/Writer\/WriterInterface.html\"><abbr title=\"Elixir\\Routing\\Writer\\WriterInterface\">WriterInterface<\/abbr><\/a> $pWriter, string $pFile)","",2],["Router::match","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_match","(string $pURL = null)","",2],["Router::generate","Elixir\\Routing\\Router","Elixir\/Routing\/Router.html#method_generate","(string $pName, array $pOptions = array(), string $pMode = GeneratorInterface::URL_ABSOLUTE)","",2],["RouterEvent::__construct","Elixir\\Routing\\RouterEvent","Elixir\/Routing\/RouterEvent.html#method___construct","(string $pType, <a href=\"Elixir\/Routing\/Matcher\/RouteMatch.html\"><abbr title=\"Elixir\\Routing\\Matcher\\RouteMatch\">RouteMatch<\/abbr><\/a> $pRouteMatch = null)","",2],["RouterEvent::getRouteMatch","Elixir\\Routing\\RouterEvent","Elixir\/Routing\/RouterEvent.html#method_getRouteMatch","()","",2],["RouterInterface::getCollection","Elixir\\Routing\\RouterInterface","Elixir\/Routing\/RouterInterface.html#method_getCollection","()","",2],["RouterInterface::getRequest","Elixir\\Routing\\RouterInterface","Elixir\/Routing\/RouterInterface.html#method_getRequest","()","",2],["RouterInterface::match","Elixir\\Routing\\RouterInterface","Elixir\/Routing\/RouterInterface.html#method_match","(string $pURL = null)","",2],["RouterInterface::generate","Elixir\\Routing\\RouterInterface","Elixir\/Routing\/RouterInterface.html#method_generate","(string $pName, array $pOptions = array(), string $pMode = GeneratorInterface::URL_ABSOLUTE)","",2],["Arr::write","Elixir\\Routing\\Writer\\Arr","Elixir\/Routing\/Writer\/Arr.html#method_write","()","",2],["Arr::export","Elixir\\Routing\\Writer\\Arr","Elixir\/Routing\/Writer\/Arr.html#method_export","(string $pFile)","",2],["WriterAbstract::__construct","Elixir\\Routing\\Writer\\WriterAbstract","Elixir\/Routing\/Writer\/WriterAbstract.html#method___construct","(<a href=\"Elixir\/Routing\/RouterInterface.html\"><abbr title=\"Elixir\\Routing\\RouterInterface\">RouterInterface<\/abbr><\/a> $pRouter = null)","",2],["WriterAbstract::setRouter","Elixir\\Routing\\Writer\\WriterAbstract","Elixir\/Routing\/Writer\/WriterAbstract.html#method_setRouter","(<a href=\"Elixir\/Routing\/RouterInterface.html\"><abbr title=\"Elixir\\Routing\\RouterInterface\">RouterInterface<\/abbr><\/a> $pValue)","",2],["WriterAbstract::getRouter","Elixir\\Routing\\Writer\\WriterAbstract","Elixir\/Routing\/Writer\/WriterAbstract.html#method_getRouter","()","",2],["WriterInterface::setRouter","Elixir\\Routing\\Writer\\WriterInterface","Elixir\/Routing\/Writer\/WriterInterface.html#method_setRouter","(<a href=\"Elixir\/Routing\/RouterInterface.html\"><abbr title=\"Elixir\\Routing\\RouterInterface\">RouterInterface<\/abbr><\/a> $pValue)","",2],["WriterInterface::write","Elixir\\Routing\\Writer\\WriterInterface","Elixir\/Routing\/Writer\/WriterInterface.html#method_write","()","",2],["WriterInterface::export","Elixir\\Routing\\Writer\\WriterInterface","Elixir\/Routing\/Writer\/WriterInterface.html#method_export","(string $pFile)","",2],["AuthInterface::authenticate","Elixir\\Security\\Authentification\\AuthInterface","Elixir\/Security\/Authentification\/AuthInterface.html#method_authenticate","()","",2],["Identity::__construct","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method___construct","(array $pData = array(), mixed $pSecurityContext = null)","",2],["Identity::setSecurityContext","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_setSecurityContext","(mixed $pValue)","",2],["Identity::getSecurityContext","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_getSecurityContext","()","",2],["Identity::setData","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_setData","(array $pValue)","",2],["Identity::getData","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_getData","()","",2],["Identity::setDomain","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_setDomain","($pValue)","",2],["Identity::getDomain","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_getDomain","()","",2],["Identity::update","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_update","()","",2],["Identity::remove","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method_remove","()","",2],["Identity::__get","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method___get","(string $pKey)","",2],["Identity::__set","Elixir\\Security\\Authentification\\Identity","Elixir\/Security\/Authentification\/Identity.html#method___set","(string $pKey, mixed $pValue)","",2],["Manager::__construct","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method___construct","(<a href=\"Elixir\/Security\/Authentification\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\Security\\Authentification\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pStorage)","",2],["Manager::getStorage","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_getStorage","()","",2],["Manager::authenticate","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_authenticate","(<a href=\"Elixir\/Security\/Authentification\/AuthInterface.html\"><abbr title=\"Elixir\\Security\\Authentification\\AuthInterface\">AuthInterface<\/abbr><\/a> $pAuth, string $pIdentity = self::DEFAULT_IDENTITY)","",2],["Manager::isEmpty","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_isEmpty","()","",2],["Manager::has","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_has","(string $pKey)","",2],["Manager::get","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_get","(string $pKey = self::DEFAULT_IDENTITY, mixed $pDefault = null)","",2],["Manager::set","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_set","(string $pKey, <a href=\"Elixir\/Security\/Authentification\/Identity.html\"><abbr title=\"Elixir\\Security\\Authentification\\Identity\">Identity<\/abbr><\/a> $pIdentity)","",2],["Manager::onIdentityRemoved","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_onIdentityRemoved","(<a href=\"Elixir\/Security\/Authentification\/AuthEvent.html\"><abbr title=\"Elixir\\Security\\Authentification\\AuthEvent\">AuthEvent<\/abbr><\/a> $e)","",2],["Manager::onIdentityUpdated","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_onIdentityUpdated","(<a href=\"Elixir\/Security\/Authentification\/AuthEvent.html\"><abbr title=\"Elixir\\Security\\Authentification\\AuthEvent\">AuthEvent<\/abbr><\/a> $e)","",2],["Manager::remove","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_remove","(string $pKey)","",2],["Manager::gets","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_gets","()","",2],["Manager::sets","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_sets","(array $pData)","",2],["Manager::update","Elixir\\Security\\Authentification\\Manager","Elixir\/Security\/Authentification\/Manager.html#method_update","(<a href=\"Elixir\/Security\/Authentification\/Identity.html\"><abbr title=\"Elixir\\Security\\Authentification\\Identity\">Identity<\/abbr><\/a> $pIdentity)","",2],["MaskBuilder::__construct","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method___construct","(integer $pCode)","",2],["MaskBuilder::explode","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method_explode","(array $pReferences)","",2],["MaskBuilder::has","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method_has","(integer $pCode)","",2],["MaskBuilder::add","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method_add","(integer $pCode)","",2],["MaskBuilder::remove","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method_remove","(integer $pCode)","",2],["MaskBuilder::set","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method_set","(integer $pValue)","",2],["MaskBuilder::get","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method_get","()","",2],["MaskBuilder::isEmpty","Elixir\\Security\\Authentification\\MaskBuilder","Elixir\/Security\/Authentification\/MaskBuilder.html#method_isEmpty","()","",2],["Result::__construct","Elixir\\Security\\Authentification\\Result","Elixir\/Security\/Authentification\/Result.html#method___construct","(integer $pCode, <a href=\"Elixir\/Security\/Authentification\/Identity.html\"><abbr title=\"Elixir\\Security\\Authentification\\Identity\">Identity<\/abbr><\/a> $pIdentity = null, array $pMessages = array())","",2],["Result::isSuccess","Elixir\\Security\\Authentification\\Result","Elixir\/Security\/Authentification\/Result.html#method_isSuccess","()","",2],["Result::isFailure","Elixir\\Security\\Authentification\\Result","Elixir\/Security\/Authentification\/Result.html#method_isFailure","()","",2],["Result::getCode","Elixir\\Security\\Authentification\\Result","Elixir\/Security\/Authentification\/Result.html#method_getCode","()","",2],["Result::hasCode","Elixir\\Security\\Authentification\\Result","Elixir\/Security\/Authentification\/Result.html#method_hasCode","($pCode)","",2],["Result::getIdentity","Elixir\\Security\\Authentification\\Result","Elixir\/Security\/Authentification\/Result.html#method_getIdentity","()","",2],["Result::getMessages","Elixir\\Security\\Authentification\\Result","Elixir\/Security\/Authentification\/Result.html#method_getMessages","()","",2],["Session::__construct","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method___construct","(<a href=\"Elixir\/HTTP\/Session\/SessionInterface.html\"><abbr title=\"Elixir\\HTTP\\Session\\SessionInterface\">SessionInterface<\/abbr><\/a> $pSession)","",2],["Session::isEmpty","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method_isEmpty","()","",2],["Session::has","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method_has","(string $pKey)","",2],["Session::get","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["Session::set","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method_set","(string $pKey, <a href=\"Elixir\/Security\/Authentification\/Identity.html\"><abbr title=\"Elixir\\Security\\Authentification\\Identity\">Identity<\/abbr><\/a> $pIdentity)","",2],["Session::remove","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method_remove","(string $pKey)","",2],["Session::gets","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method_gets","()","",2],["Session::sets","Elixir\\Security\\Authentification\\Storage\\Session","Elixir\/Security\/Authentification\/Storage\/Session.html#method_sets","(array $pData)","",2],["StorageInterface::isEmpty","Elixir\\Security\\Authentification\\Storage\\StorageInterface","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html#method_isEmpty","()","",2],["StorageInterface::has","Elixir\\Security\\Authentification\\Storage\\StorageInterface","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html#method_has","(string $pKey)","",2],["StorageInterface::get","Elixir\\Security\\Authentification\\Storage\\StorageInterface","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["StorageInterface::set","Elixir\\Security\\Authentification\\Storage\\StorageInterface","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html#method_set","(string $pKey, <a href=\"Elixir\/Security\/Authentification\/Identity.html\"><abbr title=\"Elixir\\Security\\Authentification\\Identity\">Identity<\/abbr><\/a> $pIdentity)","",2],["StorageInterface::remove","Elixir\\Security\\Authentification\\Storage\\StorageInterface","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html#method_remove","(string $pKey)","",2],["StorageInterface::gets","Elixir\\Security\\Authentification\\Storage\\StorageInterface","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html#method_gets","()","",2],["StorageInterface::sets","Elixir\\Security\\Authentification\\Storage\\StorageInterface","Elixir\/Security\/Authentification\/Storage\/StorageInterface.html#method_sets","(array $pData)","",2],["CSRF::__construct","Elixir\\Security\\CSRF","Elixir\/Security\/CSRF.html#method___construct","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest)","",2],["CSRF::getRequest","Elixir\\Security\\CSRF","Elixir\/Security\/CSRF.html#method_getRequest","()","",2],["CSRF::create","Elixir\\Security\\CSRF","Elixir\/Security\/CSRF.html#method_create","(string $pName, integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pTime = self::DEFAULT_TIME)","",2],["CSRF::invalidate","Elixir\\Security\\CSRF","Elixir\/Security\/CSRF.html#method_invalidate","()","",2],["CSRF::isValid","Elixir\\Security\\CSRF","Elixir\/Security\/CSRF.html#method_isValid","(string $pName, string $pReferer = null)","",2],["Crypt::__construct","Elixir\\Security\\Crypt","Elixir\/Security\/Crypt.html#method___construct","(string $pSecret, string $pCipher = MCRYPT_RIJNDAEL_128, string $pMode = MCRYPT_MODE_CBC)","",2],["Crypt::getCipher","Elixir\\Security\\Crypt","Elixir\/Security\/Crypt.html#method_getCipher","()","",2],["Crypt::getSecret","Elixir\\Security\\Crypt","Elixir\/Security\/Crypt.html#method_getSecret","()","",2],["Crypt::getMode","Elixir\\Security\\Crypt","Elixir\/Security\/Crypt.html#method_getMode","()","",2],["Crypt::encrypt","Elixir\\Security\\Crypt","Elixir\/Security\/Crypt.html#method_encrypt","(string $pStr)","",2],["Crypt::decrypt","Elixir\\Security\\Crypt","Elixir\/Security\/Crypt.html#method_decrypt","(string $pStr)","",2],["AccessControlAbstract::hasOption","Elixir\\Security\\Firewall\\AccessControlAbstract","Elixir\/Security\/Firewall\/AccessControlAbstract.html#method_hasOption","(string $pKey)","",2],["AccessControlAbstract::setOption","Elixir\\Security\\Firewall\\AccessControlAbstract","Elixir\/Security\/Firewall\/AccessControlAbstract.html#method_setOption","(string $pKey, mixed $pValue)","",2],["AccessControlAbstract::getOption","Elixir\\Security\\Firewall\\AccessControlAbstract","Elixir\/Security\/Firewall\/AccessControlAbstract.html#method_getOption","(string $pKey, mixed $pDefault = null)","",2],["AccessControlAbstract::removeOption","Elixir\\Security\\Firewall\\AccessControlAbstract","Elixir\/Security\/Firewall\/AccessControlAbstract.html#method_removeOption","(string $pKey)","",2],["AccessControlAbstract::getOptions","Elixir\\Security\\Firewall\\AccessControlAbstract","Elixir\/Security\/Firewall\/AccessControlAbstract.html#method_getOptions","()","",2],["AccessControlAbstract::setOptions","Elixir\\Security\\Firewall\\AccessControlAbstract","Elixir\/Security\/Firewall\/AccessControlAbstract.html#method_setOptions","(array $pData)","",2],["AccessControlInterface::getPattern","Elixir\\Security\\Firewall\\AccessControlInterface","Elixir\/Security\/Firewall\/AccessControlInterface.html#method_getPattern","()","",2],["AccessControlInterface::getOptions","Elixir\\Security\\Firewall\\AccessControlInterface","Elixir\/Security\/Firewall\/AccessControlInterface.html#method_getOptions","()","",2],["AccessForbidden::__construct","Elixir\\Security\\Firewall\\Behavior\\AccessForbidden","Elixir\/Security\/Firewall\/Behavior\/AccessForbidden.html#method___construct","(string $pMessage = &#039;You do not have permission to access this resource.&#039;)","",2],["AccessForbidden::getMessage","Elixir\\Security\\Firewall\\Behavior\\AccessForbidden","Elixir\/Security\/Firewall\/Behavior\/AccessForbidden.html#method_getMessage","()","",2],["AccessForbidden::__invoke","Elixir\\Security\\Firewall\\Behavior\\AccessForbidden","Elixir\/Security\/Firewall\/Behavior\/AccessForbidden.html#method___invoke","(<a href=\"Elixir\/Security\/Firewall\/FirewallInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\FirewallInterface\">FirewallInterface<\/abbr><\/a> $pFirewall)","",2],["IdentityNotFound::__construct","Elixir\\Security\\Firewall\\Behavior\\IdentityNotFound","Elixir\/Security\/Firewall\/Behavior\/IdentityNotFound.html#method___construct","(string $pRedirectURL = &#039;\/login&#039;, string $pMessage = &#039;Please log in.&#039;, <a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest = null)","",2],["IdentityNotFound::getRedirectURL","Elixir\\Security\\Firewall\\Behavior\\IdentityNotFound","Elixir\/Security\/Firewall\/Behavior\/IdentityNotFound.html#method_getRedirectURL","()","",2],["IdentityNotFound::getMessage","Elixir\\Security\\Firewall\\Behavior\\IdentityNotFound","Elixir\/Security\/Firewall\/Behavior\/IdentityNotFound.html#method_getMessage","()","",2],["IdentityNotFound::getRequest","Elixir\\Security\\Firewall\\Behavior\\IdentityNotFound","Elixir\/Security\/Firewall\/Behavior\/IdentityNotFound.html#method_getRequest","()","",2],["IdentityNotFound::__invoke","Elixir\\Security\\Firewall\\Behavior\\IdentityNotFound","Elixir\/Security\/Firewall\/Behavior\/IdentityNotFound.html#method___invoke","(<a href=\"Elixir\/Security\/Firewall\/FirewallInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\FirewallInterface\">FirewallInterface<\/abbr><\/a> $pFirewall)","",2],["FirewallAbstract::__construct","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method___construct","(<a href=\"Elixir\/Security\/Authentification\/Manager.html\"><abbr title=\"Elixir\\Security\\Authentification\\Manager\">Manager<\/abbr><\/a> $pAuthManager)","",2],["FirewallAbstract::getAuthManager","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_getAuthManager","()","",2],["FirewallAbstract::load","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_load","(mixed $pConfig)","",2],["FirewallAbstract::export","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_export","(<a href=\"Elixir\/Security\/Firewall\/Writer\/WriterInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\Writer\\WriterInterface\">WriterInterface<\/abbr><\/a> $pWriter, string $pFile)","",2],["FirewallAbstract::hasAccessControl","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_hasAccessControl","(<a href=\"Elixir\/Security\/Firewall\/AccessControlInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\AccessControlInterface\">AccessControlInterface<\/abbr><\/a> $pAccessControl)","",2],["FirewallAbstract::addAccessControl","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_addAccessControl","(<a href=\"Elixir\/Security\/Firewall\/AccessControlInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\AccessControlInterface\">AccessControlInterface<\/abbr><\/a> $pAccessControl, integer $pPriority)","",2],["FirewallAbstract::removeAccessControl","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_removeAccessControl","(<a href=\"Elixir\/Security\/Firewall\/AccessControlInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\AccessControlInterface\">AccessControlInterface<\/abbr><\/a> $pAccessControl)","",2],["FirewallAbstract::getAccessControls","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_getAccessControls","(boolean $pWithInfos = false)","",2],["FirewallAbstract::setAccessControls","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_setAccessControls","(array $pData)","",2],["FirewallAbstract::sort","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_sort","()","",2],["FirewallAbstract::getRequiredAccessControl","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_getRequiredAccessControl","(string $pResource, boolean $pAll = false)","",2],["FirewallAbstract::merge","Elixir\\Security\\Firewall\\FirewallAbstract","Elixir\/Security\/Firewall\/FirewallAbstract.html#method_merge","(array $pData)","",2],["FirewallEvent::__construct","Elixir\\Security\\Firewall\\FirewallEvent","Elixir\/Security\/Firewall\/FirewallEvent.html#method___construct","(string $pType, $pResource = null, <a href=\"Elixir\/Security\/Firewall\/AccessControlInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\AccessControlInterface\">AccessControlInterface<\/abbr><\/a> $pAccessControl = null)","",2],["FirewallEvent::getResource","Elixir\\Security\\Firewall\\FirewallEvent","Elixir\/Security\/Firewall\/FirewallEvent.html#method_getResource","()","",2],["FirewallEvent::getAccessControl","Elixir\\Security\\Firewall\\FirewallEvent","Elixir\/Security\/Firewall\/FirewallEvent.html#method_getAccessControl","()","",2],["FirewallInterface::getAccessControls","Elixir\\Security\\Firewall\\FirewallInterface","Elixir\/Security\/Firewall\/FirewallInterface.html#method_getAccessControls","(boolean $pWithInfos = false)","",2],["FirewallInterface::analyze","Elixir\\Security\\Firewall\\FirewallInterface","Elixir\/Security\/Firewall\/FirewallInterface.html#method_analyze","(string $pResource)","",2],["AccessControl::__construct","Elixir\\Security\\Firewall\\Identity\\AccessControl","Elixir\/Security\/Firewall\/Identity\/AccessControl.html#method___construct","(string $pPattern, array $pOptions = array())","",2],["AccessControl::getPattern","Elixir\\Security\\Firewall\\Identity\\AccessControl","Elixir\/Security\/Firewall\/Identity\/AccessControl.html#method_getPattern","()","",2],["AccessControl::setOption","Elixir\\Security\\Firewall\\Identity\\AccessControl","Elixir\/Security\/Firewall\/Identity\/AccessControl.html#method_setOption","(string $pKey, mixed $pValue)","",2],["AccessControl::addDomain","Elixir\\Security\\Firewall\\Identity\\AccessControl","Elixir\/Security\/Firewall\/Identity\/AccessControl.html#method_addDomain","(string $pDomain)","",2],["AccessControl::getDomains","Elixir\\Security\\Firewall\\Identity\\AccessControl","Elixir\/Security\/Firewall\/Identity\/AccessControl.html#method_getDomains","()","",2],["AccessControl::setDomains","Elixir\\Security\\Firewall\\Identity\\AccessControl","Elixir\/Security\/Firewall\/Identity\/AccessControl.html#method_setDomains","(array $pData)","",2],["Firewall::load","Elixir\\Security\\Firewall\\Identity\\Firewall","Elixir\/Security\/Firewall\/Identity\/Firewall.html#method_load","(mixed $pConfig)","",2],["Firewall::analyze","Elixir\\Security\\Firewall\\Identity\\Firewall","Elixir\/Security\/Firewall\/Identity\/Firewall.html#method_analyze","(string $pResource)","",2],["Arr::load","Elixir\\Security\\Firewall\\Loader\\Arr","Elixir\/Security\/Firewall\/Loader\/Arr.html#method_load","(mixed $pConfig)","",2],["JSON::load","Elixir\\Security\\Firewall\\Loader\\JSON","Elixir\/Security\/Firewall\/Loader\/JSON.html#method_load","(mixed $pConfig)","",2],["LoaderFactory::create","Elixir\\Security\\Firewall\\Loader\\LoaderFactory","Elixir\/Security\/Firewall\/Loader\/LoaderFactory.html#method_create","(mixed $pConfig)","",2],["LoaderInterface::load","Elixir\\Security\\Firewall\\Loader\\LoaderInterface","Elixir\/Security\/Firewall\/Loader\/LoaderInterface.html#method_load","(mixed $pConfig)","",2],["XML::load","Elixir\\Security\\Firewall\\Loader\\XML","Elixir\/Security\/Firewall\/Loader\/XML.html#method_load","(mixed $pConfig)","",2],["AccessControl::__construct","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method___construct","(string $pPattern, array $pOptions = array())","",2],["AccessControl::getPattern","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_getPattern","()","",2],["AccessControl::setOption","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_setOption","(string $pKey, mixed $pValue)","",2],["AccessControl::addRole","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_addRole","(string|integer $pRole)","",2],["AccessControl::getRoles","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_getRoles","()","",2],["AccessControl::setRoles","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_setRoles","(array $pData)","",2],["AccessControl::addPermission","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_addPermission","(string|integer $pPermission)","",2],["AccessControl::getPermissions","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_getPermissions","()","",2],["AccessControl::setPermissions","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_setPermissions","(array $pData)","",2],["AccessControl::setAssert","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_setAssert","(<abbr title=\"Elixir\\Security\\Firewall\\RBAC\\callable\">callable<\/abbr> $pValue)","",2],["AccessControl::getAssert","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_getAssert","()","",2],["AccessControl::addDomain","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_addDomain","(string $pDomain)","",2],["AccessControl::getDomains","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_getDomains","()","",2],["AccessControl::setDomains","Elixir\\Security\\Firewall\\RBAC\\AccessControl","Elixir\/Security\/Firewall\/RBAC\/AccessControl.html#method_setDomains","(array $pData)","",2],["Firewall::load","Elixir\\Security\\Firewall\\RBAC\\Firewall","Elixir\/Security\/Firewall\/RBAC\/Firewall.html#method_load","(mixed $pConfig)","",2],["Firewall::analyze","Elixir\\Security\\Firewall\\RBAC\\Firewall","Elixir\/Security\/Firewall\/RBAC\/Firewall.html#method_analyze","(string $pResource)","",2],["Utils::createResource","Elixir\\Security\\Firewall\\Utils","Elixir\/Security\/Firewall\/Utils.html#method_createResource","(<a href=\"Elixir\/HTTP\/Request.html\"><abbr title=\"Elixir\\HTTP\\Request\">Request<\/abbr><\/a> $pRequest)","",2],["Arr::write","Elixir\\Security\\Firewall\\Writer\\Arr","Elixir\/Security\/Firewall\/Writer\/Arr.html#method_write","()","",2],["Arr::export","Elixir\\Security\\Firewall\\Writer\\Arr","Elixir\/Security\/Firewall\/Writer\/Arr.html#method_export","(string $pFile)","",2],["WriterAbstract::__construct","Elixir\\Security\\Firewall\\Writer\\WriterAbstract","Elixir\/Security\/Firewall\/Writer\/WriterAbstract.html#method___construct","(<a href=\"Elixir\/Security\/Firewall\/FirewallInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\FirewallInterface\">FirewallInterface<\/abbr><\/a> $pFirewall = null)","",2],["WriterAbstract::setFirewall","Elixir\\Security\\Firewall\\Writer\\WriterAbstract","Elixir\/Security\/Firewall\/Writer\/WriterAbstract.html#method_setFirewall","(<a href=\"Elixir\/Security\/Firewall\/FirewallInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\FirewallInterface\">FirewallInterface<\/abbr><\/a> $pValue)","",2],["WriterAbstract::getFirewall","Elixir\\Security\\Firewall\\Writer\\WriterAbstract","Elixir\/Security\/Firewall\/Writer\/WriterAbstract.html#method_getFirewall","()","",2],["WriterInterface::setFirewall","Elixir\\Security\\Firewall\\Writer\\WriterInterface","Elixir\/Security\/Firewall\/Writer\/WriterInterface.html#method_setFirewall","(<a href=\"Elixir\/Security\/Firewall\/FirewallInterface.html\"><abbr title=\"Elixir\\Security\\Firewall\\FirewallInterface\">FirewallInterface<\/abbr><\/a> $pValue)","",2],["WriterInterface::write","Elixir\\Security\\Firewall\\Writer\\WriterInterface","Elixir\/Security\/Firewall\/Writer\/WriterInterface.html#method_write","()","",2],["WriterInterface::export","Elixir\\Security\\Firewall\\Writer\\WriterInterface","Elixir\/Security\/Firewall\/Writer\/WriterInterface.html#method_export","(string $pFile)","",2],["Hash::generateSalt","Elixir\\Security\\Hash","Elixir\/Security\/Hash.html#method_generateSalt","(integer $pType = CRYPT_BLOWFISH, array $pConfig = array())","",2],["Hash::hash","Elixir\\Security\\Hash","Elixir\/Security\/Hash.html#method_hash","(string $pAlgorithm, string $pStr, boolean $pRaw = false)","",2],["Hash::crypt","Elixir\\Security\\Hash","Elixir\/Security\/Hash.html#method_crypt","(string $pPassword, string $pSalt)","",2],["Hash::verify","Elixir\\Security\\Hash","Elixir\/Security\/Hash.html#method_verify","(string $pPassword, string $pHash)","",2],["RBAC::__construct","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method___construct","(array $pRoles = array())","",2],["RBAC::hasRole","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method_hasRole","(string|integer $pRole)","",2],["RBAC::addRole","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method_addRole","(mixed $pRole, string|array $pParents = array())","",2],["RBAC::removeRole","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method_removeRole","(string|integer $pRole)","",2],["RBAC::getRole","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method_getRole","(string|integer $pRole, mixed $pDefault = null)","",2],["RBAC::getRoles","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method_getRoles","()","",2],["RBAC::setRoles","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method_setRoles","(array $pData)","",2],["RBAC::isGranted","Elixir\\Security\\RBAC\\RBAC","Elixir\/Security\/RBAC\/RBAC.html#method_isGranted","(string|integer $pRole, string|integer $pPermission = null, <abbr title=\"Elixir\\Security\\RBAC\\callable\">callable<\/abbr> $pAssert = null)","",2],["RBACInterface::hasRole","Elixir\\Security\\RBAC\\RBACInterface","Elixir\/Security\/RBAC\/RBACInterface.html#method_hasRole","(string|integer $pRole)","",2],["RBACInterface::getRoles","Elixir\\Security\\RBAC\\RBACInterface","Elixir\/Security\/RBAC\/RBACInterface.html#method_getRoles","()","",2],["RBACInterface::isGranted","Elixir\\Security\\RBAC\\RBACInterface","Elixir\/Security\/RBAC\/RBACInterface.html#method_isGranted","(string|integer $pRole, string|integer $pPermission = null, <abbr title=\"Elixir\\Security\\RBAC\\callable\">callable<\/abbr> $pAssert = null)","",2],["Role::__construct","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method___construct","(string|integer $pName, array $pPermisions = array())","",2],["Role::getName","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_getName","()","",2],["Role::setRBAC","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_setRBAC","(<a href=\"Elixir\/Security\/RBAC\/RBACInterface.html\"><abbr title=\"Elixir\\Security\\RBAC\\RBACInterface\">RBACInterface<\/abbr><\/a> $pValue)","",2],["Role::getRBAC","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_getRBAC","()","",2],["Role::hasChild","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_hasChild","(string|integer $pName)","",2],["Role::addChild","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_addChild","(<a href=\"Elixir\/Security\/RBAC\/Role.html\"><abbr title=\"Elixir\\Security\\RBAC\\Role\">Role<\/abbr><\/a> $pRole)","",2],["Role::removeChild","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_removeChild","($pName)","",2],["Role::hasPermission","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_hasPermission","(string|integer $pName)","",2],["Role::addPermission","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_addPermission","(string|integer $pName, <abbr title=\"Elixir\\Security\\RBAC\\callable\">callable<\/abbr> $pAssert = null)","",2],["Role::removePermission","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_removePermission","(string|integer $pName)","",2],["Role::getPermissions","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_getPermissions","()","",2],["Role::setPermissions","Elixir\\Security\\RBAC\\Role","Elixir\/Security\/RBAC\/Role.html#method_setPermissions","(array $pData)","",2],["Tree::__construct","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method___construct","(array $pParameters = array(), array $pChildren = array())","",2],["Tree::getLevel","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_getLevel","()","",2],["Tree::setLevel","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_setLevel","($pValue)","",2],["Tree::isRoot","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_isRoot","()","",2],["Tree::addChild","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_addChild","(<a href=\"Elixir\/Tree\/TreeInterface.html\"><abbr title=\"Elixir\\Tree\\TreeInterface\">TreeInterface<\/abbr><\/a> $pTree, integer $pPriority)","",2],["Tree::getChildren","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_getChildren","(boolean $pWithInfos = false)","",2],["Tree::setChildren","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_setChildren","(array $pData)","",2],["Tree::hasChildren","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_hasChildren","()","",2],["Tree::hasParameter","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_hasParameter","(mixed $pKey)","",2],["Tree::getParameter","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_getParameter","(mixed $pKey, mixed $pDefault = null)","",2],["Tree::setParameter","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_setParameter","(mixed $pKey, mixed $pValue)","",2],["Tree::removeParameter","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_removeParameter","(mixed $pKey)","",2],["Tree::getParameters","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_getParameters","()","",2],["Tree::setParameters","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_setParameters","(array $pData)","",2],["Tree::sort","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_sort","()","",2],["Tree::find","Elixir\\Tree\\Tree","Elixir\/Tree\/Tree.html#method_find","(array $pParameters = array(), integer $pLevel = self::ALL_LEVEL, boolean $pAll = false)","",2],["TreeInterface::getLevel","Elixir\\Tree\\TreeInterface","Elixir\/Tree\/TreeInterface.html#method_getLevel","()","",2],["TreeInterface::setLevel","Elixir\\Tree\\TreeInterface","Elixir\/Tree\/TreeInterface.html#method_setLevel","($pValue)","",2],["TreeInterface::getParameters","Elixir\\Tree\\TreeInterface","Elixir\/Tree\/TreeInterface.html#method_getParameters","()","",2],["TreeInterface::getChildren","Elixir\\Tree\\TreeInterface","Elixir\/Tree\/TreeInterface.html#method_getChildren","(boolean $pWithInfos = false)","",2],["TreeInterface::sort","Elixir\\Tree\\TreeInterface","Elixir\/Tree\/TreeInterface.html#method_sort","()","",2],["TreeInterface::find","Elixir\\Tree\\TreeInterface","Elixir\/Tree\/TreeInterface.html#method_find","(array $pParameters = array(), integer $pLevel = self::ALL_LEVEL, boolean $pAll = false)","",2],["Arr::has","Elixir\\Util\\Arr","Elixir\/Util\/Arr.html#method_has","(mixed $pKey, array $pData)","",2],["Arr::get","Elixir\\Util\\Arr","Elixir\/Util\/Arr.html#method_get","(mixed $pKey, array $pData, mixed $pDefault = null)","",2],["Arr::set","Elixir\\Util\\Arr","Elixir\/Util\/Arr.html#method_set","(mixed $pKey, mixed $pValue, array $pData)","",2],["Arr::remove","Elixir\\Util\\Arr","Elixir\/Util\/Arr.html#method_remove","(mixed $pKey, array $pData)","",2],["Arr::merge","Elixir\\Util\\Arr","Elixir\/Util\/Arr.html#method_merge","(array $pA, array $pB)","",2],["CSV::CSVToArray","Elixir\\Util\\CSV","Elixir\/Util\/CSV.html#method_CSVToArray","(string $pCsv, string $pDelimiter = &#039;;&#039;, string $pEnclosure = &#039;&quot;&#039;, boolean $pAssociate = false)","",2],["CSV::arrayToCSV","Elixir\\Util\\CSV","Elixir\/Util\/CSV.html#method_arrayToCSV","(array $pData, string $pDelimiter = &#039;;&#039;, string $pEnclosure = &#039;&quot;&#039;, boolean $pAssociate = false)","",2],["File::extension","Elixir\\Util\\File","Elixir\/Util\/File.html#method_extension","(string $pFilePath)","",2],["File::dirname","Elixir\\Util\\File","Elixir\/Util\/File.html#method_dirname","(string $pFilePath)","",2],["File::basename","Elixir\\Util\\File","Elixir\/Util\/File.html#method_basename","(string $pFilePath)","",2],["File::filename","Elixir\\Util\\File","Elixir\/Util\/File.html#method_filename","(string $pFilePath)","",2],["File::mimeType","Elixir\\Util\\File","Elixir\/Util\/File.html#method_mimeType","(string $pFilePath)","",2],["File::copy","Elixir\\Util\\File","Elixir\/Util\/File.html#method_copy","(string $pSrcPath, string $pDstPath, boolean $pOverride = true)","",2],["File::filesList","Elixir\\Util\\File","Elixir\/Util\/File.html#method_filesList","(string $pPath)","",2],["File::remove","Elixir\\Util\\File","Elixir\/Util\/File.html#method_remove","(string $pPath)","",2],["File::rename","Elixir\\Util\\File","Elixir\/Util\/File.html#method_rename","(string $pOldName, string $pNewName)","",2],["Image::getSizingInfo","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_getSizingInfo","(string|<abbr title=\"Elixir\\Util\\resource\">resource<\/abbr> $pImageOrResource, integer $pWidth, integer $pHeight, boolean $pRatio = true, string $pMode = self::RESIZE)","",2],["Image::isGD","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_isGD","(<abbr title=\"Elixir\\Util\\resource\">resource<\/abbr> $pResource)","",2],["Image::createFromResource","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_createFromResource","(<abbr title=\"Elixir\\Util\\resource\">resource<\/abbr> $pResource, string $pTypeMime)","",2],["Image::createFromImage","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_createFromImage","(string $pImage)","",2],["Image::createResource","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_createResource","(string $pImagePath)","",2],["Image::__construct","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method___construct","(string|<abbr title=\"Elixir\\Util\\resource\">resource<\/abbr> $pImageOrResource, string $pTypeMime = null)","",2],["Image::__destruct","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method___destruct","()","",2],["Image::getOriginalImagePath","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_getOriginalImagePath","()","",2],["Image::getMimeType","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_getMimeType","()","",2],["Image::getWidth","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_getWidth","()","",2],["Image::getHeight","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_getHeight","()","",2],["Image::getResource","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_getResource","()","",2],["Image::resize","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_resize","(integer $pWMax, integer $pHMax, boolean $pRatio = true)","",2],["Image::enlarge","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_enlarge","(integer $pWMin, integer $pHMin, boolean $pRatio = true)","",2],["Image::crop","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_crop","(integer $pWEnd, integer $pHEnd)","",2],["Image::merge","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_merge","(<abbr title=\"Elixir\\Util\\resource\">resource<\/abbr>|<a href=\"Elixir\/Util\/Image.html\"><abbr title=\"Elixir\\Util\\Image\">Image<\/abbr><\/a> $pResource, integer $pOpacity = 100, string $pHPos = self::TOP, string $pWPos = self::LEFT, array $pOptions = array())","",2],["Image::filter","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_filter","(integer $pFiltertype, integer $pArg1 = null, integer $pArg2 = null, integer $pArg3 = null, integer $pArg4 = null)","",2],["Image::save","Elixir\\Util\\Image","Elixir\/Util\/Image.html#method_save","(string $pImagePath = null, integer $pQuality = self::DEFAULT_QUALITY)","",2],["Str::isJSON","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_isJSON","(mixed $pObject)","",2],["Str::random","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_random","(integer $pLength = 10, string|array $pCharlist = &#039;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#039;)","",2],["Str::removeAccents","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_removeAccents","(string $pStr, string $pCharset = &#039;utf-8&#039;)","",2],["Str::camelize","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_camelize","(string $pStr)","",2],["Str::slug","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_slug","(string $pStr, string $pSeparator = &#039;-&#039;)","",2],["Str::snake","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_snake","(string $pStr, string $pDelimiter = &#039;-&#039;)","",2],["Str::resume","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_resume","(string $pStr, integer $pMax = 100, string $pCut = &#039;...&#039;, boolean $pUseWord = true)","",2],["Str::keywords","Elixir\\Util\\Str","Elixir\/Util\/Str.html#method_keywords","(string $pStr, integer $pSensitivity = 4, integer $pMin = 2, integer $pMax = 8, integer $pLimit = 10)","",2],["Boolean::isValid","Elixir\\Validator\\Boolean","Elixir\/Validator\/Boolean.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["CSRF::__construct","Elixir\\Validator\\CSRF","Elixir\/Validator\/CSRF.html#method___construct","(<a href=\"Elixir\/Security\/CSRF.html\"><abbr title=\"Elixir\\Security\\CSRF\">CSRF<\/abbr><\/a> $pCSRF = null)","",2],["CSRF::setCSRF","Elixir\\Validator\\CSRF","Elixir\/Validator\/CSRF.html#method_setCSRF","(<a href=\"Elixir\/Security\/CSRF.html\"><abbr title=\"Elixir\\Security\\CSRF\">CSRF<\/abbr><\/a> $pValue)","",2],["CSRF::getCSRF","Elixir\\Validator\\CSRF","Elixir\/Validator\/CSRF.html#method_getCSRF","()","",2],["CSRF::createToken","Elixir\\Validator\\CSRF","Elixir\/Validator\/CSRF.html#method_createToken","(string $pName, integer|string|<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a> $pTime = Context::DEFAULT_TIME)","",2],["CSRF::isValid","Elixir\\Validator\\CSRF","Elixir\/Validator\/CSRF.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Callback::isValid","Elixir\\Validator\\Callback","Elixir\/Validator\/Callback.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Chain::addValidator","Elixir\\Validator\\Chain","Elixir\/Validator\/Chain.html#method_addValidator","(<a href=\"Elixir\/Validator\/ValidatorInterface.html\"><abbr title=\"Elixir\\Validator\\ValidatorInterface\">ValidatorInterface<\/abbr><\/a>|<abbr title=\"Elixir\\Validator\\callable\">callable<\/abbr>|string $pValidator, array $pOptions = array())","",2],["Chain::getValidators","Elixir\\Validator\\Chain","Elixir\/Validator\/Chain.html#method_getValidators","()","",2],["Chain::setValidators","Elixir\\Validator\\Chain","Elixir\/Validator\/Chain.html#method_setValidators","(array $pData)","",2],["Chain::isValid","Elixir\\Validator\\Chain","Elixir\/Validator\/Chain.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Date::isValid","Elixir\\Validator\\Date","Elixir\/Validator\/Date.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Email::isValid","Elixir\\Validator\\Email","Elixir\/Validator\/Email.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Equal::isValid","Elixir\\Validator\\Equal","Elixir\/Validator\/Equal.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Extension::isValid","Elixir\\Validator\\Extension","Elixir\/Validator\/Extension.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["FileSize::isValid","Elixir\\Validator\\FileSize","Elixir\/Validator\/FileSize.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Float::isValid","Elixir\\Validator\\Float","Elixir\/Validator\/Float.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Format::isValid","Elixir\\Validator\\Format","Elixir\/Validator\/Format.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["IP::isValid","Elixir\\Validator\\IP","Elixir\/Validator\/IP.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Int::isValid","Elixir\\Validator\\Int","Elixir\/Validator\/Int.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Length::isValid","Elixir\\Validator\\Length","Elixir\/Validator\/Length.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["MimeType::isValid","Elixir\\Validator\\MimeType","Elixir\/Validator\/MimeType.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["NotEmpty::isValid","Elixir\\Validator\\NotEmpty","Elixir\/Validator\/NotEmpty.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Range::isValid","Elixir\\Validator\\Range","Elixir\/Validator\/Range.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["Regex::isValid","Elixir\\Validator\\Regex","Elixir\/Validator\/Regex.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["URL::isValid","Elixir\\Validator\\URL","Elixir\/Validator\/URL.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["ValidatorAbstract::setDefaultOptions","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_setDefaultOptions","(array $pValue)","",2],["ValidatorAbstract::getDefaultOptions","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_getDefaultOptions","()","",2],["ValidatorAbstract::setErrorMessage","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_setErrorMessage","(string $pValue)","",2],["ValidatorAbstract::getErrorMessage","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_getErrorMessage","()","",2],["ValidatorAbstract::setErrorMessageTemplate","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_setErrorMessageTemplate","(string $pKey, string $pValue)","",2],["ValidatorAbstract::getErrorMessageTemplate","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_getErrorMessageTemplate","(string $pKey, mixed $pDefault = null)","",2],["ValidatorAbstract::hasError","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_hasError","()","",2],["ValidatorAbstract::errors","Elixir\\Validator\\ValidatorAbstract","Elixir\/Validator\/ValidatorAbstract.html#method_errors","()","",2],["ValidatorInterface::isValid","Elixir\\Validator\\ValidatorInterface","Elixir\/Validator\/ValidatorInterface.html#method_isValid","(mixed $pContent, array $pOptions = array())","",2],["ValidatorInterface::hasError","Elixir\\Validator\\ValidatorInterface","Elixir\/Validator\/ValidatorInterface.html#method_hasError","()","",2],["ValidatorInterface::errors","Elixir\\Validator\\ValidatorInterface","Elixir\/Validator\/ValidatorInterface.html#method_errors","()","",2],["Version::getCode","Elixir\\Version","Elixir\/Version.html#method_getCode","()","",2],["Version::getLastModification","Elixir\\Version","Elixir\/Version.html#method_getLastModification","()","",2],["DataAbstract::has","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_has","(string $pKey)","",2],["DataAbstract::get","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["DataAbstract::set","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_set","(string $pKey, mixed $pValue)","",2],["DataAbstract::setGlobal","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_setGlobal","(string $pKey, mixed $pValue)","",2],["DataAbstract::remove","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_remove","(string $pKey)","",2],["DataAbstract::gets","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_gets","()","",2],["DataAbstract::sets","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_sets","(array $pData)","",2],["DataAbstract::globalize","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_globalize","(string $pKey)","",2],["DataAbstract::isGlobal","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method_isGlobal","(string $pKey)","",2],["DataAbstract::__isset","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method___isset","($pKey)","",2],["DataAbstract::__get","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method___get","($pKey)","",2],["DataAbstract::__set","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method___set","($pKey, $pValue)","",2],["DataAbstract::__unset","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method___unset","($pKey)","",2],["DataAbstract::__clone","Elixir\\View\\DataAbstract","Elixir\/View\/DataAbstract.html#method___clone","()","",2],["EscaperInterface::setAutoEscape","Elixir\\View\\EscaperInterface","Elixir\/View\/EscaperInterface.html#method_setAutoEscape","(boolean $pValue)","",2],["EscaperInterface::isAutoEscape","Elixir\\View\\EscaperInterface","Elixir\/View\/EscaperInterface.html#method_isAutoEscape","()","",2],["EscaperInterface::setEscaper","Elixir\\View\\EscaperInterface","Elixir\/View\/EscaperInterface.html#method_setEscaper","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a> $pValue)","",2],["EscaperInterface::getEscaper","Elixir\\View\\EscaperInterface","Elixir\/View\/EscaperInterface.html#method_getEscaper","()","",2],["EscaperInterface::escape","Elixir\\View\\EscaperInterface","Elixir\/View\/EscaperInterface.html#method_escape","(mixed $pData, string $pStrategy = &#039;html&#039;)","",2],["EscaperInterface::raw","Elixir\\View\\EscaperInterface","Elixir\/View\/EscaperInterface.html#method_raw","(string $pKey, mixed $pDefault = null)","",2],["GlobalInterface::setGlobal","Elixir\\View\\GlobalInterface","Elixir\/View\/GlobalInterface.html#method_setGlobal","(string $pKey, mixed $pValue)","",2],["GlobalInterface::globalize","Elixir\\View\\GlobalInterface","Elixir\/View\/GlobalInterface.html#method_globalize","(string $pKey)","",2],["GlobalInterface::isGlobal","Elixir\\View\\GlobalInterface","Elixir\/View\/GlobalInterface.html#method_isGlobal","(string $pKey)","",2],["HelperInterface::setHelperContainer","Elixir\\View\\HelperInterface","Elixir\/View\/HelperInterface.html#method_setHelperContainer","(<a href=\"Elixir\/View\/Helper\/Container.html\"><abbr title=\"Elixir\\View\\Helper\\Container\">Container<\/abbr><\/a>|<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["HelperInterface::getHelperContainer","Elixir\\View\\HelperInterface","Elixir\/View\/HelperInterface.html#method_getHelperContainer","()","",2],["HelperInterface::helper","Elixir\\View\\HelperInterface","Elixir\/View\/HelperInterface.html#method_helper","(string $pKey)","",2],["Container::__construct","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method___construct","(<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pContainer)","",2],["Container::getContainer","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_getContainer","()","",2],["Container::setView","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_setView","(<a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pValue)","",2],["Container::getView","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_getView","()","",2],["Container::setUseTag","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_setUseTag","(boolean $pValue)","",2],["Container::isUseTag","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_isUseTag","()","",2],["Container::load","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_load","(array $pHelpers)","",2],["Container::get","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_get","($pKey, $pDefault = null)","",2],["Container::has","Elixir\\View\\Helper\\Container","Elixir\/View\/Helper\/Container.html#method_has","(string $pKey)","",2],["ContextInterface::setView","Elixir\\View\\Helper\\ContextInterface","Elixir\/View\/Helper\/ContextInterface.html#method_setView","(<a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pValue)","",2],["Manager::getDefaultEngine","Elixir\\View\\Manager","Elixir\/View\/Manager.html#method_getDefaultEngine","()","",2],["Manager::getDefaultExtension","Elixir\\View\\Manager","Elixir\/View\/Manager.html#method_getDefaultExtension","()","",2],["Manager::registerEngine","Elixir\\View\\Manager","Elixir\/View\/Manager.html#method_registerEngine","(string $pName, <a href=\"Elixir\/View\/ViewInterface.html\"><abbr title=\"Elixir\\View\\ViewInterface\">ViewInterface<\/abbr><\/a> $pView, string $pExtension = null, boolean $pDefaultEngine = true)","",2],["Manager::getEngine","Elixir\\View\\Manager","Elixir\/View\/Manager.html#method_getEngine","(<abbr title=\"Elixir\\View\\$pName\">$pName<\/abbr> $pName, mixed $pDefault = null)","",2],["Manager::getEngineByExtension","Elixir\\View\\Manager","Elixir\/View\/Manager.html#method_getEngineByExtension","(string $pExtension, mixed $pDefault = null)","",2],["Manager::getEngines","Elixir\\View\\Manager","Elixir\/View\/Manager.html#method_getEngines","()","",2],["Manager::render","Elixir\\View\\Manager","Elixir\/View\/Manager.html#method_render","(string|<a href=\"Elixir\/View\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\View\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pTemplate, array $pData = array())","",2],["BlockEvent::__construct","Elixir\\View\\PHP\\BlockEvent","Elixir\/View\/PHP\/BlockEvent.html#method___construct","(string $pType, $pBlock = null, $pContent = null, array $pOptions = array())","",2],["BlockEvent::getBlock","Elixir\\View\\PHP\\BlockEvent","Elixir\/View\/PHP\/BlockEvent.html#method_getBlock","()","",2],["BlockEvent::getContent","Elixir\\View\\PHP\\BlockEvent","Elixir\/View\/PHP\/BlockEvent.html#method_getContent","()","",2],["BlockEvent::setContent","Elixir\\View\\PHP\\BlockEvent","Elixir\/View\/PHP\/BlockEvent.html#method_setContent","(string $pValue)","",2],["BlockEvent::getOptions","Elixir\\View\\PHP\\BlockEvent","Elixir\/View\/PHP\/BlockEvent.html#method_getOptions","()","",2],["Blocks::start","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_start","(string $pKey, array $pOptions = array())","",2],["Blocks::parent","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_parent","()","",2],["Blocks::end","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_end","()","",2],["Blocks::mask","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_mask","($pKey, $pDefault = null)","",2],["Blocks::has","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_has","(string $pKey)","",2],["Blocks::get","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_get","(string $pKey, mixed $pDefault = null, boolean $pCompiled = true)","",2],["Blocks::set","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_set","(string $pKey, string $pValue, array $pOptions = array(), boolean $pReplace = true)","",2],["Blocks::remove","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_remove","(string $pKey)","",2],["Blocks::gets","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_gets","()","",2],["Blocks::sets","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_sets","(array $pData)","",2],["Blocks::reset","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_reset","()","",2],["Blocks::parse","Elixir\\View\\PHP\\Blocks","Elixir\/View\/PHP\/Blocks.html#method_parse","(string $pContent)","",2],["PHP::__construct","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method___construct","()","",2],["PHP::getBlocks","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_getBlocks","()","",2],["PHP::getParser","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_getParser","()","",2],["PHP::getDefaultExtension","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_getDefaultExtension","()","",2],["PHP::setHelperContainer","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_setHelperContainer","(<a href=\"Elixir\/View\/Helper\/Container.html\"><abbr title=\"Elixir\\View\\Helper\\Container\">Container<\/abbr><\/a>|<a href=\"Elixir\/DI\/ContainerInterface.html\"><abbr title=\"Elixir\\DI\\ContainerInterface\">ContainerInterface<\/abbr><\/a> $pValue)","",2],["PHP::getHelperContainer","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_getHelperContainer","()","",2],["PHP::setEscaper","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_setEscaper","(<a href=\"Elixir\/Filter\/FilterInterface.html\"><abbr title=\"Elixir\\Filter\\FilterInterface\">FilterInterface<\/abbr><\/a> $pValue)","",2],["PHP::getEscaper","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_getEscaper","()","",2],["PHP::setAutoEscape","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_setAutoEscape","(boolean $pValue)","",2],["PHP::isAutoEscape","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_isAutoEscape","()","",2],["PHP::escape","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_escape","(mixed $pData, string $pStrategy = &#039;html&#039;)","",2],["PHP::raw","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_raw","(string $pKey, mixed $pDefault = null)","",2],["PHP::helper","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_helper","(string $pKey)","",2],["PHP::extend","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_extend","(string $pTemplate)","",2],["PHP::start","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_start","(string $pBlock)","",2],["PHP::parent","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_parent","()","",2],["PHP::end","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_end","()","",2],["PHP::block","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_block","(string $pBlock)","",2],["PHP::get","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["PHP::render","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method_render","(string|<a href=\"Elixir\/View\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\View\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pTemplate, array $pData = array())","",2],["PHP::__clone","Elixir\\View\\PHP\\PHP","Elixir\/View\/PHP\/PHP.html#method___clone","()","",2],["Parser::__construct","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method___construct","(<a href=\"Elixir\/View\/PHP\/PHP.html\"><abbr title=\"Elixir\\View\\PHP\\PHP\">PHP<\/abbr><\/a> $pView)","",2],["Parser::parse","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method_parse","(string|<a href=\"Elixir\/View\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\View\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pTemplate)","",2],["Parser::data","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method_data","()","",2],["Parser::__isset","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method___isset","($pKey)","",2],["Parser::__get","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method___get","($pKey)","",2],["Parser::__set","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method___set","($pKey, $pValue)","",2],["Parser::__unset","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method___unset","($pKey)","",2],["Parser::__call","Elixir\\View\\PHP\\Parser","Elixir\/View\/PHP\/Parser.html#method___call","(string $pMethod, array $pArguments)","",2],["File::__construct","Elixir\\View\\Storage\\File","Elixir\/View\/Storage\/File.html#method___construct","(string $pFile)","",2],["File::getContent","Elixir\\View\\Storage\\File","Elixir\/View\/Storage\/File.html#method_getContent","()","",2],["File::__toString","Elixir\\View\\Storage\\File","Elixir\/View\/Storage\/File.html#method___toString","()","",2],["StorageInterface::getContent","Elixir\\View\\Storage\\StorageInterface","Elixir\/View\/Storage\/StorageInterface.html#method_getContent","()","",2],["Str::__construct","Elixir\\View\\Storage\\Str","Elixir\/View\/Storage\/Str.html#method___construct","(string $pStr)","",2],["Str::getContent","Elixir\\View\\Storage\\Str","Elixir\/View\/Storage\/Str.html#method_getContent","()","",2],["Str::__toString","Elixir\\View\\Storage\\Str","Elixir\/View\/Storage\/Str.html#method___toString","()","",2],["ViewInterface::getDefaultExtension","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_getDefaultExtension","()","",2],["ViewInterface::has","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_has","(string $pKey)","",2],["ViewInterface::get","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_get","(string $pKey, mixed $pDefault = null)","",2],["ViewInterface::set","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_set","(string $pKey, mixed $pValue)","",2],["ViewInterface::remove","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_remove","(string $pKey)","",2],["ViewInterface::gets","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_gets","()","",2],["ViewInterface::sets","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_sets","(array $pData)","",2],["ViewInterface::render","Elixir\\View\\ViewInterface","Elixir\/View\/ViewInterface.html#method_render","(string|<a href=\"Elixir\/View\/Storage\/StorageInterface.html\"><abbr title=\"Elixir\\View\\Storage\\StorageInterface\">StorageInterface<\/abbr><\/a> $pTemplate, array $pData = array())","",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']